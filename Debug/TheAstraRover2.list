
TheAstraRover2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b94  08007b94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b9c  08007b9c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000c90  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cec  20000cec  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001510c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fb8  00000000  00000000  000351db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f88  00000000  00000000  00038198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c12  00000000  00000000  00039120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023dc7  00000000  00000000  00039d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013ff5  00000000  00000000  0005daf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0aac  00000000  00000000  00071aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045ac  00000000  00000000  0014259c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00146b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007880 	.word	0x08007880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08007880 	.word	0x08007880

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b970 	b.w	8000aec <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9e08      	ldr	r6, [sp, #32]
 800082a:	460d      	mov	r5, r1
 800082c:	4604      	mov	r4, r0
 800082e:	460f      	mov	r7, r1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d14a      	bne.n	80008ca <__udivmoddi4+0xa6>
 8000834:	428a      	cmp	r2, r1
 8000836:	4694      	mov	ip, r2
 8000838:	d965      	bls.n	8000906 <__udivmoddi4+0xe2>
 800083a:	fab2 f382 	clz	r3, r2
 800083e:	b143      	cbz	r3, 8000852 <__udivmoddi4+0x2e>
 8000840:	fa02 fc03 	lsl.w	ip, r2, r3
 8000844:	f1c3 0220 	rsb	r2, r3, #32
 8000848:	409f      	lsls	r7, r3
 800084a:	fa20 f202 	lsr.w	r2, r0, r2
 800084e:	4317      	orrs	r7, r2
 8000850:	409c      	lsls	r4, r3
 8000852:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000856:	fa1f f58c 	uxth.w	r5, ip
 800085a:	fbb7 f1fe 	udiv	r1, r7, lr
 800085e:	0c22      	lsrs	r2, r4, #16
 8000860:	fb0e 7711 	mls	r7, lr, r1, r7
 8000864:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000868:	fb01 f005 	mul.w	r0, r1, r5
 800086c:	4290      	cmp	r0, r2
 800086e:	d90a      	bls.n	8000886 <__udivmoddi4+0x62>
 8000870:	eb1c 0202 	adds.w	r2, ip, r2
 8000874:	f101 37ff 	add.w	r7, r1, #4294967295
 8000878:	f080 811c 	bcs.w	8000ab4 <__udivmoddi4+0x290>
 800087c:	4290      	cmp	r0, r2
 800087e:	f240 8119 	bls.w	8000ab4 <__udivmoddi4+0x290>
 8000882:	3902      	subs	r1, #2
 8000884:	4462      	add	r2, ip
 8000886:	1a12      	subs	r2, r2, r0
 8000888:	b2a4      	uxth	r4, r4
 800088a:	fbb2 f0fe 	udiv	r0, r2, lr
 800088e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000892:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000896:	fb00 f505 	mul.w	r5, r0, r5
 800089a:	42a5      	cmp	r5, r4
 800089c:	d90a      	bls.n	80008b4 <__udivmoddi4+0x90>
 800089e:	eb1c 0404 	adds.w	r4, ip, r4
 80008a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008a6:	f080 8107 	bcs.w	8000ab8 <__udivmoddi4+0x294>
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	f240 8104 	bls.w	8000ab8 <__udivmoddi4+0x294>
 80008b0:	4464      	add	r4, ip
 80008b2:	3802      	subs	r0, #2
 80008b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	b11e      	cbz	r6, 80008c6 <__udivmoddi4+0xa2>
 80008be:	40dc      	lsrs	r4, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c6 4300 	strd	r4, r3, [r6]
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0xbc>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f000 80ed 	beq.w	8000aae <__udivmoddi4+0x28a>
 80008d4:	2100      	movs	r1, #0
 80008d6:	e9c6 0500 	strd	r0, r5, [r6]
 80008da:	4608      	mov	r0, r1
 80008dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e0:	fab3 f183 	clz	r1, r3
 80008e4:	2900      	cmp	r1, #0
 80008e6:	d149      	bne.n	800097c <__udivmoddi4+0x158>
 80008e8:	42ab      	cmp	r3, r5
 80008ea:	d302      	bcc.n	80008f2 <__udivmoddi4+0xce>
 80008ec:	4282      	cmp	r2, r0
 80008ee:	f200 80f8 	bhi.w	8000ae2 <__udivmoddi4+0x2be>
 80008f2:	1a84      	subs	r4, r0, r2
 80008f4:	eb65 0203 	sbc.w	r2, r5, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	4617      	mov	r7, r2
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d0e2      	beq.n	80008c6 <__udivmoddi4+0xa2>
 8000900:	e9c6 4700 	strd	r4, r7, [r6]
 8000904:	e7df      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000906:	b902      	cbnz	r2, 800090a <__udivmoddi4+0xe6>
 8000908:	deff      	udf	#255	; 0xff
 800090a:	fab2 f382 	clz	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8090 	bne.w	8000a34 <__udivmoddi4+0x210>
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2101      	movs	r1, #1
 8000920:	fbb2 f5f7 	udiv	r5, r2, r7
 8000924:	fb07 2015 	mls	r0, r7, r5, r2
 8000928:	0c22      	lsrs	r2, r4, #16
 800092a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800092e:	fb0e f005 	mul.w	r0, lr, r5
 8000932:	4290      	cmp	r0, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x124>
 8000936:	eb1c 0202 	adds.w	r2, ip, r2
 800093a:	f105 38ff 	add.w	r8, r5, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x122>
 8000940:	4290      	cmp	r0, r2
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2b8>
 8000946:	4645      	mov	r5, r8
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000950:	fb07 2210 	mls	r2, r7, r0, r2
 8000954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x14e>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 32ff 	add.w	r2, r0, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x14c>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2c2>
 8000970:	4610      	mov	r0, r2
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800097a:	e79f      	b.n	80008bc <__udivmoddi4+0x98>
 800097c:	f1c1 0720 	rsb	r7, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa05 f401 	lsl.w	r4, r5, r1
 800098e:	fa20 f307 	lsr.w	r3, r0, r7
 8000992:	40fd      	lsrs	r5, r7
 8000994:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000998:	4323      	orrs	r3, r4
 800099a:	fbb5 f8f9 	udiv	r8, r5, r9
 800099e:	fa1f fe8c 	uxth.w	lr, ip
 80009a2:	fb09 5518 	mls	r5, r9, r8, r5
 80009a6:	0c1c      	lsrs	r4, r3, #16
 80009a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ac:	fb08 f50e 	mul.w	r5, r8, lr
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	fa00 f001 	lsl.w	r0, r0, r1
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b0>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2b4>
 80009c8:	42a5      	cmp	r5, r4
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2b4>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4464      	add	r4, ip
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	b29d      	uxth	r5, r3
 80009d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009dc:	fb09 4413 	mls	r4, r9, r3, r4
 80009e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1da>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2ac>
 80009f6:	45a6      	cmp	lr, r4
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2ac>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	4464      	add	r4, ip
 80009fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a02:	fba3 9502 	umull	r9, r5, r3, r2
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	42ac      	cmp	r4, r5
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46ae      	mov	lr, r5
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x29c>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x298>
 8000a14:	b156      	cbz	r6, 8000a2c <__udivmoddi4+0x208>
 8000a16:	ebb0 0208 	subs.w	r2, r0, r8
 8000a1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a22:	40ca      	lsrs	r2, r1
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	4317      	orrs	r7, r2
 8000a28:	e9c6 7400 	strd	r7, r4, [r6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a34:	f1c3 0120 	rsb	r1, r3, #32
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a40:	fa25 f101 	lsr.w	r1, r5, r1
 8000a44:	409d      	lsls	r5, r3
 8000a46:	432a      	orrs	r2, r5
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a54:	fb07 1510 	mls	r5, r7, r0, r1
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a62:	428d      	cmp	r5, r1
 8000a64:	fa04 f403 	lsl.w	r4, r4, r3
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x258>
 8000a6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a74:	428d      	cmp	r5, r1
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1b49      	subs	r1, r1, r5
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a84:	fb07 1115 	mls	r1, r7, r5, r1
 8000a88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a90:	4291      	cmp	r1, r2
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x282>
 8000a94:	eb1c 0202 	adds.w	r2, ip, r2
 8000a98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2a8>
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2a8>
 8000aa2:	3d02      	subs	r5, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a52      	subs	r2, r2, r1
 8000aa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0xfc>
 8000aae:	4631      	mov	r1, r6
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e708      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e6e6      	b.n	8000886 <__udivmoddi4+0x62>
 8000ab8:	4610      	mov	r0, r2
 8000aba:	e6fb      	b.n	80008b4 <__udivmoddi4+0x90>
 8000abc:	4548      	cmp	r0, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f0>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f0>
 8000acc:	4645      	mov	r5, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x282>
 8000ad0:	462b      	mov	r3, r5
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1da>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x258>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b0>
 8000adc:	3d02      	subs	r5, #2
 8000ade:	4462      	add	r2, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x124>
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e70a      	b.n	80008fc <__udivmoddi4+0xd8>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x14e>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart2)
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  : huart(huart2) {}
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f91f 	bl	8000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b64:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b6c:	89fa      	ldrh	r2, [r7, #14]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d102      	bne.n	8000b78 <_ZN14BufferedSerial4readEv+0x32>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e016      	b.n	8000ba6 <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	b291      	uxth	r1, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bce:	da25      	bge.n	8000c1c <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000bd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	3304      	adds	r3, #4
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 fd2d 	bl	8007644 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d921      	bls.n	8000c52 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000c1a:	e01a      	b.n	8000c52 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f006 fd0c 	bl	8007644 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d905      	bls.n	8000c48 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f804 	bl	8000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00f      	beq.n	8000c92 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d107      	bne.n	8000c92 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d10b      	bne.n	8000cb8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d003      	beq.n	8000cb8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d154      	bne.n	8000d6c <_ZN14BufferedSerial15flush_tx_bufferEv+0x10c>
  mutex = true;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d103      	bne.n	8000ce0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d21b      	bcs.n	8000d28 <_ZN14BufferedSerial15flush_tx_bufferEv+0xc8>
    uint16_t length = tx_head - tx_tail;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d06:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	89ba      	ldrh	r2, [r7, #12]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d16:	f005 f99f 	bl	8006058 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000d26:	e01d      	b.n	8000d64 <_ZN14BufferedSerial15flush_tx_bufferEv+0x104>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	3304      	adds	r3, #4
 8000d48:	89fa      	ldrh	r2, [r7, #14]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d4e:	f005 f983 	bl	8006058 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e000      	b.n	8000d6e <_ZN14BufferedSerial15flush_tx_bufferEv+0x10e>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000484 	.word	0x20000484
 8000d78:	20000a9c 	.word	0x20000a9c

08000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart2, rx_buf, RX_BUF_SIZE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <_ZN14BufferedSerial15reset_rx_bufferEv+0x20>)
 8000d90:	f005 f9e0 	bl	8006154 <HAL_UART_Receive_DMA>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000a9c 	.word	0x20000a9c

08000da0 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_TxCpltCallback+0x34>)
 8000dc6:	f7ff ffeb 	bl	8000da0 <_ZN14BufferedSerial10get_handleEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <HAL_UART_TxCpltCallback+0x34>)
 8000dde:	f7ff ff3f 	bl	8000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000078 	.word	0x20000078

08000df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <HAL_UART_RxCpltCallback+0x18>)
 8000dfa:	f7ff ffbf 	bl	8000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000078 	.word	0x20000078

08000e0c <_Z41__static_initialization_and_destruction_0ii>:
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d103      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000e2a:	f7ff fe61 	bl	8000af0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000a9c 	.word	0x20000a9c
 8000e3c:	20000078 	.word	0x20000078

08000e40 <_GLOBAL__sub_I_buff_serial>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff ffdf 	bl	8000e0c <_Z41__static_initialization_and_destruction_0ii>
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2010      	movs	r0, #16
 8000e78:	f002 fef1 	bl	8003c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e7c:	2010      	movs	r0, #16
 8000e7e:	f002 ff0a 	bl	8003c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2011      	movs	r0, #17
 8000e88:	f002 fee9 	bl	8003c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e8c:	2011      	movs	r0, #17
 8000e8e:	f002 ff02 	bl	8003c96 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_GPIO_Init+0x84>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f002 fd4a 	bl	80039c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f83a 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f7ff ffb4 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f38:	f7ff ff8a 	bl	8000e50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f3c:	f002 fc36 	bl	80037ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f40:	f002 f9f4 	bl	800332c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f44:	f002 fab6 	bl	80034b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <main+0x78>)
 8000f4a:	f004 f945 	bl	80051d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <main+0x7c>)
 8000f50:	f004 f942 	bl	80051d8 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f54:	2100      	movs	r1, #0
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <main+0x78>)
 8000f58:	f004 fa00 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <main+0x78>)
 8000f60:	f004 f9fc 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f64:	2108      	movs	r1, #8
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <main+0x78>)
 8000f68:	f004 f9f8 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <main+0x78>)
 8000f70:	f004 f9f4 	bl	800535c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <main+0x7c>)
 8000f78:	f004 f9f0 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <main+0x7c>)
 8000f80:	f004 f9ec 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <main+0x7c>)
 8000f88:	f004 f9e8 	bl	800535c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <main+0x7c>)
 8000f90:	f004 f9e4 	bl	800535c <HAL_TIM_PWM_Start>

  setup();
 8000f94:	f001 fad4 	bl	8002540 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000f98:	f001 fae2 	bl	8002560 <loop>
 8000f9c:	e7fc      	b.n	8000f98 <main+0x70>
 8000f9e:	bf00      	nop
 8000fa0:	20000a0c 	.word	0x20000a0c
 8000fa4:	20000a54 	.word	0x20000a54

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 fb0f 	bl	80075da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001018:	2308      	movs	r3, #8
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fbea 	bl	8004808 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 f81f 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fe4b 	bl	8004cf8 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 f808 	bl	800107c <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>

08001086 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001090:	ed97 0a01 	vldr	s0, [r7, #4]
 8001094:	f006 f98c 	bl	80073b0 <atanf>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <_ZN13STM32HardwareC1Ev+0x1c>)
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	20000078 	.word	0x20000078

080010c8 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd2b 	bl	8000b30 <_ZN14BufferedSerial4initEv>
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd29 	bl	8000b46 <_ZN14BufferedSerial4readEv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fd4d 	bl	8000bb2 <_ZN14BufferedSerial5writeEPKhi>
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	f002 fcb2 	bl	8003a90 <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001136:	b480      	push	{r7}
 8001138:	b087      	sub	sp, #28
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	ed87 0a00 	vstr	s0, [r7]
 8001142:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8001144:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	15db      	asrs	r3, r3, #23
 800114a:	b21b      	sxth	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001156:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800115c:	2bff      	cmp	r3, #255	; 0xff
 800115e:	d103      	bne.n	8001168 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001160:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001164:	82fb      	strh	r3, [r7, #22]
 8001166:	e02a      	b.n	80011be <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001176:	b29b      	uxth	r3, r3
 8001178:	82fb      	strh	r3, [r7, #22]
 800117a:	e020      	b.n	80011be <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001182:	2300      	movs	r3, #0
 8001184:	82fb      	strh	r3, [r7, #22]
 8001186:	e01a      	b.n	80011be <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001188:	8afb      	ldrh	r3, [r7, #22]
 800118a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800118e:	b29b      	uxth	r3, r3
 8001190:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001198:	e008      	b.n	80011ac <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
          exp--;
 80011a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f1      	beq.n	800119a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80011bc:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	6079      	str	r1, [r7, #4]
 80011e6:	0152      	lsls	r2, r2, #5
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	08d9      	lsrs	r1, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	0ad9      	lsrs	r1, r3, #11
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	b2ca      	uxtb	r2, r1
 8001206:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001208:	8afb      	ldrh	r3, [r7, #22]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b2d9      	uxtb	r1, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	0cdb      	lsrs	r3, r3, #19
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1c58      	adds	r0, r3, #1
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	430a      	orrs	r2, r1
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001228:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800122c:	111b      	asrs	r3, r3, #4
 800122e:	b21b      	sxth	r3, r3
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	6079      	str	r1, [r7, #4]
 8001238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001240:	edd7 7a00 	vldr	s15, [r7]
 8001244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d508      	bpl.n	8001260 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3b01      	subs	r3, #1
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001260:	2308      	movs	r3, #8
  }
 8001262:	4618      	mov	r0, r3
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800126e:	b480      	push	{r7}
 8001270:	b087      	sub	sp, #28
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3303      	adds	r3, #3
 800127c:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	031b      	lsls	r3, r3, #12
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	051b      	lsls	r3, r3, #20
 80012b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	8afb      	ldrh	r3, [r7, #22]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80012ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d102      	bne.n	80012fe <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	82fb      	strh	r3, [r7, #22]
 80012fc:	e02c      	b.n	8001358 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 80012fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001302:	f240 427e 	movw	r2, #1150	; 0x47e
 8001306:	4293      	cmp	r3, r2
 8001308:	dd04      	ble.n	8001314 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 800130a:	23ff      	movs	r3, #255	; 0xff
 800130c:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	e021      	b.n	8001358 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 8001314:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001318:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800131c:	dd05      	ble.n	800132a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 800131e:	8afb      	ldrh	r3, [r7, #22]
 8001320:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001324:	b29b      	uxth	r3, r3
 8001326:	82fb      	strh	r3, [r7, #22]
 8001328:	e016      	b.n	8001358 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 800132a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132e:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8001332:	dc02      	bgt.n	800133a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 8001334:	2300      	movs	r3, #0
 8001336:	82fb      	strh	r3, [r7, #22]
 8001338:	e00e      	b.n	8001358 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001340:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8001342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001346:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 800134a:	3301      	adds	r3, #1
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800135e:	4293      	cmp	r3, r2
 8001360:	d002      	beq.n	8001368 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8001372:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001376:	05da      	lsls	r2, r3, #23
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	061b      	lsls	r3, r3, #24
 8001388:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]
    return 8;
 8001398:	2308      	movs	r3, #8
  }
 800139a:	4618      	mov	r0, r3
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN3ros3MsgC1Ev>:
class Msg
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	08007b44 	.word	0x08007b44

080013e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      data()
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffe8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffcf 	bl	80013a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08007b2c 	.word	0x08007b2c

08001418 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0a19      	lsrs	r1, r3, #8
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0e19      	lsrs	r1, r3, #24
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a19      	lsrs	r1, r3, #8
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0c19      	lsrs	r1, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3302      	adds	r3, #2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0e19      	lsrs	r1, r3, #24
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3303      	adds	r3, #3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3304      	adds	r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ba:	68fb      	ldr	r3, [r7, #12]
    }
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3302      	adds	r3, #2
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3303      	adds	r3, #3
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3302      	adds	r3, #2
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	440b      	add	r3, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3303      	adds	r3, #3
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3304      	adds	r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
     return offset;
 8001582:	68fb      	ldr	r3, [r7, #12]
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	08007898 	.word	0x08007898

080015ac <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	080078a8 	.word	0x080078a8

080015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fef8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015e8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ee:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015f4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    {
    }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08007b14 	.word	0x08007b14
 800160c:	080078cc 	.word	0x080078cc

08001610 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8899      	ldrh	r1, [r3, #4]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b299      	uxth	r1, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3302      	adds	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fdbc 	bl	80001c8 <strlen>
 8001650:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f852 	bl	8002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3304      	adds	r3, #4
 8001664:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	18d0      	adds	r0, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4619      	mov	r1, r3
 8001674:	f005 ffe6 	bl	8007644 <memcpy>
      offset += length_topic_name;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fd9f 	bl	80001c8 <strlen>
 800168a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f835 	bl	8002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	18d0      	adds	r0, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f005 ffc9 	bl	8007644 <memcpy>
      offset += length_message_type;
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fd82 	bl	80001c8 <strlen>
 80016c4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 f818 	bl	8002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	18d0      	adds	r0, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f005 ffac 	bl	8007644 <memcpy>
      offset += length_md5sum;
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c19      	lsrs	r1, r3, #16
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3302      	adds	r3, #2
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0e19      	lsrs	r1, r3, #24
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3303      	adds	r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	4413      	add	r3, r2
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
      return offset;
 800173c:	69fb      	ldr	r3, [r7, #28]
    }
 800173e:	4618      	mov	r0, r3
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	b21a      	sxth	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3301      	adds	r3, #1
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3302      	adds	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f000 ffd5 	bl	8002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3304      	adds	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e00b      	b.n	80017bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	441a      	add	r2, r3
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	3b01      	subs	r3, #1
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	440b      	add	r3, r1
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	3301      	adds	r3, #1
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4413      	add	r3, r2
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3ed      	bcc.n	80017a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3b01      	subs	r3, #1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	441a      	add	r2, r3
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 ffa2 	bl	8002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3304      	adds	r3, #4
 8001802:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	e00b      	b.n	8001822 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	441a      	add	r2, r3
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	3b01      	subs	r3, #1
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	440b      	add	r3, r1
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	3301      	adds	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3ed      	bcc.n	800180a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	3b01      	subs	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f000 ff6f 	bl	8002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3304      	adds	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e00b      	b.n	8001888 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	441a      	add	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b01      	subs	r3, #1
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	440b      	add	r3, r1
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3ed      	bcc.n	8001870 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	3b01      	subs	r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	441a      	add	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440a      	add	r2, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3301      	adds	r3, #1
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	440b      	add	r3, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	3302      	adds	r3, #2
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3303      	adds	r3, #3
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	3304      	adds	r3, #4
 800190a:	61bb      	str	r3, [r7, #24]
     return offset;
 800190c:	69bb      	ldr	r3, [r7, #24]
    }
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	080078d0 	.word	0x080078d0

08001934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	080078ec 	.word	0x080078ec

08001950 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd34 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
      level(0),
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	711a      	strb	r2, [r3, #4]
      msg("")
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001970:	609a      	str	r2, [r3, #8]
    {
    }
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08007afc 	.word	0x08007afc
 8001980:	080078cc 	.word	0x080078cc

08001984 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	7912      	ldrb	r2, [r2, #4]
 800199c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc0d 	bl	80001c8 <strlen>
 80019ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fea3 	bl	8002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	18d0      	adds	r0, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f005 fe37 	bl	8007644 <memcpy>
      offset += length_msg;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019de:	68fb      	ldr	r3, [r7, #12]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fe94 	bl	8002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e00b      	b.n	8001a3e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	440b      	add	r3, r1
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3ed      	bcc.n	8001a26 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b01      	subs	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
     return offset;
 8001a6e:	693b      	ldr	r3, [r7, #16]
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	08007910 	.word	0x08007910

08001a94 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	08007924 	.word	0x08007924

08001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc84 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08007ae4 	.word	0x08007ae4

08001b0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	0a19      	lsrs	r1, r3, #8
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0c19      	lsrs	r1, r3, #16
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3302      	adds	r3, #2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0e19      	lsrs	r1, r3, #24
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3303      	adds	r3, #3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3304      	adds	r3, #4
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	e02a      	b.n	8001bc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	0a19      	lsrs	r1, r3, #8
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	0c19      	lsrs	r1, r3, #16
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b2ca      	uxtb	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	0e19      	lsrs	r1, r3, #24
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3303      	adds	r3, #3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3cf      	bcc.n	8001b6a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	0a19      	lsrs	r1, r3, #8
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	0c19      	lsrs	r1, r3, #16
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	0e19      	lsrs	r1, r3, #24
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	3303      	adds	r3, #3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3304      	adds	r3, #4
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	e02a      	b.n	8001c70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	0a19      	lsrs	r1, r3, #8
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2ca      	uxtb	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	0c19      	lsrs	r1, r3, #16
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	0e19      	lsrs	r1, r3, #24
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3303      	adds	r3, #3
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	3304      	adds	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3cf      	bcc.n	8001c1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69d9      	ldr	r1, [r3, #28]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	0a19      	lsrs	r1, r3, #8
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2ca      	uxtb	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	0c19      	lsrs	r1, r3, #16
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	0e19      	lsrs	r1, r3, #24
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3303      	adds	r3, #3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e027      	b.n	8001d1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa76 	bl	80001c8 <strlen>
 8001cdc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	6979      	ldr	r1, [r7, #20]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd0c 	bl	8002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	3304      	adds	r3, #4
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	18d0      	adds	r0, r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4619      	mov	r1, r3
 8001d08:	f005 fc9c 	bl	8007644 <memcpy>
      offset += length_stringsi;
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3d2      	bcc.n	8001cca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d26:	4618      	mov	r0, r3
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b08e      	sub	sp, #56	; 0x38
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	3301      	adds	r3, #1
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	041b      	lsls	r3, r3, #16
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	3303      	adds	r3, #3
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	6a3a      	ldr	r2, [r7, #32]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	3304      	adds	r3, #4
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d90a      	bls.n	8001da2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f005 fbe8 	bl	800756c <realloc>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dac:	e035      	b.n	8001e1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	440a      	add	r2, r1
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	440b      	add	r3, r1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	440b      	add	r3, r1
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	3303      	adds	r3, #3
 8001dea:	6839      	ldr	r1, [r7, #0]
 8001dec:	440b      	add	r3, r1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	3304      	adds	r3, #4
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	3301      	adds	r3, #1
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3c4      	bcc.n	8001dae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	3304      	adds	r3, #4
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d90a      	bls.n	8001e8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f005 fb74 	bl	800756c <realloc>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e94:	e035      	b.n	8001f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	440a      	add	r2, r1
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	3301      	adds	r3, #1
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	440b      	add	r3, r1
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	3214      	adds	r2, #20
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	3301      	adds	r3, #1
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3c4      	bcc.n	8001e96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	3304      	adds	r3, #4
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d90a      	bls.n	8001f72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f005 fb00 	bl	800756c <realloc>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7c:	e03e      	b.n	8001ffc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	441a      	add	r2, r3
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fbd9 	bl	8002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	3304      	adds	r3, #4
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e00b      	b.n	8001fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	441a      	add	r2, r3
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	440b      	add	r3, r1
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3ed      	bcc.n	8001f9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	3220      	adds	r2, #32
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002002:	429a      	cmp	r2, r3
 8002004:	d3bb      	bcc.n	8001f7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002008:	4618      	mov	r0, r3
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	08007a38 	.word	0x08007a38

0800202c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	08007948 	.word	0x08007948

08002048 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
  }
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f9ac 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
      x(0),
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
      y(0),
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
      z(0)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    {
    }
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	08007aa0 	.word	0x08007aa0

0800209c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	441a      	add	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7ff f83b 	bl	8001136 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	4610      	mov	r0, r2
 80020da:	f7ff f82c 	bl	8001136 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	441a      	add	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	4610      	mov	r0, r2
 80020f8:	f7ff f81d 	bl	8001136 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
      return offset;
 8002104:	68fb      	ldr	r3, [r7, #12]
    }
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f7ff f8a0 	bl	800126e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	441a      	add	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3308      	adds	r3, #8
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7ff f893 	bl	800126e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	441a      	add	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	330c      	adds	r3, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7ff f886 	bl	800126e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
     return offset;
 800216a:	68fb      	ldr	r3, [r7, #12]
    }
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	0800796c 	.word	0x0800796c

08002190 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	08007984 	.word	0x08007984

080021ac <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f906 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
      linear(),
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff4a 	bl	8002060 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3314      	adds	r3, #20
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff45 	bl	8002060 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	08007a88 	.word	0x08007a88

080021e4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1d18      	adds	r0, r3, #4
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff ff4d 	bl	800209c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0014 	add.w	r0, r3, #20
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7ff ff40 	bl	800209c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
      return offset;
 8002224:	68fb      	ldr	r3, [r7, #12]
    }
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1d18      	adds	r0, r3, #4
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff ff61 	bl	800210e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 0014 	add.w	r0, r3, #20
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7ff ff54 	bl	800210e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
     return offset;
 800226e:	68fb      	ldr	r3, [r7, #12]
    }
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	080079a8 	.word	0x080079a8

08002294 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	080079bc 	.word	0x080079bc

080022b0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	08007ad0 	.word	0x08007ad0

080022d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ffe8 	bl	80022b0 <_ZN3ros15NodeHandleBase_C1Ev>
 80022e0:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fedc 	bl	80010a8 <_ZN13STM32HardwareC1Ev>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3318      	adds	r3, #24
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f005 f961 	bl	80075da <memset>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f005 f958 	bl	80075da <memset>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f005 f950 	bl	80075da <memset>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8002340:	2264      	movs	r2, #100	; 0x64
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f005 f948 	bl	80075da <memset>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb85 	bl	8001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	08007a74 	.word	0x08007a74
 80023b4:	00000000 	.word	0x00000000

080023b8 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
float vels[4]; // [FR, FL, RL, RR]
int16_t angs[4];

void cmd_vel_cb(const geometry_msgs::Twist& msg)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

	float x = msg.linear.x;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	61bb      	str	r3, [r7, #24]
	float y = msg.linear.y;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	617b      	str	r3, [r7, #20]
	float a = sqrtf(x*x + y*y);
 80023cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80023d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	f004 ffc6 	bl	8007374 <sqrtf>
 80023e8:	ed87 0a04 	vstr	s0, [r7, #16]
	int16_t sign;
	if (a == 0)
 80023ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	d115      	bne.n	8002426 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x6e>
	{
		for(int i = 0; i < 4; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	e00e      	b.n	800241e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x66>
		{
			vels[i] = 0;
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x178>)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
			angs[i] = 0;
 800240e:	4a49      	ldr	r2, [pc, #292]	; (8002534 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x17c>)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	2100      	movs	r1, #0
 8002414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	3301      	adds	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	2b03      	cmp	r3, #3
 8002422:	dded      	ble.n	8002400 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x48>
 8002424:	e076      	b.n	8002514 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x15c>
		}
	}

	else if ((x == 0))
 8002426:	edd7 7a06 	vldr	s15, [r7, #24]
 800242a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d128      	bne.n	8002486 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xce>
	{

		sign = y > 0 ? 1 : -1;
 8002434:	edd7 7a05 	vldr	s15, [r7, #20]
 8002438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd01      	ble.n	8002446 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x8e>
 8002442:	2301      	movs	r3, #1
 8002444:	e001      	b.n	800244a <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x92>
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	81fb      	strh	r3, [r7, #14]
		for(int i = 0; i < 4; i++)
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	e015      	b.n	800247e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xc6>
		{
			vels[i] = a;
 8002452:	4a37      	ldr	r2, [pc, #220]	; (8002530 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x178>)
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	601a      	str	r2, [r3, #0]
			angs[i] = sign * 250;
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	461a      	mov	r2, r3
 8002462:	0152      	lsls	r2, r2, #5
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4413      	add	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	b219      	sxth	r1, r3
 8002470:	4a30      	ldr	r2, [pc, #192]	; (8002534 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x17c>)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	3301      	adds	r3, #1
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	2b03      	cmp	r3, #3
 8002482:	dde6      	ble.n	8002452 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x9a>
 8002484:	e046      	b.n	8002514 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x15c>
		}

	}
	else
	{
		sign = x > 0 ? 1 : -1;
 8002486:	edd7 7a06 	vldr	s15, [r7, #24]
 800248a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	dd01      	ble.n	8002498 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xe0>
 8002494:	2301      	movs	r3, #1
 8002496:	e001      	b.n	800249c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xe4>
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	81fb      	strh	r3, [r7, #14]
		int ang = (159.16) * atan(y/x);
 800249e:	ed97 7a05 	vldr	s14, [r7, #20]
 80024a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024aa:	eeb0 0a66 	vmov.f32	s0, s13
 80024ae:	f7fe fdea 	bl	8001086 <_ZSt4atanf>
 80024b2:	ee10 3a10 	vmov	r3, s0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f91c 	bl	80006f4 <__aeabi_f2d>
 80024bc:	a31a      	add	r3, pc, #104	; (adr r3, 8002528 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x170>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fd fe89 	bl	80001d8 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe f969 	bl	80007a4 <__aeabi_d2iz>
 80024d2:	4603      	mov	r3, r0
 80024d4:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < 4; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e018      	b.n	800250e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x156>
		{
			vels[i] = sign * a;
 80024dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x178>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	edc3 7a00 	vstr	s15, [r3]
			angs[i] = ang;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	b219      	sxth	r1, r3
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x17c>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b03      	cmp	r3, #3
 8002512:	dde3      	ble.n	80024dc <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x124>
		}
	}
	nh.loginfo("Message Received");
 8002514:	4908      	ldr	r1, [pc, #32]	; (8002538 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x180>)
 8002516:	4809      	ldr	r0, [pc, #36]	; (800253c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x184>)
 8002518:	f000 f939 	bl	800278e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	f3af 8000 	nop.w
 8002528:	b851eb85 	.word	0xb851eb85
 800252c:	4063e51e 	.word	0x4063e51e
 8002530:	200009b8 	.word	0x200009b8
 8002534:	200009c8 	.word	0x200009c8
 8002538:	080079e0 	.word	0x080079e0
 800253c:	20000488 	.word	0x20000488

08002540 <setup>:
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );



void setup()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	nh.initNode();
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <setup+0x18>)
 8002546:	f000 f965 	bl	8002814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 800254a:	4904      	ldr	r1, [pc, #16]	; (800255c <setup+0x1c>)
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <setup+0x18>)
 800254e:	f000 f97e 	bl	800284e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000488 	.word	0x20000488
 800255c:	200009d0 	.word	0x200009d0

08002560 <loop>:


void loop()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002564:	4862      	ldr	r0, [pc, #392]	; (80026f0 <loop+0x190>)
 8002566:	f000 f99f 	bl	80028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//FR
	TIM1->CCR1 = vels[0] >= 0 ? vels[0] * 100  : 0;
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <loop+0x194>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	db0b      	blt.n	8002592 <loop+0x32>
 800257a:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <loop+0x194>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80026f8 <loop+0x198>
 8002584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 2a90 	vmov	r2, s15
 8002590:	e000      	b.n	8002594 <loop+0x34>
 8002592:	2200      	movs	r2, #0
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <loop+0x19c>)
 8002596:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = vels[0] < 0 ? -vels[0] * 100  : 0;
 8002598:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <loop+0x194>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d50d      	bpl.n	80025c4 <loop+0x64>
 80025a8:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <loop+0x194>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	eef1 7a67 	vneg.f32	s15, s15
 80025b2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80026f8 <loop+0x198>
 80025b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025be:	ee17 2a90 	vmov	r2, s15
 80025c2:	e000      	b.n	80025c6 <loop+0x66>
 80025c4:	2200      	movs	r2, #0
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <loop+0x19c>)
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
	//FL
	TIM1->CCR3 = vels[1] >= 0 ? vels[1] * 100  : 0;
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <loop+0x194>)
 80025cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	db0b      	blt.n	80025f2 <loop+0x92>
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <loop+0x194>)
 80025dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80026f8 <loop+0x198>
 80025e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 2a90 	vmov	r2, s15
 80025f0:	e000      	b.n	80025f4 <loop+0x94>
 80025f2:	2200      	movs	r2, #0
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <loop+0x19c>)
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = vels[1] < 0 ? -vels[0] * 100  : 0;
 80025f8:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <loop+0x194>)
 80025fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80025fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d50d      	bpl.n	8002624 <loop+0xc4>
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <loop+0x194>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eef1 7a67 	vneg.f32	s15, s15
 8002612:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80026f8 <loop+0x198>
 8002616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800261e:	ee17 2a90 	vmov	r2, s15
 8002622:	e000      	b.n	8002626 <loop+0xc6>
 8002624:	2200      	movs	r2, #0
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <loop+0x19c>)
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
	//RL
	TIM3->CCR1 = vels[2] >= 0 ? vels[2] * 100  : 0;
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <loop+0x194>)
 800262c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	db0b      	blt.n	8002652 <loop+0xf2>
 800263a:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <loop+0x194>)
 800263c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002640:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80026f8 <loop+0x198>
 8002644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800264c:	ee17 2a90 	vmov	r2, s15
 8002650:	e000      	b.n	8002654 <loop+0xf4>
 8002652:	2200      	movs	r2, #0
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <loop+0x1a0>)
 8002656:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = vels[2] < 0 ? -vels[0] * 100  : 0;
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <loop+0x194>)
 800265a:	edd3 7a02 	vldr	s15, [r3, #8]
 800265e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	d50d      	bpl.n	8002684 <loop+0x124>
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <loop+0x194>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	eef1 7a67 	vneg.f32	s15, s15
 8002672:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026f8 <loop+0x198>
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267e:	ee17 2a90 	vmov	r2, s15
 8002682:	e000      	b.n	8002686 <loop+0x126>
 8002684:	2200      	movs	r2, #0
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <loop+0x1a0>)
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
	//RR
	TIM3->CCR3 = vels[3] >= 0 ? vels[3] * 100  : 0;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <loop+0x194>)
 800268c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	db0b      	blt.n	80026b2 <loop+0x152>
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <loop+0x194>)
 800269c:	edd3 7a03 	vldr	s15, [r3, #12]
 80026a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80026f8 <loop+0x198>
 80026a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ac:	ee17 2a90 	vmov	r2, s15
 80026b0:	e000      	b.n	80026b4 <loop+0x154>
 80026b2:	2200      	movs	r2, #0
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <loop+0x1a0>)
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = vels[3] < 0 ? -vels[0] * 100  : 0;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <loop+0x194>)
 80026ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80026be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	d50d      	bpl.n	80026e4 <loop+0x184>
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <loop+0x194>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eef1 7a67 	vneg.f32	s15, s15
 80026d2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80026f8 <loop+0x198>
 80026d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026de:	ee17 2a90 	vmov	r2, s15
 80026e2:	e000      	b.n	80026e6 <loop+0x186>
 80026e4:	2200      	movs	r2, #0
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <loop+0x1a0>)
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000488 	.word	0x20000488
 80026f4:	200009b8 	.word	0x200009b8
 80026f8:	42c80000 	.word	0x42c80000
 80026fc:	40010000 	.word	0x40010000
 8002700:	40000400 	.word	0x40000400

08002704 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e00c      	b.n	800272e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	fa22 f103 	lsr.w	r1, r2, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d9ef      	bls.n	8002714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e010      	b.n	800277a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	440a      	add	r2, r1
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	4611      	mov	r1, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	00d2      	lsls	r2, r2, #3
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d9eb      	bls.n	8002758 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fa56 	bl	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	08007ab8 	.word	0x08007ab8

080027cc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ffe5 	bl	80027ac <_ZN3ros11Subscriber_C1Ev>
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	330c      	adds	r3, #12
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fcdd 	bl	80021ac <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
  };
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08007a5c 	.word	0x08007a5c

08002814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fc51 	bl	80010c8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e01a      	b.n	8002894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
      if (subscribers[i] == 0) // empty slot
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
        subscribers[i] = &s;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	605a      	str	r2, [r3, #4]
        return true;
 800288a:	2301      	movs	r3, #1
 800288c:	e006      	b.n	800289c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b18      	cmp	r3, #24
 8002898:	dde1      	ble.n	800285e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
    return false;
 800289a:	2300      	movs	r3, #0
  }
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fc33 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 80028ba:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d903      	bls.n	80028d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d903      	bls.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fc0d 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	bf8c      	ite	hi
 8002914:	2301      	movhi	r3, #1
 8002916:	2300      	movls	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800291e:	f06f 0301 	mvn.w	r3, #1
 8002922:	e190      	b.n	8002c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fbda 	bl	80010e2 <_ZN13STM32Hardware4readEv>
 800292e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f2c0 8170 	blt.w	8002c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800294e:	2b07      	cmp	r3, #7
 8002950:	d11d      	bne.n	800298e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	b2d1      	uxtb	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	460a      	mov	r2, r1
 800296a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1b7      	bne.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2208      	movs	r2, #8
 8002988:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800298c:	e7b2      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d128      	bne.n	80029ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d10d      	bne.n	80029ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f103 0214 	add.w	r2, r3, #20
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80029b8:	e79c      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fbae 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bf8c      	ite	hi
 80029d2:	2301      	movhi	r3, #1
 80029d4:	2300      	movls	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d08b      	beq.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 80029e4:	f06f 0301 	mvn.w	r3, #1
 80029e8:	e12d      	b.n	8002c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d118      	bne.n	8002a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2bfe      	cmp	r3, #254	; 0xfe
 80029f8:	d107      	bne.n	8002a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002a08:	e774      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f af6b 	bne.w	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f931 	bl	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002a24:	e766      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d113      	bne.n	8002a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002a56:	e74d      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d110      	bne.n	8002a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002a82:	e737      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d116      	bne.n	8002abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002a94:	425a      	negs	r2, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	bf58      	it	pl
 8002a9c:	4253      	negpl	r3, r2
 8002a9e:	2bff      	cmp	r3, #255	; 0xff
 8002aa0:	d107      	bne.n	8002ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002ab0:	e720      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002aba:	e71b      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10f      	bne.n	8002ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002ae4:	e706      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d117      	bne.n	8002b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	441a      	add	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2207      	movs	r2, #7
 8002b06:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f aeef 	bne.w	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002b1e:	e6e9      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	f47f aee4 	bne.w	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002b3a:	425a      	negs	r2, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	bf58      	it	pl
 8002b42:	4253      	negpl	r3, r2
 8002b44:	2bff      	cmp	r3, #255	; 0xff
 8002b46:	f47f aed5 	bne.w	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d110      	bne.n	8002b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f896 	bl	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8b0 	bl	8002cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
 8002b74:	e067      	b.n	8002c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b7c:	2b0a      	cmp	r3, #10
 8002b7e:	d106      	bne.n	8002b8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3318      	adds	r3, #24
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f97a 	bl	8002e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002b8c:	e6b2      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d10d      	bne.n	8002bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7ff f8c2 	bl	8001d2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002bb2:	e69f      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002bba:	2b0b      	cmp	r3, #11
 8002bbc:	d104      	bne.n	8002bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002bc6:	e695      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002bce:	3b64      	subs	r3, #100	; 0x64
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f43f ae89 	beq.w	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002be8:	3b64      	subs	r3, #100	; 0x64
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	6858      	ldr	r0, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002bfc:	3b64      	subs	r3, #100	; 0x64
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	3218      	adds	r2, #24
 8002c12:	4611      	mov	r1, r2
 8002c14:	4798      	blx	r3
    while (true)
 8002c16:	e66d      	b.n	80028f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002c18:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00f      	beq.n	8002c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d906      	bls.n	8002c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f825 	bl	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8002c44:	2300      	movs	r3, #0
  }
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	460b      	mov	r3, r1
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fe75 	bl	8001950 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f107 0214 	add.w	r2, r7, #20
 8002c78:	2107      	movs	r1, #7
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	4798      	blx	r3
  }
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fba8 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f107 020c 	add.w	r2, r7, #12
 8002ca2:	210a      	movs	r1, #10
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
    rt_time = hardware_.time();
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe fa37 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
  }
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fc7b 	bl	80015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	e05a      	b.n	8002d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
      if (publishers[i] != 0) // non-empty slot
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04f      	beq.n	8002d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
        ti.topic_id = publishers[i]->id_;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4798      	blx	r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d46:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4608      	mov	r0, r1
 8002d58:	4798      	blx	r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d62:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f966 	bl	8002048 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	461a      	mov	r2, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	2b18      	cmp	r3, #24
 8002d92:	dda1      	ble.n	8002cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	e067      	b.n	8002e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
      if (subscribers[i] != 0) // non-empty slot
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
        ti.topic_id = subscribers[i]->id_;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4798      	blx	r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4608      	mov	r0, r1
 8002e20:	4798      	blx	r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e2a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681c      	ldr	r4, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4798      	blx	r3
 8002e58:	4601      	mov	r1, r0
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b18      	cmp	r3, #24
 8002e6e:	dd94      	ble.n	8002d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    configured_ = true;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8002e78:	bf00      	nop
 8002e7a:	372c      	adds	r7, #44	; 0x2c
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}

08002e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe faaa 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe f941 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fb0a 	bl	80014c8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4914      	ldr	r1, [pc, #80]	; (8002f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002eba:	fba1 1303 	umull	r1, r3, r1, r3
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002eca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed4:	fb00 f303 	mul.w	r3, r0, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8a5 	bl	800303c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f912 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	10624dd3 	.word	0x10624dd3
 8002f10:	000f4240 	.word	0x000f4240

08002f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b63      	cmp	r3, #99	; 0x63
 8002f24:	dd09      	ble.n	8002f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e079      	b.n	800302e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    int l = msg->serialize(message_out + 7);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8002f46:	3207      	adds	r2, #7
 8002f48:	4611      	mov	r1, r2
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	22fe      	movs	r2, #254	; 0xfe
 8002f5c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002f86:	4413      	add	r3, r2
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	121b      	asrs	r3, r3, #8
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
    int chk = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e00c      	b.n	8002fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dded      	ble.n	8002fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3307      	adds	r3, #7
 8002fe0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	425a      	negs	r2, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	bf58      	it	pl
 8002fec:	4253      	negpl	r3, r2
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	6179      	str	r1, [r7, #20]
 8002ff6:	43d2      	mvns	r2, r2
 8002ff8:	b2d1      	uxtb	r1, r2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	460a      	mov	r2, r1
 8003000:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    if (l <= OUTPUT_SIZE)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300a:	dc0a      	bgt.n	8003022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      hardware_.write(message_out, l);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1d18      	adds	r0, r3, #4
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4619      	mov	r1, r3
 800301a:	f7fe f870 	bl	80010fe <_ZN13STM32Hardware5writeEPhi>
      return l;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	e005      	b.n	800302e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
      logerror("Message from device dropped: message larger than buffer.");
 8003022:	4905      	ldr	r1, [pc, #20]	; (8003038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f847 	bl	80030b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	080079f4 	.word	0x080079f4

0800303c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe f868 	bl	8001120 <_ZN13STM32Hardware4timeEv>
 8003050:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4914      	ldr	r1, [pc, #80]	; (80030ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 800305a:	fba1 1303 	umull	r1, r3, r1, r3
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8003070:	fba3 0302 	umull	r0, r3, r3, r2
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	1aca      	subs	r2, r1, r3
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800308a:	4413      	add	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 020c 	add.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3310      	adds	r3, #16
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 fb59 	bl	8003754 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	10624dd3 	.word	0x10624dd3
 80030b0:	000f4240 	.word	0x000f4240
 80030b4:	3b9aca00 	.word	0x3b9aca00

080030b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	2103      	movs	r1, #3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fdc1 	bl	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_Z41__static_initialization_and_destruction_0ii>:
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10d      	bne.n	8003100 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d108      	bne.n	8003100 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 80030ee:	4806      	ldr	r0, [pc, #24]	; (8003108 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80030f0:	f7ff f8ee 	bl	80022d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 80030f4:	2301      	movs	r3, #1
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80030f8:	4905      	ldr	r1, [pc, #20]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80030fa:	4806      	ldr	r0, [pc, #24]	; (8003114 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80030fc:	f7ff fb66 	bl	80027cc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000488 	.word	0x20000488
 800310c:	080023b9 	.word	0x080023b9
 8003110:	08007a30 	.word	0x08007a30
 8003114:	200009d0 	.word	0x200009d0

08003118 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	330c      	adds	r3, #12
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f880 	bl	800222e <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	320c      	adds	r2, #12
 8003136:	4610      	mov	r0, r2
 8003138:	4798      	blx	r3
  }
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	330c      	adds	r3, #12
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f886 	bl	8002278 <_ZN13geometry_msgs5Twist7getTypeEv>
 800316c:	4603      	mov	r3, r0
  }
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	330c      	adds	r3, #12
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f886 	bl	8002294 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003188:	4603      	mov	r3, r0
  }
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    return configured_;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_GLOBAL__sub_I_nh>:
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7ff ff8d 	bl	80030d4 <_Z41__static_initialization_and_destruction_0ii>
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_MspInit+0x4c>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <HAL_MspInit+0x4c>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_MspInit+0x4c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_MspInit+0x4c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <HAL_MspInit+0x4c>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_MspInit+0x4c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031fa:	2007      	movs	r0, #7
 80031fc:	f000 fd24 	bl	8003c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800

0800320c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <NMI_Handler+0x4>

08003212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <HardFault_Handler+0x4>

08003218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <MemManage_Handler+0x4>

0800321e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003222:	e7fe      	b.n	8003222 <BusFault_Handler+0x4>

08003224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <UsageFault_Handler+0x4>

0800322a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003258:	f000 fc06 	bl	8003a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <DMA1_Stream5_IRQHandler+0x10>)
 8003266:	f000 fec9 	bl	8003ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000b40 	.word	0x20000b40

08003274 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <DMA1_Stream6_IRQHandler+0x10>)
 800327a:	f000 febf 	bl	8003ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000ae0 	.word	0x20000ae0

08003288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <USART2_IRQHandler+0x10>)
 800328e:	f002 ff91 	bl	80061b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000a9c 	.word	0x20000a9c

0800329c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <_sbrk+0x5c>)
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <_sbrk+0x60>)
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <_sbrk+0x64>)
 80032ba:	4a12      	ldr	r2, [pc, #72]	; (8003304 <_sbrk+0x68>)
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <_sbrk+0x64>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d207      	bcs.n	80032dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032cc:	f004 f98e 	bl	80075ec <__errno>
 80032d0:	4603      	mov	r3, r0
 80032d2:	220c      	movs	r2, #12
 80032d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	e009      	b.n	80032f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <_sbrk+0x64>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	4a05      	ldr	r2, [pc, #20]	; (8003300 <_sbrk+0x64>)
 80032ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20020000 	.word	0x20020000
 80032fc:	00000400 	.word	0x00000400
 8003300:	20000a08 	.word	0x20000a08
 8003304:	20000cf0 	.word	0x20000cf0

08003308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SystemInit+0x20>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <SystemInit+0x20>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b096      	sub	sp, #88	; 0x58
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800334a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	615a      	str	r2, [r3, #20]
 800335c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	2220      	movs	r2, #32
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f004 f938 	bl	80075da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800336a:	4b50      	ldr	r3, [pc, #320]	; (80034ac <MX_TIM1_Init+0x180>)
 800336c:	4a50      	ldr	r2, [pc, #320]	; (80034b0 <MX_TIM1_Init+0x184>)
 800336e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003370:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <MX_TIM1_Init+0x180>)
 8003372:	2200      	movs	r2, #0
 8003374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <MX_TIM1_Init+0x180>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <MX_TIM1_Init+0x180>)
 800337e:	2264      	movs	r2, #100	; 0x64
 8003380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <MX_TIM1_Init+0x180>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003388:	4b48      	ldr	r3, [pc, #288]	; (80034ac <MX_TIM1_Init+0x180>)
 800338a:	2200      	movs	r2, #0
 800338c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <MX_TIM1_Init+0x180>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003394:	4845      	ldr	r0, [pc, #276]	; (80034ac <MX_TIM1_Init+0x180>)
 8003396:	f001 fecf 	bl	8005138 <HAL_TIM_Base_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80033a0:	f7fd fe6c 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033ae:	4619      	mov	r1, r3
 80033b0:	483e      	ldr	r0, [pc, #248]	; (80034ac <MX_TIM1_Init+0x180>)
 80033b2:	f002 f95d 	bl	8005670 <HAL_TIM_ConfigClockSource>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80033bc:	f7fd fe5e 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033c0:	483a      	ldr	r0, [pc, #232]	; (80034ac <MX_TIM1_Init+0x180>)
 80033c2:	f001 ff71 	bl	80052a8 <HAL_TIM_PWM_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80033cc:	f7fd fe56 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033dc:	4619      	mov	r1, r3
 80033de:	4833      	ldr	r0, [pc, #204]	; (80034ac <MX_TIM1_Init+0x180>)
 80033e0:	f002 fd1e 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80033ea:	f7fd fe47 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ee:	2360      	movs	r3, #96	; 0x60
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033fa:	2300      	movs	r3, #0
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	2200      	movs	r2, #0
 8003410:	4619      	mov	r1, r3
 8003412:	4826      	ldr	r0, [pc, #152]	; (80034ac <MX_TIM1_Init+0x180>)
 8003414:	f002 f86a 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800341e:	f7fd fe2d 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	2204      	movs	r2, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4820      	ldr	r0, [pc, #128]	; (80034ac <MX_TIM1_Init+0x180>)
 800342c:	f002 f85e 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003436:	f7fd fe21 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	2208      	movs	r2, #8
 8003440:	4619      	mov	r1, r3
 8003442:	481a      	ldr	r0, [pc, #104]	; (80034ac <MX_TIM1_Init+0x180>)
 8003444:	f002 f852 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800344e:	f7fd fe15 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003456:	220c      	movs	r2, #12
 8003458:	4619      	mov	r1, r3
 800345a:	4814      	ldr	r0, [pc, #80]	; (80034ac <MX_TIM1_Init+0x180>)
 800345c:	f002 f846 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003466:	f7fd fe09 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800347e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003482:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4807      	ldr	r0, [pc, #28]	; (80034ac <MX_TIM1_Init+0x180>)
 800348e:	f002 fd43 	bl	8005f18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003498:	f7fd fdf0 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800349c:	4803      	ldr	r0, [pc, #12]	; (80034ac <MX_TIM1_Init+0x180>)
 800349e:	f000 f8d7 	bl	8003650 <HAL_TIM_MspPostInit>

}
 80034a2:	bf00      	nop
 80034a4:	3758      	adds	r7, #88	; 0x58
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000a0c 	.word	0x20000a0c
 80034b0:	40010000 	.word	0x40010000

080034b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	f107 0320 	add.w	r3, r7, #32
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
 80034e0:	615a      	str	r2, [r3, #20]
 80034e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <MX_TIM3_Init+0x124>)
 80034e6:	4a3d      	ldr	r2, [pc, #244]	; (80035dc <MX_TIM3_Init+0x128>)
 80034e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <MX_TIM3_Init+0x124>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <MX_TIM3_Init+0x124>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <MX_TIM3_Init+0x124>)
 80034f8:	2264      	movs	r2, #100	; 0x64
 80034fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <MX_TIM3_Init+0x124>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003502:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <MX_TIM3_Init+0x124>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003508:	4833      	ldr	r0, [pc, #204]	; (80035d8 <MX_TIM3_Init+0x124>)
 800350a:	f001 fe15 	bl	8005138 <HAL_TIM_Base_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003514:	f7fd fdb2 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800351e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003522:	4619      	mov	r1, r3
 8003524:	482c      	ldr	r0, [pc, #176]	; (80035d8 <MX_TIM3_Init+0x124>)
 8003526:	f002 f8a3 	bl	8005670 <HAL_TIM_ConfigClockSource>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003530:	f7fd fda4 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003534:	4828      	ldr	r0, [pc, #160]	; (80035d8 <MX_TIM3_Init+0x124>)
 8003536:	f001 feb7 	bl	80052a8 <HAL_TIM_PWM_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003540:	f7fd fd9c 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800354c:	f107 0320 	add.w	r3, r7, #32
 8003550:	4619      	mov	r1, r3
 8003552:	4821      	ldr	r0, [pc, #132]	; (80035d8 <MX_TIM3_Init+0x124>)
 8003554:	f002 fc64 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800355e:	f7fd fd8d 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003562:	2360      	movs	r3, #96	; 0x60
 8003564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	4817      	ldr	r0, [pc, #92]	; (80035d8 <MX_TIM3_Init+0x124>)
 800357a:	f001 ffb7 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003584:	f7fd fd7a 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2204      	movs	r2, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4812      	ldr	r0, [pc, #72]	; (80035d8 <MX_TIM3_Init+0x124>)
 8003590:	f001 ffac 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800359a:	f7fd fd6f 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2208      	movs	r2, #8
 80035a2:	4619      	mov	r1, r3
 80035a4:	480c      	ldr	r0, [pc, #48]	; (80035d8 <MX_TIM3_Init+0x124>)
 80035a6:	f001 ffa1 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80035b0:	f7fd fd64 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	220c      	movs	r2, #12
 80035b8:	4619      	mov	r1, r3
 80035ba:	4807      	ldr	r0, [pc, #28]	; (80035d8 <MX_TIM3_Init+0x124>)
 80035bc:	f001 ff96 	bl	80054ec <HAL_TIM_PWM_ConfigChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80035c6:	f7fd fd59 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035ca:	4803      	ldr	r0, [pc, #12]	; (80035d8 <MX_TIM3_Init+0x124>)
 80035cc:	f000 f840 	bl	8003650 <HAL_TIM_MspPostInit>

}
 80035d0:	bf00      	nop
 80035d2:	3738      	adds	r7, #56	; 0x38
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000a54 	.word	0x20000a54
 80035dc:	40000400 	.word	0x40000400

080035e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_TIM_Base_MspInit+0x64>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6453      	str	r3, [r2, #68]	; 0x44
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800360e:	e012      	b.n	8003636 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_TIM_Base_MspInit+0x6c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10d      	bne.n	8003636 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_TIM_Base_MspInit+0x68>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40023800 	.word	0x40023800
 800364c:	40000400 	.word	0x40000400

08003650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a33      	ldr	r2, [pc, #204]	; (800373c <HAL_TIM_MspPostInit+0xec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d11f      	bne.n	80036b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a31      	ldr	r2, [pc, #196]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 800367c:	f043 0310 	orr.w	r3, r3, #16
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FRDrive1_Pin|FRDrive2_Pin|FLDrive1_Pin|FLDrive2_Pin;
 800368e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	4826      	ldr	r0, [pc, #152]	; (8003744 <HAL_TIM_MspPostInit+0xf4>)
 80036ac:	f000 ff10 	bl	80044d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036b0:	e040      	b.n	8003734 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	; (8003748 <HAL_TIM_MspPostInit+0xf8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13b      	bne.n	8003734 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6313      	str	r3, [r2, #48]	; 0x30
 80036cc:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_TIM_MspPostInit+0xf0>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RLDrive1_Pin|RLDrive2_Pin;
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003704:	2302      	movs	r3, #2
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	480f      	ldr	r0, [pc, #60]	; (800374c <HAL_TIM_MspPostInit+0xfc>)
 8003710:	f000 fede 	bl	80044d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RRDrive1_Pin|RRDrive2_Pin;
 8003714:	2303      	movs	r3, #3
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003720:	2300      	movs	r3, #0
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003724:	2302      	movs	r3, #2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4619      	mov	r1, r3
 800372e:	4808      	ldr	r0, [pc, #32]	; (8003750 <HAL_TIM_MspPostInit+0x100>)
 8003730:	f000 fece 	bl	80044d0 <HAL_GPIO_Init>
}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40010000 	.word	0x40010000
 8003740:	40023800 	.word	0x40023800
 8003744:	40021000 	.word	0x40021000
 8003748:	40000400 	.word	0x40000400
 800374c:	40020000 	.word	0x40020000
 8003750:	40020400 	.word	0x40020400

08003754 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	0a5a      	lsrs	r2, r3, #9
 8003764:	490f      	ldr	r1, [pc, #60]	; (80037a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003766:	fba1 1202 	umull	r1, r2, r1, r2
 800376a:	09d2      	lsrs	r2, r2, #7
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800376e:	fb01 f202 	mul.w	r2, r1, r2
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0a5b      	lsrs	r3, r3, #9
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	09db      	lsrs	r3, r3, #7
 8003784:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	00044b83 	.word	0x00044b83
 80037a8:	3b9aca00 	.word	0x3b9aca00

080037ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <MX_USART2_UART_Init+0x50>)
 80037b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037d2:	220c      	movs	r2, #12
 80037d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <MX_USART2_UART_Init+0x4c>)
 80037e4:	f002 fbea 	bl	8005fbc <HAL_UART_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037ee:	f7fd fc45 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000a9c 	.word	0x20000a9c
 80037fc:	40004400 	.word	0x40004400

08003800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_UART_MspInit+0x154>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f040 8093 	bne.w	800394a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <HAL_UART_MspInit+0x158>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	4a4a      	ldr	r2, [pc, #296]	; (8003958 <HAL_UART_MspInit+0x158>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003832:	6413      	str	r3, [r2, #64]	; 0x40
 8003834:	4b48      	ldr	r3, [pc, #288]	; (8003958 <HAL_UART_MspInit+0x158>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <HAL_UART_MspInit+0x158>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4a43      	ldr	r2, [pc, #268]	; (8003958 <HAL_UART_MspInit+0x158>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6313      	str	r3, [r2, #48]	; 0x30
 8003850:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_UART_MspInit+0x158>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800385c:	230c      	movs	r3, #12
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800386c:	2307      	movs	r3, #7
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	4839      	ldr	r0, [pc, #228]	; (800395c <HAL_UART_MspInit+0x15c>)
 8003878:	f000 fe2a 	bl	80044d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_UART_MspInit+0x160>)
 800387e:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_UART_MspInit+0x164>)
 8003880:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_UART_MspInit+0x160>)
 8003884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003888:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800388a:	4b35      	ldr	r3, [pc, #212]	; (8003960 <HAL_UART_MspInit+0x160>)
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003890:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_UART_MspInit+0x160>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003896:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_UART_MspInit+0x160>)
 8003898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800389e:	4b30      	ldr	r3, [pc, #192]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a4:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b8:	4b29      	ldr	r3, [pc, #164]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038be:	4828      	ldr	r0, [pc, #160]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038c0:	f000 fa04 	bl	8003ccc <HAL_DMA_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80038ca:	f7fd fbd7 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_UART_MspInit+0x160>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038dc:	4a23      	ldr	r2, [pc, #140]	; (800396c <HAL_UART_MspInit+0x16c>)
 80038de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80038e0:	4b21      	ldr	r3, [pc, #132]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_UART_MspInit+0x168>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_UART_MspInit+0x168>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_UART_MspInit+0x168>)
 800390a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_UART_MspInit+0x168>)
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_UART_MspInit+0x168>)
 800391a:	2200      	movs	r2, #0
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800391e:	4812      	ldr	r0, [pc, #72]	; (8003968 <HAL_UART_MspInit+0x168>)
 8003920:	f000 f9d4 	bl	8003ccc <HAL_DMA_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800392a:	f7fd fba7 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_UART_MspInit+0x168>)
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <HAL_UART_MspInit+0x168>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	2100      	movs	r1, #0
 800393e:	2026      	movs	r0, #38	; 0x26
 8003940:	f000 f98d 	bl	8003c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003944:	2026      	movs	r0, #38	; 0x26
 8003946:	f000 f9a6 	bl	8003c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800394a:	bf00      	nop
 800394c:	3728      	adds	r7, #40	; 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40004400 	.word	0x40004400
 8003958:	40023800 	.word	0x40023800
 800395c:	40020000 	.word	0x40020000
 8003960:	20000ae0 	.word	0x20000ae0
 8003964:	400260a0 	.word	0x400260a0
 8003968:	20000b40 	.word	0x20000b40
 800396c:	40026088 	.word	0x40026088

08003970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003976:	490e      	ldr	r1, [pc, #56]	; (80039b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800397c:	e002      	b.n	8003984 <LoopCopyDataInit>

0800397e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003982:	3304      	adds	r3, #4

08003984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003988:	d3f9      	bcc.n	800397e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800398c:	4c0b      	ldr	r4, [pc, #44]	; (80039bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003990:	e001      	b.n	8003996 <LoopFillZerobss>

08003992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003994:	3204      	adds	r2, #4

08003996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003998:	d3fb      	bcc.n	8003992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800399a:	f7ff fcb5 	bl	8003308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399e:	f003 fe2b 	bl	80075f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039a2:	f7fd fac1 	bl	8000f28 <main>
  bx  lr    
 80039a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80039b4:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 80039b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80039bc:	20000cec 	.word	0x20000cec

080039c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c0:	e7fe      	b.n	80039c0 <ADC_IRQHandler>
	...

080039c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_Init+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0d      	ldr	r2, [pc, #52]	; (8003a04 <HAL_Init+0x40>)
 80039ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_Init+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <HAL_Init+0x40>)
 80039da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_Init+0x40>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_Init+0x40>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ec:	2003      	movs	r0, #3
 80039ee:	f000 f92b 	bl	8003c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f000 f808 	bl	8003a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f8:	f7ff fbe0 	bl	80031bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023c00 	.word	0x40023c00

08003a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_InitTick+0x54>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_InitTick+0x58>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f943 	bl	8003cb2 <HAL_SYSTICK_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00e      	b.n	8003a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d80a      	bhi.n	8003a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	f000 f90b 	bl	8003c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <HAL_InitTick+0x5c>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000008 	.word	0x20000008
 8003a64:	20000004 	.word	0x20000004

08003a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x20>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_IncTick+0x24>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_IncTick+0x24>)
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000008 	.word	0x20000008
 8003a8c:	20000ba0 	.word	0x20000ba0

08003a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return uwTick;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_GetTick+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000ba0 	.word	0x20000ba0

08003aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	60d3      	str	r3, [r2, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <__NVIC_GetPriorityGrouping+0x18>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	f003 0307 	and.w	r3, r3, #7
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	db0b      	blt.n	8003b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4907      	ldr	r1, [pc, #28]	; (8003b44 <__NVIC_EnableIRQ+0x38>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000e100 	.word	0xe000e100

08003b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	db0a      	blt.n	8003b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	490c      	ldr	r1, [pc, #48]	; (8003b94 <__NVIC_SetPriority+0x4c>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	0112      	lsls	r2, r2, #4
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b70:	e00a      	b.n	8003b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4908      	ldr	r1, [pc, #32]	; (8003b98 <__NVIC_SetPriority+0x50>)
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	440b      	add	r3, r1
 8003b86:	761a      	strb	r2, [r3, #24]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000e100 	.word	0xe000e100
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f1c3 0307 	rsb	r3, r3, #7
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	bf28      	it	cs
 8003bba:	2304      	movcs	r3, #4
 8003bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d902      	bls.n	8003bcc <NVIC_EncodePriority+0x30>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3b03      	subs	r3, #3
 8003bca:	e000      	b.n	8003bce <NVIC_EncodePriority+0x32>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	401a      	ands	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be4:	f04f 31ff 	mov.w	r1, #4294967295
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43d9      	mvns	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	4313      	orrs	r3, r2
         );
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c14:	d301      	bcc.n	8003c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00f      	b.n	8003c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <SysTick_Config+0x40>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c22:	210f      	movs	r1, #15
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f7ff ff8e 	bl	8003b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <SysTick_Config+0x40>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <SysTick_Config+0x40>)
 8003c34:	2207      	movs	r2, #7
 8003c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	e000e010 	.word	0xe000e010

08003c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff29 	bl	8003aa8 <__NVIC_SetPriorityGrouping>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c70:	f7ff ff3e 	bl	8003af0 <__NVIC_GetPriorityGrouping>
 8003c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff8e 	bl	8003b9c <NVIC_EncodePriority>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff5d 	bl	8003b48 <__NVIC_SetPriority>
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff31 	bl	8003b0c <__NVIC_EnableIRQ>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffa2 	bl	8003c04 <SysTick_Config>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cd8:	f7ff feda 	bl	8003a90 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e099      	b.n	8003e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d08:	e00f      	b.n	8003d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d0a:	f7ff fec1 	bl	8003a90 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d908      	bls.n	8003d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2203      	movs	r2, #3
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e078      	b.n	8003e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e8      	bne.n	8003d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_DMA_Init+0x158>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d107      	bne.n	8003d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d117      	bne.n	8003dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb01 	bl	80043d8 <DMA_CheckFifoParam>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dea:	2301      	movs	r3, #1
 8003dec:	e016      	b.n	8003e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fab8 	bl	800436c <DMA_CalcBaseAndBitshift>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	223f      	movs	r2, #63	; 0x3f
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	f010803f 	.word	0xf010803f

08003e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Start_IT+0x26>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e040      	b.n	8003ed0 <HAL_DMA_Start_IT+0xa8>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d12f      	bne.n	8003ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fa4a 	bl	8004310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0216 	orr.w	r2, r2, #22
 8003e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e005      	b.n	8003ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee6:	f7ff fdd3 	bl	8003a90 <HAL_GetTick>
 8003eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d008      	beq.n	8003f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e052      	b.n	8003fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0216 	bic.w	r2, r2, #22
 8003f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_DMA_Abort+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f5a:	e013      	b.n	8003f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f5c:	f7ff fd98 	bl	8003a90 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d90c      	bls.n	8003f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2203      	movs	r2, #3
 8003f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e015      	b.n	8003fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e4      	bne.n	8003f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	223f      	movs	r2, #63	; 0x3f
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d004      	beq.n	8003fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00c      	b.n	8003ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004008:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_DMA_IRQHandler+0x248>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a8e      	ldr	r2, [pc, #568]	; (8004248 <HAL_DMA_IRQHandler+0x24c>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0a9b      	lsrs	r3, r3, #10
 8004014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	2208      	movs	r2, #8
 8004028:	409a      	lsls	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01a      	beq.n	8004068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	2208      	movs	r2, #8
 8004056:	409a      	lsls	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2201      	movs	r2, #1
 800408c:	409a      	lsls	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	2204      	movs	r2, #4
 80040a4:	409a      	lsls	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	2204      	movs	r2, #4
 80040c2:	409a      	lsls	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2210      	movs	r2, #16
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d043      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03c      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2210      	movs	r2, #16
 80040f8:	409a      	lsls	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d018      	beq.n	800413e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d024      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
 800412a:	e01f      	b.n	800416c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
 800413c:	e016      	b.n	800416c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0208 	bic.w	r2, r2, #8
 800415a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2220      	movs	r2, #32
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 808f 	beq.w	800429c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8087 	beq.w	800429c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2220      	movs	r2, #32
 8004194:	409a      	lsls	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d136      	bne.n	8004214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0216 	bic.w	r2, r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x1da>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	223f      	movs	r2, #63	; 0x3f
 80041ec:	409a      	lsls	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d07e      	beq.n	8004308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
        }
        return;
 8004212:	e079      	b.n	8004308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01d      	beq.n	800425e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2b00      	cmp	r3, #0
 8004236:	d031      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e02c      	b.n	800429c <HAL_DMA_IRQHandler+0x2a0>
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000
 8004248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
 800425c:	e01e      	b.n	800429c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d032      	beq.n	800430a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2205      	movs	r2, #5
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d307      	bcc.n	80042e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f2      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x2cc>
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e000      	b.n	800430a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004308:	bf00      	nop
    }
  }
}
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800432c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d108      	bne.n	8004350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800434e:	e007      	b.n	8004360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	3b10      	subs	r3, #16
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <DMA_CalcBaseAndBitshift+0x64>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d909      	bls.n	80043ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58
 80043ac:	e007      	b.n	80043be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	aaaaaaab 	.word	0xaaaaaaab
 80043d4:	08007b6c 	.word	0x08007b6c

080043d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11f      	bne.n	8004432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d856      	bhi.n	80044a6 <DMA_CheckFifoParam+0xce>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <DMA_CheckFifoParam+0x28>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004411 	.word	0x08004411
 8004404:	08004423 	.word	0x08004423
 8004408:	08004411 	.word	0x08004411
 800440c:	080044a7 	.word	0x080044a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d046      	beq.n	80044aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e043      	b.n	80044aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800442a:	d140      	bne.n	80044ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004430:	e03d      	b.n	80044ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	d121      	bne.n	8004480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d837      	bhi.n	80044b2 <DMA_CheckFifoParam+0xda>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <DMA_CheckFifoParam+0x70>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004459 	.word	0x08004459
 800444c:	0800445f 	.word	0x0800445f
 8004450:	08004459 	.word	0x08004459
 8004454:	08004471 	.word	0x08004471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      break;
 800445c:	e030      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d025      	beq.n	80044b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446e:	e022      	b.n	80044b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004478:	d11f      	bne.n	80044ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800447e:	e01c      	b.n	80044ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d903      	bls.n	800448e <DMA_CheckFifoParam+0xb6>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d003      	beq.n	8004494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800448c:	e018      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      break;
 8004492:	e015      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e00b      	b.n	80044be <DMA_CheckFifoParam+0xe6>
      break;
 80044a6:	bf00      	nop
 80044a8:	e00a      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e008      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
 80044b0:	e006      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044b2:	bf00      	nop
 80044b4:	e004      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044be:	bf00      	nop
    }
  } 
  
  return status; 
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e16b      	b.n	80047c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ec:	2201      	movs	r2, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	f040 815a 	bne.w	80047be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d005      	beq.n	8004522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800451e:	2b02      	cmp	r3, #2
 8004520:	d130      	bne.n	8004584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0201 	and.w	r2, r3, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d017      	beq.n	80045c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d123      	bne.n	8004614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	08da      	lsrs	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3208      	adds	r2, #8
 80045d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80b4 	beq.w	80047be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b60      	ldr	r3, [pc, #384]	; (80047dc <HAL_GPIO_Init+0x30c>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <HAL_GPIO_Init+0x30c>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004664:	6453      	str	r3, [r2, #68]	; 0x44
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_GPIO_Init+0x30c>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_GPIO_Init+0x310>)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_GPIO_Init+0x314>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02b      	beq.n	80046f6 <HAL_GPIO_Init+0x226>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a51      	ldr	r2, [pc, #324]	; (80047e8 <HAL_GPIO_Init+0x318>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d025      	beq.n	80046f2 <HAL_GPIO_Init+0x222>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a50      	ldr	r2, [pc, #320]	; (80047ec <HAL_GPIO_Init+0x31c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01f      	beq.n	80046ee <HAL_GPIO_Init+0x21e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4f      	ldr	r2, [pc, #316]	; (80047f0 <HAL_GPIO_Init+0x320>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d019      	beq.n	80046ea <HAL_GPIO_Init+0x21a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4e      	ldr	r2, [pc, #312]	; (80047f4 <HAL_GPIO_Init+0x324>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_GPIO_Init+0x216>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4d      	ldr	r2, [pc, #308]	; (80047f8 <HAL_GPIO_Init+0x328>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00d      	beq.n	80046e2 <HAL_GPIO_Init+0x212>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4c      	ldr	r2, [pc, #304]	; (80047fc <HAL_GPIO_Init+0x32c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <HAL_GPIO_Init+0x20e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4b      	ldr	r2, [pc, #300]	; (8004800 <HAL_GPIO_Init+0x330>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <HAL_GPIO_Init+0x20a>
 80046d6:	2307      	movs	r3, #7
 80046d8:	e00e      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046da:	2308      	movs	r3, #8
 80046dc:	e00c      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046de:	2306      	movs	r3, #6
 80046e0:	e00a      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e008      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e006      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e004      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046f6:	2300      	movs	r3, #0
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f002 0203 	and.w	r2, r2, #3
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	4093      	lsls	r3, r2
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004708:	4935      	ldr	r1, [pc, #212]	; (80047e0 <HAL_GPIO_Init+0x310>)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800473a:	4a32      	ldr	r2, [pc, #200]	; (8004804 <HAL_GPIO_Init+0x334>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004740:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_GPIO_Init+0x334>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_GPIO_Init+0x334>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	f67f ae90 	bls.w	80044ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40020000 	.word	0x40020000
 80047e8:	40020400 	.word	0x40020400
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020c00 	.word	0x40020c00
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40021400 	.word	0x40021400
 80047fc:	40021800 	.word	0x40021800
 8004800:	40021c00 	.word	0x40021c00
 8004804:	40013c00 	.word	0x40013c00

08004808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e267      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d075      	beq.n	8004912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00c      	beq.n	800484c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004832:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d112      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4b7e      	ldr	r3, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05b      	beq.n	8004910 <HAL_RCC_OscConfig+0x108>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d157      	bne.n	8004910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e242      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d106      	bne.n	800487c <HAL_RCC_OscConfig+0x74>
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e01d      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x98>
 8004886:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a6f      	ldr	r2, [pc, #444]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 80048a0:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a68      	ldr	r2, [pc, #416]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a65      	ldr	r2, [pc, #404]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d013      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7ff f8e6 	bl	8003a90 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c8:	f7ff f8e2 	bl	8003a90 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e207      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7ff f8d2 	bl	8003a90 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7ff f8ce 	bl	8003a90 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1f3      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0xe8>
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	2b08      	cmp	r3, #8
 8004934:	d11c      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e1c7      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4937      	ldr	r1, [pc, #220]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496e:	e03a      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004978:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7ff f887 	bl	8003a90 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004986:	f7ff f883 	bl	8003a90 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1a8      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4925      	ldr	r1, [pc, #148]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
 80049b8:	e015      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7ff f866 	bl	8003a90 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c8:	f7ff f862 	bl	8003a90 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e187      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d036      	beq.n	8004a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7ff f846 	bl	8003a90 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a08:	f7ff f842 	bl	8003a90 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e167      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x200>
 8004a26:	e01b      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7ff f82f 	bl	8003a90 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	e00e      	b.n	8004a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a36:	f7ff f82b 	bl	8003a90 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d907      	bls.n	8004a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e150      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	42470000 	.word	0x42470000
 8004a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a54:	4b88      	ldr	r3, [pc, #544]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ea      	bne.n	8004a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8097 	beq.w	8004b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	4b7d      	ldr	r3, [pc, #500]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	4a7c      	ldr	r2, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b77      	ldr	r3, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a73      	ldr	r2, [pc, #460]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fe ffeb 	bl	8003a90 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fe ffe7 	bl	8003a90 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e10c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2ea>
 8004ae4:	4b64      	ldr	r3, [pc, #400]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a63      	ldr	r2, [pc, #396]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	e01c      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x30c>
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6713      	str	r3, [r2, #112]	; 0x70
 8004b06:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004b14:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	4b55      	ldr	r3, [pc, #340]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b26:	f023 0304 	bic.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fe ffac 	bl	8003a90 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fe ffa8 	bl	8003a90 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0cb      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	4b49      	ldr	r3, [pc, #292]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ee      	beq.n	8004b3c <HAL_RCC_OscConfig+0x334>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b60:	f7fe ff96 	bl	8003a90 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b68:	f7fe ff92 	bl	8003a90 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0b5      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ee      	bne.n	8004b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a1 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d05c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d141      	bne.n	8004c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fe ff66 	bl	8003a90 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fe ff62 	bl	8003a90 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e087      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	491b      	ldr	r1, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fe ff3b 	bl	8003a90 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fe ff37 	bl	8003a90 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e05c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x416>
 8004c3c:	e054      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe ff24 	bl	8003a90 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe ff20 	bl	8003a90 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e045      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x444>
 8004c6a:	e03d      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e038      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d121      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d11a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d111      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90c      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0b8      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	494d      	ldr	r1, [pc, #308]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e067      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4934      	ldr	r1, [pc, #208]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fe fe52 	bl	8003a90 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fe fe4e 	bl	8003a90 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 020c 	and.w	r2, r3, #12
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1eb      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20c      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4916      	ldr	r1, [pc, #88]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7e:	f000 f821 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	5ccb      	ldrb	r3, [r1, r3]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fdb2 	bl	8003a08 <HAL_InitTick>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	08007b54 	.word	0x08007b54
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	b094      	sub	sp, #80	; 0x50
 8004eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004edc:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	f200 80e1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef6:	e0db      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004efc:	e0db      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efe:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f02:	e0d8      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d063      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	2200      	movs	r2, #0
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2e:	2300      	movs	r3, #0
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f48:	0150      	lsls	r0, r2, #5
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4621      	mov	r1, r4
 8004f50:	1a51      	subs	r1, r2, r1
 8004f52:	6139      	str	r1, [r7, #16]
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	018b      	lsls	r3, r1, #6
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f72:	4651      	mov	r1, sl
 8004f74:	018a      	lsls	r2, r1, #6
 8004f76:	4651      	mov	r1, sl
 8004f78:	ebb2 0801 	subs.w	r8, r2, r1
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f96:	4690      	mov	r8, r2
 8004f98:	4699      	mov	r9, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	eb18 0303 	adds.w	r3, r8, r3
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	eb49 0303 	adc.w	r3, r9, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	024b      	lsls	r3, r1, #9
 8004fba:	4621      	mov	r1, r4
 8004fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	024a      	lsls	r2, r1, #9
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fca:	2200      	movs	r2, #0
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd4:	f7fb fc0e 	bl	80007f4 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	4611      	mov	r1, r2
 8004fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	f04f 0000 	mov.w	r0, #0
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	0159      	lsls	r1, r3, #5
 800500a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500e:	0150      	lsls	r0, r2, #5
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4641      	mov	r1, r8
 8005016:	ebb2 0a01 	subs.w	sl, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800502c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005034:	ebb2 040a 	subs.w	r4, r2, sl
 8005038:	eb63 050b 	sbc.w	r5, r3, fp
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	00eb      	lsls	r3, r5, #3
 8005046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4643      	mov	r3, r8
 8005052:	18e3      	adds	r3, r4, r3
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	464b      	mov	r3, r9
 8005058:	eb45 0303 	adc.w	r3, r5, r3
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506a:	4629      	mov	r1, r5
 800506c:	028b      	lsls	r3, r1, #10
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005074:	4621      	mov	r1, r4
 8005076:	028a      	lsls	r2, r1, #10
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	2200      	movs	r2, #0
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	61fa      	str	r2, [r7, #28]
 8005084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005088:	f7fb fbb4 	bl	80007f4 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3750      	adds	r7, #80	; 0x50
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	007a1200 	.word	0x007a1200

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	08007b64 	.word	0x08007b64

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	08007b64 	.word	0x08007b64

08005138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e041      	b.n	80051ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fe fa3e 	bl	80035e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f000 fb42 	bl	8005800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d001      	beq.n	80051f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e046      	b.n	800527e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_TIM_Base_Start+0xb4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_Base_Start+0xb8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_Base_Start+0xbc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_Base_Start+0xc0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_Base_Start+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start+0xc8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start+0x70>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_TIM_Base_Start+0xcc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d010      	beq.n	800527c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	e007      	b.n	800527c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e041      	b.n	800533e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f839 	bl	8005346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 fa8a 	bl	8005800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_TIM_PWM_Start+0x24>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	e022      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d109      	bne.n	800539a <HAL_TIM_PWM_Start+0x3e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e015      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d109      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x58>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e008      	b.n	80053c6 <HAL_TIM_PWM_Start+0x6a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07c      	b.n	80054c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0x82>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	e013      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0x92>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ec:	e00b      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	e003      	b.n	8005406 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fce0 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2d      	ldr	r2, [pc, #180]	; (80054d0 <HAL_TIM_PWM_Start+0x174>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_PWM_Start+0xcc>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <HAL_TIM_PWM_Start+0x178>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_TIM_PWM_Start+0xd0>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_TIM_PWM_Start+0xd2>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_TIM_PWM_Start+0x174>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d01d      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_PWM_Start+0x17c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_TIM_PWM_Start+0x180>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIM_PWM_Start+0x184>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <HAL_TIM_PWM_Start+0x178>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIM_PWM_Start+0x188>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_PWM_Start+0x136>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_TIM_PWM_Start+0x18c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d111      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d010      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	e007      	b.n	80054c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005506:	2302      	movs	r3, #2
 8005508:	e0ae      	b.n	8005668 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	f200 809f 	bhi.w	8005658 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005555 	.word	0x08005555
 8005524:	08005659 	.word	0x08005659
 8005528:	08005659 	.word	0x08005659
 800552c:	08005659 	.word	0x08005659
 8005530:	08005595 	.word	0x08005595
 8005534:	08005659 	.word	0x08005659
 8005538:	08005659 	.word	0x08005659
 800553c:	08005659 	.word	0x08005659
 8005540:	080055d7 	.word	0x080055d7
 8005544:	08005659 	.word	0x08005659
 8005548:	08005659 	.word	0x08005659
 800554c:	08005659 	.word	0x08005659
 8005550:	08005617 	.word	0x08005617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f9f0 	bl	8005940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	619a      	str	r2, [r3, #24]
      break;
 8005592:	e064      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa40 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      break;
 80055d4:	e043      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa95 	bl	8005b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	61da      	str	r2, [r3, #28]
      break;
 8005614:	e023      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fae9 	bl	8005bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	61da      	str	r2, [r3, #28]
      break;
 8005656:	e002      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
      break;
 800565c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005666:	7dfb      	ldrb	r3, [r7, #23]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIM_ConfigClockSource+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e0b4      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x186>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d03e      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xd4>
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	f200 8087 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	f000 8086 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x172>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d87f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d01a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0xa6>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d87b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d050      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x11a>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d877      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d03c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0xfa>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d873      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d058      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x13a>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d86f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d064      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d86b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d060      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d867      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b10      	cmp	r3, #16
 8005712:	d05a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x15a>
 8005714:	e062      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f000 fb35 	bl	8005d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e04f      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f000 fb1e 	bl	8005d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005766:	609a      	str	r2, [r3, #8]
      break;
 8005768:	e03c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 fa92 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2150      	movs	r1, #80	; 0x50
 8005782:	4618      	mov	r0, r3
 8005784:	f000 faeb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005788:	e02c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 fab1 	bl	8005cfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2160      	movs	r1, #96	; 0x60
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fadb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057a8:	e01c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fa72 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 facb 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057c8:	e00c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f000 fac2 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 80057da:	e003      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a40      	ldr	r2, [pc, #256]	; (8005914 <TIM_Base_SetConfig+0x114>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581e:	d00f      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <TIM_Base_SetConfig+0x118>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3c      	ldr	r2, [pc, #240]	; (800591c <TIM_Base_SetConfig+0x11c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3b      	ldr	r2, [pc, #236]	; (8005920 <TIM_Base_SetConfig+0x120>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3a      	ldr	r2, [pc, #232]	; (8005924 <TIM_Base_SetConfig+0x124>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d108      	bne.n	8005852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <TIM_Base_SetConfig+0x114>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d02b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d027      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <TIM_Base_SetConfig+0x118>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d023      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <TIM_Base_SetConfig+0x11c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <TIM_Base_SetConfig+0x120>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_Base_SetConfig+0x124>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <TIM_Base_SetConfig+0x128>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a27      	ldr	r2, [pc, #156]	; (800592c <TIM_Base_SetConfig+0x12c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a26      	ldr	r2, [pc, #152]	; (8005930 <TIM_Base_SetConfig+0x130>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a25      	ldr	r2, [pc, #148]	; (8005934 <TIM_Base_SetConfig+0x134>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a24      	ldr	r2, [pc, #144]	; (8005938 <TIM_Base_SetConfig+0x138>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a23      	ldr	r2, [pc, #140]	; (800593c <TIM_Base_SetConfig+0x13c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <TIM_Base_SetConfig+0x114>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <TIM_Base_SetConfig+0x124>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d103      	bne.n	8005900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	615a      	str	r2, [r3, #20]
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800
 8005934:	40001800 	.word	0x40001800
 8005938:	40001c00 	.word	0x40001c00
 800593c:	40002000 	.word	0x40002000

08005940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0302 	bic.w	r3, r3, #2
 8005988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <TIM_OC1_SetConfig+0xd8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC1_SetConfig+0x64>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <TIM_OC1_SetConfig+0xdc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10c      	bne.n	80059be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0308 	bic.w	r3, r3, #8
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <TIM_OC1_SetConfig+0xd8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC1_SetConfig+0x8e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <TIM_OC1_SetConfig+0xdc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d111      	bne.n	80059f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	621a      	str	r2, [r3, #32]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40010400 	.word	0x40010400

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0210 	bic.w	r2, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC2_SetConfig+0x68>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10d      	bne.n	8005aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d113      	bne.n	8005adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400

08005b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a21      	ldr	r2, [pc, #132]	; (8005bec <TIM_OC3_SetConfig+0xe0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC3_SetConfig+0x66>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <TIM_OC3_SetConfig+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10d      	bne.n	8005b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a16      	ldr	r2, [pc, #88]	; (8005bec <TIM_OC3_SetConfig+0xe0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC3_SetConfig+0x92>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <TIM_OC3_SetConfig+0xe4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d113      	bne.n	8005bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40010400 	.word	0x40010400

08005bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	031b      	lsls	r3, r3, #12
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <TIM_OC4_SetConfig+0xa4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC4_SetConfig+0x68>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <TIM_OC4_SetConfig+0xa8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d109      	bne.n	8005c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	019b      	lsls	r3, r3, #6
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400

08005ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 030a 	bic.w	r3, r3, #10
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0210 	bic.w	r2, r3, #16
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e05a      	b.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a21      	ldr	r2, [pc, #132]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d01d      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10c      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40001800 	.word	0x40001800

08005f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e03d      	b.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e03f      	b.n	800604e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fd fc0c 	bl	8003800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 ff43 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	d165      	bne.n	800613e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_Transmit_DMA+0x26>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e05e      	b.n	8006140 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_UART_Transmit_DMA+0x38>
 800608c:	2302      	movs	r3, #2
 800608e:	e057      	b.n	8006140 <HAL_UART_Transmit_DMA+0xe8>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2221      	movs	r2, #33	; 0x21
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_UART_Transmit_DMA+0xf0>)
 80060be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_UART_Transmit_DMA+0xf4>)
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	4a20      	ldr	r2, [pc, #128]	; (8006150 <HAL_UART_Transmit_DMA+0xf8>)
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3304      	adds	r3, #4
 80060ec:	461a      	mov	r2, r3
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f7fd fe9a 	bl	8003e28 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	617b      	str	r3, [r7, #20]
   return(result);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006126:	627a      	str	r2, [r7, #36]	; 0x24
 8006128:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	61fb      	str	r3, [r7, #28]
   return(result);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3730      	adds	r7, #48	; 0x30
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08006725 	.word	0x08006725
 800614c:	080067bf 	.word	0x080067bf
 8006150:	08006937 	.word	0x08006937

08006154 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b20      	cmp	r3, #32
 800616c:	d11d      	bne.n	80061aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Receive_DMA+0x26>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e016      	b.n	80061ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_UART_Receive_DMA+0x38>
 8006188:	2302      	movs	r3, #2
 800618a:	e00f      	b.n	80061ac <HAL_UART_Receive_DMA+0x58>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	461a      	mov	r2, r3
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fc13 	bl	80069cc <UART_Start_Receive_DMA>
 80061a6:	4603      	mov	r3, r0
 80061a8:	e000      	b.n	80061ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b0ba      	sub	sp, #232	; 0xe8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10f      	bne.n	800621a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fd7f 	bl	8006d16 <UART_Receive_IT>
      return;
 8006218:	e256      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800621a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80de 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80d1 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f043 0201 	orr.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
 800626e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f043 0202 	orr.w	r2, r3, #2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d011      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f043 0208 	orr.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 81ed 	beq.w	80066be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fd0a 	bl	8006d16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_UART_IRQHandler+0x17a>
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d04f      	beq.n	80063ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc12 	bl	8006b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d141      	bne.n	80063c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800637a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d9      	bne.n	8006342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d013      	beq.n	80063be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	4a7d      	ldr	r2, [pc, #500]	; (8006590 <HAL_UART_IRQHandler+0x3dc>)
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fd fe08 	bl	8003fb8 <HAL_DMA_Abort_IT>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e00e      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f99a 	bl	80066f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	e00a      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f996 	bl	80066f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e006      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f992 	bl	80066f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063da:	e170      	b.n	80066be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	bf00      	nop
    return;
 80063de:	e16e      	b.n	80066be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 814a 	bne.w	800667e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8143 	beq.w	800667e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 813c 	beq.w	800667e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	f040 80b4 	bne.w	8006594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8140 	beq.w	80066c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644a:	429a      	cmp	r2, r3
 800644c:	f080 8139 	bcs.w	80066c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	f000 8088 	beq.w	8006576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1d9      	bne.n	8006466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e1      	bne.n	80064b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006558:	65ba      	str	r2, [r7, #88]	; 0x58
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fcb1 	bl	8003ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800657e:	b29b      	uxth	r3, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8c0 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800658c:	e099      	b.n	80066c2 <HAL_UART_IRQHandler+0x50e>
 800658e:	bf00      	nop
 8006590:	08006c1f 	.word	0x08006c1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659c:	b29b      	uxth	r3, r3
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 808b 	beq.w	80066c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8086 	beq.w	80066c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065de:	647a      	str	r2, [r7, #68]	; 0x44
 80065e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	623b      	str	r3, [r7, #32]
   return(result);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006616:	633a      	str	r2, [r7, #48]	; 0x30
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800661c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e3      	bne.n	80065f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60fb      	str	r3, [r7, #12]
   return(result);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800665c:	61fa      	str	r2, [r7, #28]
 800665e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e3      	bne.n	8006638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f848 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800667c:	e023      	b.n	80066c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_UART_IRQHandler+0x4ea>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fad5 	bl	8006c46 <UART_Transmit_IT>
    return;
 800669c:	e014      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <HAL_UART_IRQHandler+0x514>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fb15 	bl	8006ce6 <UART_EndTransmit_IT>
    return;
 80066bc:	e004      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
    return;
 80066be:	bf00      	nop
 80066c0:	e002      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
      return;
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
      return;
 80066c6:	bf00      	nop
  }
}
 80066c8:	37e8      	adds	r7, #232	; 0xe8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b090      	sub	sp, #64	; 0x40
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d137      	bne.n	80067b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	2200      	movs	r2, #0
 8006744:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	623b      	str	r3, [r7, #32]
   return(result);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675c:	63bb      	str	r3, [r7, #56]	; 0x38
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006766:	633a      	str	r2, [r7, #48]	; 0x30
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800676c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e5      	bne.n	8006746 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	60fb      	str	r3, [r7, #12]
   return(result);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679a:	61fa      	str	r2, [r7, #28]
 800679c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	617b      	str	r3, [r7, #20]
   return(result);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ae:	e002      	b.n	80067b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80067b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067b2:	f7fa fb01 	bl	8000db8 <HAL_UART_TxCpltCallback>
}
 80067b6:	bf00      	nop
 80067b8:	3740      	adds	r7, #64	; 0x40
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff7f 	bl	80066d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b09c      	sub	sp, #112	; 0x70
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d172      	bne.n	80068dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	2200      	movs	r2, #0
 80067fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006812:	66bb      	str	r3, [r7, #104]	; 0x68
 8006814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800681c:	65ba      	str	r2, [r7, #88]	; 0x58
 800681e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006822:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800682a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e5      	bne.n	80067fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	667b      	str	r3, [r7, #100]	; 0x64
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006850:	647a      	str	r2, [r7, #68]	; 0x44
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	623b      	str	r3, [r7, #32]
   return(result);
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687a:	663b      	str	r3, [r7, #96]	; 0x60
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006884:	633a      	str	r2, [r7, #48]	; 0x30
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800688a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d119      	bne.n	80068dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0310 	bic.w	r3, r3, #16
 80068be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068c8:	61fa      	str	r2, [r7, #28]
 80068ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	617b      	str	r3, [r7, #20]
   return(result);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d106      	bne.n	80068f2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e8:	4619      	mov	r1, r3
 80068ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068ec:	f7ff ff0e 	bl	800670c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068f0:	e002      	b.n	80068f8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80068f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068f4:	f7fa fa7c 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 80068f8:	bf00      	nop
 80068fa:	3770      	adds	r7, #112	; 0x70
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	2b01      	cmp	r3, #1
 8006914:	d108      	bne.n	8006928 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	b29b      	uxth	r3, r3
 800691e:	4619      	mov	r1, r3
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff fef3 	bl	800670c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006926:	e002      	b.n	800692e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff fedb 	bl	80066e4 <HAL_UART_RxHalfCpltCallback>
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b21      	cmp	r3, #33	; 0x21
 8006968:	d108      	bne.n	800697c <UART_DMAError+0x46>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f000 f8c6 	bl	8006b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b22      	cmp	r3, #34	; 0x22
 800699c:	d108      	bne.n	80069b0 <UART_DMAError+0x7a>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069aa:	68b8      	ldr	r0, [r7, #8]
 80069ac:	f000 f8d4 	bl	8006b58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	f043 0210 	orr.w	r2, r3, #16
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f7ff fe9b 	bl	80066f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b098      	sub	sp, #96	; 0x60
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2222      	movs	r2, #34	; 0x22
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	4a40      	ldr	r2, [pc, #256]	; (8006afc <UART_Start_Receive_DMA+0x130>)
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	4a3f      	ldr	r2, [pc, #252]	; (8006b00 <UART_Start_Receive_DMA+0x134>)
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	4a3e      	ldr	r2, [pc, #248]	; (8006b04 <UART_Start_Receive_DMA+0x138>)
 8006a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	2200      	movs	r2, #0
 8006a12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	f7fd f9fc 	bl	8003e28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d019      	beq.n	8006a8a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aaa:	63ba      	str	r2, [r7, #56]	; 0x38
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ade:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6a39      	ldr	r1, [r7, #32]
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3760      	adds	r7, #96	; 0x60
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	080067db 	.word	0x080067db
 8006b00:	08006901 	.word	0x08006901
 8006b04:	08006937 	.word	0x08006937

08006b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	61ba      	str	r2, [r7, #24]
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b4c:	bf00      	nop
 8006b4e:	3724      	adds	r7, #36	; 0x24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b095      	sub	sp, #84	; 0x54
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b80:	643a      	str	r2, [r7, #64]	; 0x40
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e5      	bne.n	8006b60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e5      	bne.n	8006b94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d119      	bne.n	8006c04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 0310 	bic.w	r3, r3, #16
 8006be6:	647b      	str	r3, [r7, #68]	; 0x44
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf0:	61ba      	str	r2, [r7, #24]
 8006bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6979      	ldr	r1, [r7, #20]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e5      	bne.n	8006bd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c12:	bf00      	nop
 8006c14:	3754      	adds	r7, #84	; 0x54
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fd5d 	bl	80066f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b21      	cmp	r3, #33	; 0x21
 8006c58:	d13e      	bne.n	8006cd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d114      	bne.n	8006c8e <UART_Transmit_IT+0x48>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d110      	bne.n	8006c8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	1c9a      	adds	r2, r3, #2
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	621a      	str	r2, [r3, #32]
 8006c8c:	e008      	b.n	8006ca0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6211      	str	r1, [r2, #32]
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4619      	mov	r1, r3
 8006cae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10f      	bne.n	8006cd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e000      	b.n	8006cda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cd8:	2302      	movs	r3, #2
  }
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa f856 	bl	8000db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b08c      	sub	sp, #48	; 0x30
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b22      	cmp	r3, #34	; 0x22
 8006d28:	f040 80ab 	bne.w	8006e82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d117      	bne.n	8006d66 <UART_Receive_IT+0x50>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d113      	bne.n	8006d66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	629a      	str	r2, [r3, #40]	; 0x28
 8006d64:	e026      	b.n	8006db4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d78:	d007      	beq.n	8006d8a <UART_Receive_IT+0x74>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <UART_Receive_IT+0x82>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e008      	b.n	8006daa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d15a      	bne.n	8006e7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0220 	bic.w	r2, r2, #32
 8006dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d135      	bne.n	8006e74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	623a      	str	r2, [r7, #32]
 8006e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69f9      	ldr	r1, [r7, #28]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d10a      	bne.n	8006e66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fc4d 	bl	800670c <HAL_UARTEx_RxEventCallback>
 8006e72:	e002      	b.n	8006e7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7f9 ffbb 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e002      	b.n	8006e84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3730      	adds	r7, #48	; 0x30
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e90:	b0c0      	sub	sp, #256	; 0x100
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	68d9      	ldr	r1, [r3, #12]
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	ea40 0301 	orr.w	r3, r0, r1
 8006eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ee4:	f021 010c 	bic.w	r1, r1, #12
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f06:	6999      	ldr	r1, [r3, #24]
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	ea40 0301 	orr.w	r3, r0, r1
 8006f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b8f      	ldr	r3, [pc, #572]	; (8007158 <UART_SetConfig+0x2cc>)
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d005      	beq.n	8006f2c <UART_SetConfig+0xa0>
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b8d      	ldr	r3, [pc, #564]	; (800715c <UART_SetConfig+0x2d0>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d104      	bne.n	8006f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fe f8f0 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8006f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f34:	e003      	b.n	8006f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f36:	f7fe f8d7 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8006f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f48:	f040 810c 	bne.w	8007164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	1891      	adds	r1, r2, r2
 8006f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f66:	415b      	adcs	r3, r3
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f6e:	4621      	mov	r1, r4
 8006f70:	eb12 0801 	adds.w	r8, r2, r1
 8006f74:	4629      	mov	r1, r5
 8006f76:	eb43 0901 	adc.w	r9, r3, r1
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f8e:	4690      	mov	r8, r2
 8006f90:	4699      	mov	r9, r3
 8006f92:	4623      	mov	r3, r4
 8006f94:	eb18 0303 	adds.w	r3, r8, r3
 8006f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	eb49 0303 	adc.w	r3, r9, r3
 8006fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	18db      	adds	r3, r3, r3
 8006fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	eb42 0303 	adc.w	r3, r2, r3
 8006fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fd0:	f7f9 fc10 	bl	80007f4 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4b61      	ldr	r3, [pc, #388]	; (8007160 <UART_SetConfig+0x2d4>)
 8006fda:	fba3 2302 	umull	r2, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	011c      	lsls	r4, r3, #4
 8006fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	1891      	adds	r1, r2, r2
 8006ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ffc:	415b      	adcs	r3, r3
 8006ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007004:	4641      	mov	r1, r8
 8007006:	eb12 0a01 	adds.w	sl, r2, r1
 800700a:	4649      	mov	r1, r9
 800700c:	eb43 0b01 	adc.w	fp, r3, r1
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800701c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007024:	4692      	mov	sl, r2
 8007026:	469b      	mov	fp, r3
 8007028:	4643      	mov	r3, r8
 800702a:	eb1a 0303 	adds.w	r3, sl, r3
 800702e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007032:	464b      	mov	r3, r9
 8007034:	eb4b 0303 	adc.w	r3, fp, r3
 8007038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800704c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007050:	460b      	mov	r3, r1
 8007052:	18db      	adds	r3, r3, r3
 8007054:	643b      	str	r3, [r7, #64]	; 0x40
 8007056:	4613      	mov	r3, r2
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
 800705e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007066:	f7f9 fbc5 	bl	80007f4 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4611      	mov	r1, r2
 8007070:	4b3b      	ldr	r3, [pc, #236]	; (8007160 <UART_SetConfig+0x2d4>)
 8007072:	fba3 2301 	umull	r2, r3, r3, r1
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2264      	movs	r2, #100	; 0x64
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	1acb      	subs	r3, r1, r3
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007086:	4b36      	ldr	r3, [pc, #216]	; (8007160 <UART_SetConfig+0x2d4>)
 8007088:	fba3 2302 	umull	r2, r3, r3, r2
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007094:	441c      	add	r4, r3
 8007096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800709a:	2200      	movs	r2, #0
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80070b0:	415b      	adcs	r3, r3
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070b8:	4641      	mov	r1, r8
 80070ba:	1851      	adds	r1, r2, r1
 80070bc:	6339      	str	r1, [r7, #48]	; 0x30
 80070be:	4649      	mov	r1, r9
 80070c0:	414b      	adcs	r3, r1
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070d0:	4659      	mov	r1, fp
 80070d2:	00cb      	lsls	r3, r1, #3
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070da:	4651      	mov	r1, sl
 80070dc:	00ca      	lsls	r2, r1, #3
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	4642      	mov	r2, r8
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070ec:	464b      	mov	r3, r9
 80070ee:	460a      	mov	r2, r1
 80070f0:	eb42 0303 	adc.w	r3, r2, r3
 80070f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800710c:	460b      	mov	r3, r1
 800710e:	18db      	adds	r3, r3, r3
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
 8007112:	4613      	mov	r3, r2
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800711e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007122:	f7f9 fb67 	bl	80007f4 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <UART_SetConfig+0x2d4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	; 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	3332      	adds	r3, #50	; 0x32
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <UART_SetConfig+0x2d4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 0207 	and.w	r2, r3, #7
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4422      	add	r2, r4
 8007152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007154:	e106      	b.n	8007364 <UART_SetConfig+0x4d8>
 8007156:	bf00      	nop
 8007158:	40011000 	.word	0x40011000
 800715c:	40011400 	.word	0x40011400
 8007160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007168:	2200      	movs	r2, #0
 800716a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800716e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	6239      	str	r1, [r7, #32]
 800717e:	415b      	adcs	r3, r3
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
 8007182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007186:	4641      	mov	r1, r8
 8007188:	1854      	adds	r4, r2, r1
 800718a:	4649      	mov	r1, r9
 800718c:	eb43 0501 	adc.w	r5, r3, r1
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	00eb      	lsls	r3, r5, #3
 800719a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800719e:	00e2      	lsls	r2, r4, #3
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	4643      	mov	r3, r8
 80071a6:	18e3      	adds	r3, r4, r3
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071ac:	464b      	mov	r3, r9
 80071ae:	eb45 0303 	adc.w	r3, r5, r3
 80071b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071d2:	4629      	mov	r1, r5
 80071d4:	008b      	lsls	r3, r1, #2
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071dc:	4621      	mov	r1, r4
 80071de:	008a      	lsls	r2, r1, #2
 80071e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071e4:	f7f9 fb06 	bl	80007f4 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4b60      	ldr	r3, [pc, #384]	; (8007370 <UART_SetConfig+0x4e4>)
 80071ee:	fba3 2302 	umull	r2, r3, r3, r2
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	011c      	lsls	r4, r3, #4
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	61b9      	str	r1, [r7, #24]
 8007210:	415b      	adcs	r3, r3
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6139      	str	r1, [r7, #16]
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	67bb      	str	r3, [r7, #120]	; 0x78
 8007262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007270:	4649      	mov	r1, r9
 8007272:	008b      	lsls	r3, r1, #2
 8007274:	4641      	mov	r1, r8
 8007276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800727a:	4641      	mov	r1, r8
 800727c:	008a      	lsls	r2, r1, #2
 800727e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007282:	f7f9 fab7 	bl	80007f4 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4611      	mov	r1, r2
 800728c:	4b38      	ldr	r3, [pc, #224]	; (8007370 <UART_SetConfig+0x4e4>)
 800728e:	fba3 2301 	umull	r2, r3, r3, r1
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	; 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	3332      	adds	r3, #50	; 0x32
 80072a0:	4a33      	ldr	r2, [pc, #204]	; (8007370 <UART_SetConfig+0x4e4>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ac:	441c      	add	r4, r3
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	673b      	str	r3, [r7, #112]	; 0x70
 80072b6:	677a      	str	r2, [r7, #116]	; 0x74
 80072b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	1891      	adds	r1, r2, r2
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	415b      	adcs	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072cc:	4641      	mov	r1, r8
 80072ce:	1851      	adds	r1, r2, r1
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	4649      	mov	r1, r9
 80072d4:	414b      	adcs	r3, r1
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072e4:	4659      	mov	r1, fp
 80072e6:	00cb      	lsls	r3, r1, #3
 80072e8:	4651      	mov	r1, sl
 80072ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ee:	4651      	mov	r1, sl
 80072f0:	00ca      	lsls	r2, r1, #3
 80072f2:	4610      	mov	r0, r2
 80072f4:	4619      	mov	r1, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	4642      	mov	r2, r8
 80072fa:	189b      	adds	r3, r3, r2
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80072fe:	464b      	mov	r3, r9
 8007300:	460a      	mov	r2, r1
 8007302:	eb42 0303 	adc.w	r3, r2, r3
 8007306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	663b      	str	r3, [r7, #96]	; 0x60
 8007312:	667a      	str	r2, [r7, #100]	; 0x64
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007332:	f7f9 fa5f 	bl	80007f4 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <UART_SetConfig+0x4e4>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	; 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	3332      	adds	r3, #50	; 0x32
 800734e:	4a08      	ldr	r2, [pc, #32]	; (8007370 <UART_SetConfig+0x4e4>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 020f 	and.w	r2, r3, #15
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4422      	add	r2, r4
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800736a:	46bd      	mov	sp, r7
 800736c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007370:	51eb851f 	.word	0x51eb851f

08007374 <sqrtf>:
 8007374:	b508      	push	{r3, lr}
 8007376:	ed2d 8b02 	vpush	{d8}
 800737a:	eeb0 8a40 	vmov.f32	s16, s0
 800737e:	f000 f8f2 	bl	8007566 <__ieee754_sqrtf>
 8007382:	eeb4 8a48 	vcmp.f32	s16, s16
 8007386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738a:	d60c      	bvs.n	80073a6 <sqrtf+0x32>
 800738c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80073ac <sqrtf+0x38>
 8007390:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d505      	bpl.n	80073a6 <sqrtf+0x32>
 800739a:	f000 f927 	bl	80075ec <__errno>
 800739e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80073a2:	2321      	movs	r3, #33	; 0x21
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	ecbd 8b02 	vpop	{d8}
 80073aa:	bd08      	pop	{r3, pc}
 80073ac:	00000000 	.word	0x00000000

080073b0 <atanf>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	ee10 5a10 	vmov	r5, s0
 80073b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80073ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80073be:	eef0 7a40 	vmov.f32	s15, s0
 80073c2:	db10      	blt.n	80073e6 <atanf+0x36>
 80073c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80073c8:	dd04      	ble.n	80073d4 <atanf+0x24>
 80073ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 80073ce:	eeb0 0a67 	vmov.f32	s0, s15
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800750c <atanf+0x15c>
 80073d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007510 <atanf+0x160>
 80073dc:	2d00      	cmp	r5, #0
 80073de:	bfd8      	it	le
 80073e0:	eef0 7a47 	vmovle.f32	s15, s14
 80073e4:	e7f3      	b.n	80073ce <atanf+0x1e>
 80073e6:	4b4b      	ldr	r3, [pc, #300]	; (8007514 <atanf+0x164>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	dc10      	bgt.n	800740e <atanf+0x5e>
 80073ec:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80073f0:	da0a      	bge.n	8007408 <atanf+0x58>
 80073f2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007518 <atanf+0x168>
 80073f6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007406:	dce2      	bgt.n	80073ce <atanf+0x1e>
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	e013      	b.n	8007436 <atanf+0x86>
 800740e:	f000 f8a3 	bl	8007558 <fabsf>
 8007412:	4b42      	ldr	r3, [pc, #264]	; (800751c <atanf+0x16c>)
 8007414:	429c      	cmp	r4, r3
 8007416:	dc4f      	bgt.n	80074b8 <atanf+0x108>
 8007418:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800741c:	429c      	cmp	r4, r3
 800741e:	dc41      	bgt.n	80074a4 <atanf+0xf4>
 8007420:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007424:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007428:	eea0 7a27 	vfma.f32	s14, s0, s15
 800742c:	2300      	movs	r3, #0
 800742e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800743c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007520 <atanf+0x170>
 8007440:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007524 <atanf+0x174>
 8007444:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007528 <atanf+0x178>
 8007448:	ee66 6a06 	vmul.f32	s13, s12, s12
 800744c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007450:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800752c <atanf+0x17c>
 8007454:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007458:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007530 <atanf+0x180>
 800745c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007460:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007534 <atanf+0x184>
 8007464:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007468:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007538 <atanf+0x188>
 800746c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007470:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800753c <atanf+0x18c>
 8007474:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007478:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007540 <atanf+0x190>
 800747c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007480:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007544 <atanf+0x194>
 8007484:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007488:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007548 <atanf+0x198>
 800748c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007490:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007494:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800749c:	d121      	bne.n	80074e2 <atanf+0x132>
 800749e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074a2:	e794      	b.n	80073ce <atanf+0x1e>
 80074a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80074ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80074b0:	2301      	movs	r3, #1
 80074b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80074b6:	e7be      	b.n	8007436 <atanf+0x86>
 80074b8:	4b24      	ldr	r3, [pc, #144]	; (800754c <atanf+0x19c>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	dc0b      	bgt.n	80074d6 <atanf+0x126>
 80074be:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80074c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80074ca:	2302      	movs	r3, #2
 80074cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80074d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d4:	e7af      	b.n	8007436 <atanf+0x86>
 80074d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80074da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80074de:	2303      	movs	r3, #3
 80074e0:	e7a9      	b.n	8007436 <atanf+0x86>
 80074e2:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <atanf+0x1a0>)
 80074e4:	491b      	ldr	r1, [pc, #108]	; (8007554 <atanf+0x1a4>)
 80074e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80074ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80074ee:	edd3 6a00 	vldr	s13, [r3]
 80074f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074fc:	edd2 7a00 	vldr	s15, [r2]
 8007500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007504:	bfb8      	it	lt
 8007506:	eef1 7a67 	vneglt.f32	s15, s15
 800750a:	e760      	b.n	80073ce <atanf+0x1e>
 800750c:	3fc90fdb 	.word	0x3fc90fdb
 8007510:	bfc90fdb 	.word	0xbfc90fdb
 8007514:	3edfffff 	.word	0x3edfffff
 8007518:	7149f2ca 	.word	0x7149f2ca
 800751c:	3f97ffff 	.word	0x3f97ffff
 8007520:	3c8569d7 	.word	0x3c8569d7
 8007524:	3d4bda59 	.word	0x3d4bda59
 8007528:	bd6ef16b 	.word	0xbd6ef16b
 800752c:	3d886b35 	.word	0x3d886b35
 8007530:	3dba2e6e 	.word	0x3dba2e6e
 8007534:	3e124925 	.word	0x3e124925
 8007538:	3eaaaaab 	.word	0x3eaaaaab
 800753c:	bd15a221 	.word	0xbd15a221
 8007540:	bd9d8795 	.word	0xbd9d8795
 8007544:	bde38e38 	.word	0xbde38e38
 8007548:	be4ccccd 	.word	0xbe4ccccd
 800754c:	401bffff 	.word	0x401bffff
 8007550:	08007b74 	.word	0x08007b74
 8007554:	08007b84 	.word	0x08007b84

08007558 <fabsf>:
 8007558:	ee10 3a10 	vmov	r3, s0
 800755c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007560:	ee00 3a10 	vmov	s0, r3
 8007564:	4770      	bx	lr

08007566 <__ieee754_sqrtf>:
 8007566:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800756a:	4770      	bx	lr

0800756c <realloc>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <realloc+0xc>)
 800756e:	460a      	mov	r2, r1
 8007570:	4601      	mov	r1, r0
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f000 b802 	b.w	800757c <_realloc_r>
 8007578:	20000058 	.word	0x20000058

0800757c <_realloc_r>:
 800757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007580:	4680      	mov	r8, r0
 8007582:	4614      	mov	r4, r2
 8007584:	460e      	mov	r6, r1
 8007586:	b921      	cbnz	r1, 8007592 <_realloc_r+0x16>
 8007588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	4611      	mov	r1, r2
 800758e:	f000 b8d3 	b.w	8007738 <_malloc_r>
 8007592:	b92a      	cbnz	r2, 80075a0 <_realloc_r+0x24>
 8007594:	f000 f864 	bl	8007660 <_free_r>
 8007598:	4625      	mov	r5, r4
 800759a:	4628      	mov	r0, r5
 800759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a0:	f000 f956 	bl	8007850 <_malloc_usable_size_r>
 80075a4:	4284      	cmp	r4, r0
 80075a6:	4607      	mov	r7, r0
 80075a8:	d802      	bhi.n	80075b0 <_realloc_r+0x34>
 80075aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075ae:	d812      	bhi.n	80075d6 <_realloc_r+0x5a>
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f000 f8c0 	bl	8007738 <_malloc_r>
 80075b8:	4605      	mov	r5, r0
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0ed      	beq.n	800759a <_realloc_r+0x1e>
 80075be:	42bc      	cmp	r4, r7
 80075c0:	4622      	mov	r2, r4
 80075c2:	4631      	mov	r1, r6
 80075c4:	bf28      	it	cs
 80075c6:	463a      	movcs	r2, r7
 80075c8:	f000 f83c 	bl	8007644 <memcpy>
 80075cc:	4631      	mov	r1, r6
 80075ce:	4640      	mov	r0, r8
 80075d0:	f000 f846 	bl	8007660 <_free_r>
 80075d4:	e7e1      	b.n	800759a <_realloc_r+0x1e>
 80075d6:	4635      	mov	r5, r6
 80075d8:	e7df      	b.n	800759a <_realloc_r+0x1e>

080075da <memset>:
 80075da:	4402      	add	r2, r0
 80075dc:	4603      	mov	r3, r0
 80075de:	4293      	cmp	r3, r2
 80075e0:	d100      	bne.n	80075e4 <memset+0xa>
 80075e2:	4770      	bx	lr
 80075e4:	f803 1b01 	strb.w	r1, [r3], #1
 80075e8:	e7f9      	b.n	80075de <memset+0x4>
	...

080075ec <__errno>:
 80075ec:	4b01      	ldr	r3, [pc, #4]	; (80075f4 <__errno+0x8>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000058 	.word	0x20000058

080075f8 <__libc_init_array>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4d0d      	ldr	r5, [pc, #52]	; (8007630 <__libc_init_array+0x38>)
 80075fc:	4c0d      	ldr	r4, [pc, #52]	; (8007634 <__libc_init_array+0x3c>)
 80075fe:	1b64      	subs	r4, r4, r5
 8007600:	10a4      	asrs	r4, r4, #2
 8007602:	2600      	movs	r6, #0
 8007604:	42a6      	cmp	r6, r4
 8007606:	d109      	bne.n	800761c <__libc_init_array+0x24>
 8007608:	4d0b      	ldr	r5, [pc, #44]	; (8007638 <__libc_init_array+0x40>)
 800760a:	4c0c      	ldr	r4, [pc, #48]	; (800763c <__libc_init_array+0x44>)
 800760c:	f000 f938 	bl	8007880 <_init>
 8007610:	1b64      	subs	r4, r4, r5
 8007612:	10a4      	asrs	r4, r4, #2
 8007614:	2600      	movs	r6, #0
 8007616:	42a6      	cmp	r6, r4
 8007618:	d105      	bne.n	8007626 <__libc_init_array+0x2e>
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007620:	4798      	blx	r3
 8007622:	3601      	adds	r6, #1
 8007624:	e7ee      	b.n	8007604 <__libc_init_array+0xc>
 8007626:	f855 3b04 	ldr.w	r3, [r5], #4
 800762a:	4798      	blx	r3
 800762c:	3601      	adds	r6, #1
 800762e:	e7f2      	b.n	8007616 <__libc_init_array+0x1e>
 8007630:	08007b9c 	.word	0x08007b9c
 8007634:	08007b9c 	.word	0x08007b9c
 8007638:	08007b9c 	.word	0x08007b9c
 800763c:	08007ba8 	.word	0x08007ba8

08007640 <__retarget_lock_acquire_recursive>:
 8007640:	4770      	bx	lr

08007642 <__retarget_lock_release_recursive>:
 8007642:	4770      	bx	lr

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765a:	4291      	cmp	r1, r2
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <_free_r>:
 8007660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007662:	2900      	cmp	r1, #0
 8007664:	d044      	beq.n	80076f0 <_free_r+0x90>
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f1a1 0404 	sub.w	r4, r1, #4
 8007672:	bfb8      	it	lt
 8007674:	18e4      	addlt	r4, r4, r3
 8007676:	f000 f8df 	bl	8007838 <__malloc_lock>
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <_free_r+0x94>)
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	b933      	cbnz	r3, 8007690 <_free_r+0x30>
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	6014      	str	r4, [r2, #0]
 8007686:	b003      	add	sp, #12
 8007688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768c:	f000 b8da 	b.w	8007844 <__malloc_unlock>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d908      	bls.n	80076a6 <_free_r+0x46>
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	1961      	adds	r1, r4, r5
 8007698:	428b      	cmp	r3, r1
 800769a:	bf01      	itttt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	1949      	addeq	r1, r1, r5
 80076a2:	6021      	streq	r1, [r4, #0]
 80076a4:	e7ed      	b.n	8007682 <_free_r+0x22>
 80076a6:	461a      	mov	r2, r3
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	b10b      	cbz	r3, 80076b0 <_free_r+0x50>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d9fa      	bls.n	80076a6 <_free_r+0x46>
 80076b0:	6811      	ldr	r1, [r2, #0]
 80076b2:	1855      	adds	r5, r2, r1
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d10b      	bne.n	80076d0 <_free_r+0x70>
 80076b8:	6824      	ldr	r4, [r4, #0]
 80076ba:	4421      	add	r1, r4
 80076bc:	1854      	adds	r4, r2, r1
 80076be:	42a3      	cmp	r3, r4
 80076c0:	6011      	str	r1, [r2, #0]
 80076c2:	d1e0      	bne.n	8007686 <_free_r+0x26>
 80076c4:	681c      	ldr	r4, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	440c      	add	r4, r1
 80076cc:	6014      	str	r4, [r2, #0]
 80076ce:	e7da      	b.n	8007686 <_free_r+0x26>
 80076d0:	d902      	bls.n	80076d8 <_free_r+0x78>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7d6      	b.n	8007686 <_free_r+0x26>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf04      	itt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	bf04      	itt	eq
 80076e8:	1949      	addeq	r1, r1, r5
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	6054      	str	r4, [r2, #4]
 80076ee:	e7ca      	b.n	8007686 <_free_r+0x26>
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	20000ce4 	.word	0x20000ce4

080076f8 <sbrk_aligned>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4e0e      	ldr	r6, [pc, #56]	; (8007734 <sbrk_aligned+0x3c>)
 80076fc:	460c      	mov	r4, r1
 80076fe:	6831      	ldr	r1, [r6, #0]
 8007700:	4605      	mov	r5, r0
 8007702:	b911      	cbnz	r1, 800770a <sbrk_aligned+0x12>
 8007704:	f000 f8ac 	bl	8007860 <_sbrk_r>
 8007708:	6030      	str	r0, [r6, #0]
 800770a:	4621      	mov	r1, r4
 800770c:	4628      	mov	r0, r5
 800770e:	f000 f8a7 	bl	8007860 <_sbrk_r>
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	d00a      	beq.n	800772c <sbrk_aligned+0x34>
 8007716:	1cc4      	adds	r4, r0, #3
 8007718:	f024 0403 	bic.w	r4, r4, #3
 800771c:	42a0      	cmp	r0, r4
 800771e:	d007      	beq.n	8007730 <sbrk_aligned+0x38>
 8007720:	1a21      	subs	r1, r4, r0
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f89c 	bl	8007860 <_sbrk_r>
 8007728:	3001      	adds	r0, #1
 800772a:	d101      	bne.n	8007730 <sbrk_aligned+0x38>
 800772c:	f04f 34ff 	mov.w	r4, #4294967295
 8007730:	4620      	mov	r0, r4
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	20000ce8 	.word	0x20000ce8

08007738 <_malloc_r>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4607      	mov	r7, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d905      	bls.n	8007760 <_malloc_r+0x28>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	2600      	movs	r6, #0
 800775a:	4630      	mov	r0, r6
 800775c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007760:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007834 <_malloc_r+0xfc>
 8007764:	f000 f868 	bl	8007838 <__malloc_lock>
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	461c      	mov	r4, r3
 800776e:	bb5c      	cbnz	r4, 80077c8 <_malloc_r+0x90>
 8007770:	4629      	mov	r1, r5
 8007772:	4638      	mov	r0, r7
 8007774:	f7ff ffc0 	bl	80076f8 <sbrk_aligned>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	4604      	mov	r4, r0
 800777c:	d155      	bne.n	800782a <_malloc_r+0xf2>
 800777e:	f8d8 4000 	ldr.w	r4, [r8]
 8007782:	4626      	mov	r6, r4
 8007784:	2e00      	cmp	r6, #0
 8007786:	d145      	bne.n	8007814 <_malloc_r+0xdc>
 8007788:	2c00      	cmp	r4, #0
 800778a:	d048      	beq.n	800781e <_malloc_r+0xe6>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	4631      	mov	r1, r6
 8007790:	4638      	mov	r0, r7
 8007792:	eb04 0903 	add.w	r9, r4, r3
 8007796:	f000 f863 	bl	8007860 <_sbrk_r>
 800779a:	4581      	cmp	r9, r0
 800779c:	d13f      	bne.n	800781e <_malloc_r+0xe6>
 800779e:	6821      	ldr	r1, [r4, #0]
 80077a0:	1a6d      	subs	r5, r5, r1
 80077a2:	4629      	mov	r1, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7ff ffa7 	bl	80076f8 <sbrk_aligned>
 80077aa:	3001      	adds	r0, #1
 80077ac:	d037      	beq.n	800781e <_malloc_r+0xe6>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	442b      	add	r3, r5
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	f8d8 3000 	ldr.w	r3, [r8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d038      	beq.n	800782e <_malloc_r+0xf6>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	42a2      	cmp	r2, r4
 80077c0:	d12b      	bne.n	800781a <_malloc_r+0xe2>
 80077c2:	2200      	movs	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	e00f      	b.n	80077e8 <_malloc_r+0xb0>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	1b52      	subs	r2, r2, r5
 80077cc:	d41f      	bmi.n	800780e <_malloc_r+0xd6>
 80077ce:	2a0b      	cmp	r2, #11
 80077d0:	d917      	bls.n	8007802 <_malloc_r+0xca>
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	6025      	str	r5, [r4, #0]
 80077d8:	bf18      	it	ne
 80077da:	6059      	strne	r1, [r3, #4]
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	bf08      	it	eq
 80077e0:	f8c8 1000 	streq.w	r1, [r8]
 80077e4:	5162      	str	r2, [r4, r5]
 80077e6:	604b      	str	r3, [r1, #4]
 80077e8:	4638      	mov	r0, r7
 80077ea:	f104 060b 	add.w	r6, r4, #11
 80077ee:	f000 f829 	bl	8007844 <__malloc_unlock>
 80077f2:	f026 0607 	bic.w	r6, r6, #7
 80077f6:	1d23      	adds	r3, r4, #4
 80077f8:	1af2      	subs	r2, r6, r3
 80077fa:	d0ae      	beq.n	800775a <_malloc_r+0x22>
 80077fc:	1b9b      	subs	r3, r3, r6
 80077fe:	50a3      	str	r3, [r4, r2]
 8007800:	e7ab      	b.n	800775a <_malloc_r+0x22>
 8007802:	42a3      	cmp	r3, r4
 8007804:	6862      	ldr	r2, [r4, #4]
 8007806:	d1dd      	bne.n	80077c4 <_malloc_r+0x8c>
 8007808:	f8c8 2000 	str.w	r2, [r8]
 800780c:	e7ec      	b.n	80077e8 <_malloc_r+0xb0>
 800780e:	4623      	mov	r3, r4
 8007810:	6864      	ldr	r4, [r4, #4]
 8007812:	e7ac      	b.n	800776e <_malloc_r+0x36>
 8007814:	4634      	mov	r4, r6
 8007816:	6876      	ldr	r6, [r6, #4]
 8007818:	e7b4      	b.n	8007784 <_malloc_r+0x4c>
 800781a:	4613      	mov	r3, r2
 800781c:	e7cc      	b.n	80077b8 <_malloc_r+0x80>
 800781e:	230c      	movs	r3, #12
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4638      	mov	r0, r7
 8007824:	f000 f80e 	bl	8007844 <__malloc_unlock>
 8007828:	e797      	b.n	800775a <_malloc_r+0x22>
 800782a:	6025      	str	r5, [r4, #0]
 800782c:	e7dc      	b.n	80077e8 <_malloc_r+0xb0>
 800782e:	605b      	str	r3, [r3, #4]
 8007830:	deff      	udf	#255	; 0xff
 8007832:	bf00      	nop
 8007834:	20000ce4 	.word	0x20000ce4

08007838 <__malloc_lock>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__malloc_lock+0x8>)
 800783a:	f7ff bf01 	b.w	8007640 <__retarget_lock_acquire_recursive>
 800783e:	bf00      	nop
 8007840:	20000ce0 	.word	0x20000ce0

08007844 <__malloc_unlock>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__malloc_unlock+0x8>)
 8007846:	f7ff befc 	b.w	8007642 <__retarget_lock_release_recursive>
 800784a:	bf00      	nop
 800784c:	20000ce0 	.word	0x20000ce0

08007850 <_malloc_usable_size_r>:
 8007850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007854:	1f18      	subs	r0, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfbc      	itt	lt
 800785a:	580b      	ldrlt	r3, [r1, r0]
 800785c:	18c0      	addlt	r0, r0, r3
 800785e:	4770      	bx	lr

08007860 <_sbrk_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d06      	ldr	r5, [pc, #24]	; (800787c <_sbrk_r+0x1c>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7fb fd16 	bl	800329c <_sbrk>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_sbrk_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_sbrk_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20000cdc 	.word	0x20000cdc

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
