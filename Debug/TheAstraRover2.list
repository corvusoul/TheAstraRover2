
TheAstraRover2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008610  08008610  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008618  08008618  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000d30  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d8c  20000d8c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015839  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000309d  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  000389a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c4c  00000000  00000000  00039978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f77  00000000  00000000  0003a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000145db  00000000  00000000  0005e53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0f59  00000000  00000000  00072b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046d8  00000000  00000000  00143a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00148148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082fc 	.word	0x080082fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080082fc 	.word	0x080082fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b970 	b.w	8000aec <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9e08      	ldr	r6, [sp, #32]
 800082a:	460d      	mov	r5, r1
 800082c:	4604      	mov	r4, r0
 800082e:	460f      	mov	r7, r1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d14a      	bne.n	80008ca <__udivmoddi4+0xa6>
 8000834:	428a      	cmp	r2, r1
 8000836:	4694      	mov	ip, r2
 8000838:	d965      	bls.n	8000906 <__udivmoddi4+0xe2>
 800083a:	fab2 f382 	clz	r3, r2
 800083e:	b143      	cbz	r3, 8000852 <__udivmoddi4+0x2e>
 8000840:	fa02 fc03 	lsl.w	ip, r2, r3
 8000844:	f1c3 0220 	rsb	r2, r3, #32
 8000848:	409f      	lsls	r7, r3
 800084a:	fa20 f202 	lsr.w	r2, r0, r2
 800084e:	4317      	orrs	r7, r2
 8000850:	409c      	lsls	r4, r3
 8000852:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000856:	fa1f f58c 	uxth.w	r5, ip
 800085a:	fbb7 f1fe 	udiv	r1, r7, lr
 800085e:	0c22      	lsrs	r2, r4, #16
 8000860:	fb0e 7711 	mls	r7, lr, r1, r7
 8000864:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000868:	fb01 f005 	mul.w	r0, r1, r5
 800086c:	4290      	cmp	r0, r2
 800086e:	d90a      	bls.n	8000886 <__udivmoddi4+0x62>
 8000870:	eb1c 0202 	adds.w	r2, ip, r2
 8000874:	f101 37ff 	add.w	r7, r1, #4294967295
 8000878:	f080 811c 	bcs.w	8000ab4 <__udivmoddi4+0x290>
 800087c:	4290      	cmp	r0, r2
 800087e:	f240 8119 	bls.w	8000ab4 <__udivmoddi4+0x290>
 8000882:	3902      	subs	r1, #2
 8000884:	4462      	add	r2, ip
 8000886:	1a12      	subs	r2, r2, r0
 8000888:	b2a4      	uxth	r4, r4
 800088a:	fbb2 f0fe 	udiv	r0, r2, lr
 800088e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000892:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000896:	fb00 f505 	mul.w	r5, r0, r5
 800089a:	42a5      	cmp	r5, r4
 800089c:	d90a      	bls.n	80008b4 <__udivmoddi4+0x90>
 800089e:	eb1c 0404 	adds.w	r4, ip, r4
 80008a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008a6:	f080 8107 	bcs.w	8000ab8 <__udivmoddi4+0x294>
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	f240 8104 	bls.w	8000ab8 <__udivmoddi4+0x294>
 80008b0:	4464      	add	r4, ip
 80008b2:	3802      	subs	r0, #2
 80008b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	b11e      	cbz	r6, 80008c6 <__udivmoddi4+0xa2>
 80008be:	40dc      	lsrs	r4, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c6 4300 	strd	r4, r3, [r6]
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0xbc>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f000 80ed 	beq.w	8000aae <__udivmoddi4+0x28a>
 80008d4:	2100      	movs	r1, #0
 80008d6:	e9c6 0500 	strd	r0, r5, [r6]
 80008da:	4608      	mov	r0, r1
 80008dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e0:	fab3 f183 	clz	r1, r3
 80008e4:	2900      	cmp	r1, #0
 80008e6:	d149      	bne.n	800097c <__udivmoddi4+0x158>
 80008e8:	42ab      	cmp	r3, r5
 80008ea:	d302      	bcc.n	80008f2 <__udivmoddi4+0xce>
 80008ec:	4282      	cmp	r2, r0
 80008ee:	f200 80f8 	bhi.w	8000ae2 <__udivmoddi4+0x2be>
 80008f2:	1a84      	subs	r4, r0, r2
 80008f4:	eb65 0203 	sbc.w	r2, r5, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	4617      	mov	r7, r2
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d0e2      	beq.n	80008c6 <__udivmoddi4+0xa2>
 8000900:	e9c6 4700 	strd	r4, r7, [r6]
 8000904:	e7df      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000906:	b902      	cbnz	r2, 800090a <__udivmoddi4+0xe6>
 8000908:	deff      	udf	#255	; 0xff
 800090a:	fab2 f382 	clz	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8090 	bne.w	8000a34 <__udivmoddi4+0x210>
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2101      	movs	r1, #1
 8000920:	fbb2 f5f7 	udiv	r5, r2, r7
 8000924:	fb07 2015 	mls	r0, r7, r5, r2
 8000928:	0c22      	lsrs	r2, r4, #16
 800092a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800092e:	fb0e f005 	mul.w	r0, lr, r5
 8000932:	4290      	cmp	r0, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x124>
 8000936:	eb1c 0202 	adds.w	r2, ip, r2
 800093a:	f105 38ff 	add.w	r8, r5, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x122>
 8000940:	4290      	cmp	r0, r2
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2b8>
 8000946:	4645      	mov	r5, r8
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000950:	fb07 2210 	mls	r2, r7, r0, r2
 8000954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x14e>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 32ff 	add.w	r2, r0, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x14c>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2c2>
 8000970:	4610      	mov	r0, r2
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800097a:	e79f      	b.n	80008bc <__udivmoddi4+0x98>
 800097c:	f1c1 0720 	rsb	r7, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa05 f401 	lsl.w	r4, r5, r1
 800098e:	fa20 f307 	lsr.w	r3, r0, r7
 8000992:	40fd      	lsrs	r5, r7
 8000994:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000998:	4323      	orrs	r3, r4
 800099a:	fbb5 f8f9 	udiv	r8, r5, r9
 800099e:	fa1f fe8c 	uxth.w	lr, ip
 80009a2:	fb09 5518 	mls	r5, r9, r8, r5
 80009a6:	0c1c      	lsrs	r4, r3, #16
 80009a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ac:	fb08 f50e 	mul.w	r5, r8, lr
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	fa00 f001 	lsl.w	r0, r0, r1
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b0>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2b4>
 80009c8:	42a5      	cmp	r5, r4
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2b4>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4464      	add	r4, ip
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	b29d      	uxth	r5, r3
 80009d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009dc:	fb09 4413 	mls	r4, r9, r3, r4
 80009e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1da>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2ac>
 80009f6:	45a6      	cmp	lr, r4
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2ac>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	4464      	add	r4, ip
 80009fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a02:	fba3 9502 	umull	r9, r5, r3, r2
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	42ac      	cmp	r4, r5
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46ae      	mov	lr, r5
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x29c>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x298>
 8000a14:	b156      	cbz	r6, 8000a2c <__udivmoddi4+0x208>
 8000a16:	ebb0 0208 	subs.w	r2, r0, r8
 8000a1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a22:	40ca      	lsrs	r2, r1
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	4317      	orrs	r7, r2
 8000a28:	e9c6 7400 	strd	r7, r4, [r6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a34:	f1c3 0120 	rsb	r1, r3, #32
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a40:	fa25 f101 	lsr.w	r1, r5, r1
 8000a44:	409d      	lsls	r5, r3
 8000a46:	432a      	orrs	r2, r5
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a54:	fb07 1510 	mls	r5, r7, r0, r1
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a62:	428d      	cmp	r5, r1
 8000a64:	fa04 f403 	lsl.w	r4, r4, r3
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x258>
 8000a6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a74:	428d      	cmp	r5, r1
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1b49      	subs	r1, r1, r5
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a84:	fb07 1115 	mls	r1, r7, r5, r1
 8000a88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a90:	4291      	cmp	r1, r2
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x282>
 8000a94:	eb1c 0202 	adds.w	r2, ip, r2
 8000a98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2a8>
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2a8>
 8000aa2:	3d02      	subs	r5, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a52      	subs	r2, r2, r1
 8000aa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0xfc>
 8000aae:	4631      	mov	r1, r6
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e708      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e6e6      	b.n	8000886 <__udivmoddi4+0x62>
 8000ab8:	4610      	mov	r0, r2
 8000aba:	e6fb      	b.n	80008b4 <__udivmoddi4+0x90>
 8000abc:	4548      	cmp	r0, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f0>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f0>
 8000acc:	4645      	mov	r5, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x282>
 8000ad0:	462b      	mov	r3, r5
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1da>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x258>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b0>
 8000adc:	3d02      	subs	r5, #2
 8000ade:	4462      	add	r2, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x124>
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e70a      	b.n	80008fc <__udivmoddi4+0xd8>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x14e>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart2)
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  : huart(huart2) {}
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f91f 	bl	8000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b64:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b6c:	89fa      	ldrh	r2, [r7, #14]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d102      	bne.n	8000b78 <_ZN14BufferedSerial4readEv+0x32>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e016      	b.n	8000ba6 <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	b291      	uxth	r1, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bce:	da25      	bge.n	8000c1c <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000bd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	3304      	adds	r3, #4
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f007 fa6b 	bl	80080c0 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d921      	bls.n	8000c52 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000c1a:	e01a      	b.n	8000c52 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fa4a 	bl	80080c0 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d905      	bls.n	8000c48 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f804 	bl	8000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00f      	beq.n	8000c92 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d107      	bne.n	8000c92 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d10b      	bne.n	8000cb8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d003      	beq.n	8000cb8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d154      	bne.n	8000d6c <_ZN14BufferedSerial15flush_tx_bufferEv+0x10c>
  mutex = true;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d103      	bne.n	8000ce0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d21b      	bcs.n	8000d28 <_ZN14BufferedSerial15flush_tx_bufferEv+0xc8>
    uint16_t length = tx_head - tx_tail;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d06:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	89ba      	ldrh	r2, [r7, #12]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d16:	f005 fedd 	bl	8006ad4 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000d26:	e01d      	b.n	8000d64 <_ZN14BufferedSerial15flush_tx_bufferEv+0x104>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000d3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	3304      	adds	r3, #4
 8000d48:	89fa      	ldrh	r2, [r7, #14]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d4e:	f005 fec1 	bl	8006ad4 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e000      	b.n	8000d6e <_ZN14BufferedSerial15flush_tx_bufferEv+0x10e>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000484 	.word	0x20000484
 8000d78:	20000b3c 	.word	0x20000b3c

08000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart2, rx_buf, RX_BUF_SIZE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <_ZN14BufferedSerial15reset_rx_bufferEv+0x20>)
 8000d90:	f005 ff1e 	bl	8006bd0 <HAL_UART_Receive_DMA>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000b3c 	.word	0x20000b3c

08000da0 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_TxCpltCallback+0x34>)
 8000dc6:	f7ff ffeb 	bl	8000da0 <_ZN14BufferedSerial10get_handleEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <HAL_UART_TxCpltCallback+0x34>)
 8000dde:	f7ff ff3f 	bl	8000c60 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000078 	.word	0x20000078

08000df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <HAL_UART_RxCpltCallback+0x18>)
 8000dfa:	f7ff ffbf 	bl	8000d7c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000078 	.word	0x20000078

08000e0c <_Z41__static_initialization_and_destruction_0ii>:
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d103      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000e2a:	f7ff fe61 	bl	8000af0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000b3c 	.word	0x20000b3c
 8000e3c:	20000078 	.word	0x20000078

08000e40 <_GLOBAL__sub_I_buff_serial>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff ffdf 	bl	8000e0c <_Z41__static_initialization_and_destruction_0ii>
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2010      	movs	r0, #16
 8000e78:	f003 fc09 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e7c:	2010      	movs	r0, #16
 8000e7e:	f003 fc22 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2011      	movs	r0, #17
 8000e88:	f003 fc01 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e8c:	2011      	movs	r0, #17
 8000e8e:	f003 fc1a 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0x138>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = steer_rl_ChannelA_Pin|steer_rr_ChannelA_Pin|steer_fr_ChannelA_Pin|steer_fl_ChannelA_Pin;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f62:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x13c>)
 8000f74:	f003 ffc4 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = steer_fr_ChannelB_Pin|steer_fl_ChannelB_Pin|steer_rl_ChannelB_Pin|steer_rr_ChannelB_Pin;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <MX_GPIO_Init+0x140>)
 8000f8c:	f003 ffb8 	bl	8004f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2006      	movs	r0, #6
 8000f96:	f003 fb7a 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f003 fb93 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2007      	movs	r0, #7
 8000fa6:	f003 fb72 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f003 fb8b 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	f003 fb6a 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fba:	2008      	movs	r0, #8
 8000fbc:	f003 fb83 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2009      	movs	r0, #9
 8000fc6:	f003 fb62 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fca:	2009      	movs	r0, #9
 8000fcc:	f003 fb7b 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f003 fa04 	bl	80043f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f868 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f7ff ff56 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff4:	f7ff ff2c 	bl	8000e50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ff8:	f003 f8f0 	bl	80041dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ffc:	f002 fce8 	bl	80039d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001000:	f002 fdaa 	bl	8003b58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001004:	f002 fe3e 	bl	8003c84 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001008:	f002 fed2 	bl	8003db0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800100c:	4828      	ldr	r0, [pc, #160]	; (80010b0 <main+0xcc>)
 800100e:	f004 fe2b 	bl	8005c68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <main+0xd0>)
 8001014:	f004 fe28 	bl	8005c68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0xd4>)
 800101a:	f004 fe25 	bl	8005c68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 800101e:	4827      	ldr	r0, [pc, #156]	; (80010bc <main+0xd8>)
 8001020:	f004 fe22 	bl	8005c68 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001024:	2100      	movs	r1, #0
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <main+0xcc>)
 8001028:	f004 fed6 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800102c:	2104      	movs	r1, #4
 800102e:	4820      	ldr	r0, [pc, #128]	; (80010b0 <main+0xcc>)
 8001030:	f004 fed2 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001034:	2108      	movs	r1, #8
 8001036:	481e      	ldr	r0, [pc, #120]	; (80010b0 <main+0xcc>)
 8001038:	f004 fece 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800103c:	210c      	movs	r1, #12
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <main+0xcc>)
 8001040:	f004 feca 	bl	8005dd8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001044:	2100      	movs	r1, #0
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <main+0xd0>)
 8001048:	f004 fec6 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800104c:	2104      	movs	r1, #4
 800104e:	4819      	ldr	r0, [pc, #100]	; (80010b4 <main+0xd0>)
 8001050:	f004 fec2 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001054:	2108      	movs	r1, #8
 8001056:	4817      	ldr	r0, [pc, #92]	; (80010b4 <main+0xd0>)
 8001058:	f004 febe 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800105c:	210c      	movs	r1, #12
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <main+0xd0>)
 8001060:	f004 feba 	bl	8005dd8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <main+0xd4>)
 8001068:	f004 feb6 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800106c:	2104      	movs	r1, #4
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <main+0xd4>)
 8001070:	f004 feb2 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001074:	2108      	movs	r1, #8
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <main+0xd4>)
 8001078:	f004 feae 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800107c:	210c      	movs	r1, #12
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <main+0xd4>)
 8001080:	f004 feaa 	bl	8005dd8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <main+0xd8>)
 8001088:	f004 fea6 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800108c:	2104      	movs	r1, #4
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <main+0xd8>)
 8001090:	f004 fea2 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001094:	2108      	movs	r1, #8
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <main+0xd8>)
 8001098:	f004 fe9e 	bl	8005dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800109c:	210c      	movs	r1, #12
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <main+0xd8>)
 80010a0:	f004 fe9a 	bl	8005dd8 <HAL_TIM_PWM_Start>


  setup();
 80010a4:	f001 fce4 	bl	8002a70 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80010a8:	f001 fcf2 	bl	8002a90 <loop>
 80010ac:	e7fc      	b.n	80010a8 <main+0xc4>
 80010ae:	bf00      	nop
 80010b0:	20000a1c 	.word	0x20000a1c
 80010b4:	20000a64 	.word	0x20000a64
 80010b8:	20000aac 	.word	0x20000aac
 80010bc:	20000af4 	.word	0x20000af4

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 ffc1 	bl	8008056 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <SystemClock_Config+0xcc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <SystemClock_Config+0xcc>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <SystemClock_Config+0xcc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <SystemClock_Config+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <SystemClock_Config+0xd0>)
 800110a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <SystemClock_Config+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001126:	2302      	movs	r3, #2
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001130:	2308      	movs	r3, #8
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001134:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800113e:	2307      	movs	r3, #7
 8001140:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4618      	mov	r0, r3
 8001148:	f004 f8a6 	bl	8005298 <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001152:	f000 f81f 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2302      	movs	r3, #2
 800115c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001162:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001168:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2105      	movs	r1, #5
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fb07 	bl	8005788 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001180:	f000 f808 	bl	8001194 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>

0800119e <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80011a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ac:	f006 fe3e 	bl	8007e2c <atanf>
 80011b0:	eef0 7a40 	vmov.f32	s15, s0
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <_ZN13STM32HardwareC1Ev+0x1c>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20000078 	.word	0x20000078

080011e0 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fc9f 	bl	8000b30 <_ZN14BufferedSerial4initEv>
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc9d 	bl	8000b46 <_ZN14BufferedSerial4readEv>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fcc1 	bl	8000bb2 <_ZN14BufferedSerial5writeEPKhi>
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	f003 f93e 	bl	80044c0 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800124e:	b480      	push	{r7}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	ed87 0a00 	vstr	s0, [r7]
 800125a:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 800125c:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	15db      	asrs	r3, r3, #23
 8001262:	b21b      	sxth	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800126e:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d103      	bne.n	8001280 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001278:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800127c:	82fb      	strh	r3, [r7, #22]
 800127e:	e02a      	b.n	80012d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001288:	8afb      	ldrh	r3, [r7, #22]
 800128a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800128e:	b29b      	uxth	r3, r3
 8001290:	82fb      	strh	r3, [r7, #22]
 8001292:	e020      	b.n	80012d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800129a:	2300      	movs	r3, #0
 800129c:	82fb      	strh	r3, [r7, #22]
 800129e:	e01a      	b.n	80012d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 80012a0:	8afb      	ldrh	r3, [r7, #22]
 80012a2:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 80012b0:	e008      	b.n	80012c4 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
          exp--;
 80012b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f1      	beq.n	80012b2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80012d4:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	1c59      	adds	r1, r3, #1
 80012fc:	6079      	str	r1, [r7, #4]
 80012fe:	0152      	lsls	r2, r2, #5
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	08d9      	lsrs	r1, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	0ad9      	lsrs	r1, r3, #11
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	b2ca      	uxtb	r2, r1
 800131e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001320:	8afb      	ldrh	r3, [r7, #22]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	b2d9      	uxtb	r1, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	0cdb      	lsrs	r3, r3, #19
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1c58      	adds	r0, r3, #1
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	430a      	orrs	r2, r1
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001340:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001344:	111b      	asrs	r3, r3, #4
 8001346:	b21b      	sxth	r3, r3
 8001348:	b2da      	uxtb	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	6079      	str	r1, [r7, #4]
 8001350:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001358:	edd7 7a00 	vldr	s15, [r7]
 800135c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d508      	bpl.n	8001378 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3b01      	subs	r3, #1
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001378:	2308      	movs	r3, #8
  }
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3303      	adds	r3, #3
 8001394:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	031b      	lsls	r3, r3, #12
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	051b      	lsls	r3, r3, #20
 80013ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	8afb      	ldrh	r3, [r7, #22]
 80013fe:	4313      	orrs	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8001404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001408:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	82fb      	strh	r3, [r7, #22]
 8001414:	e02c      	b.n	8001470 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 8001416:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800141a:	f240 427e 	movw	r2, #1150	; 0x47e
 800141e:	4293      	cmp	r3, r2
 8001420:	dd04      	ble.n	800142c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 8001422:	23ff      	movs	r3, #255	; 0xff
 8001424:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	e021      	b.n	8001470 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 800142c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001430:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001434:	dd05      	ble.n	8001442 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 8001436:	8afb      	ldrh	r3, [r7, #22]
 8001438:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800143c:	b29b      	uxth	r3, r3
 800143e:	82fb      	strh	r3, [r7, #22]
 8001440:	e016      	b.n	8001470 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 8001442:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001446:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 800144a:	dc02      	bgt.n	8001452 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 800144c:	2300      	movs	r3, #0
 800144e:	82fb      	strh	r3, [r7, #22]
 8001450:	e00e      	b.n	8001470 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001458:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 800145a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800145e:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 8001462:	3301      	adds	r3, #1
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	613b      	str	r3, [r7, #16]
      exp = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001476:	4293      	cmp	r3, r2
 8001478:	d002      	beq.n	8001480 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3301      	adds	r3, #1
 800147e:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 800148a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800148e:	05da      	lsls	r2, r3, #23
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	601a      	str	r2, [r3, #0]
    return 8;
 80014b0:	2308      	movs	r3, #8
  }
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN3ros3MsgC1Ev>:
class Msg
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <_ZN3ros3MsgC1Ev+0x1c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	080085c0 	.word	0x080085c0

08001500 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      data()
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffe8 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffcf 	bl	80014be <_ZN3ros4TimeC1Ev>
    {
    }
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	080085a8 	.word	0x080085a8

08001530 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	b2ca      	uxtb	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	0a19      	lsrs	r1, r3, #8
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	0c19      	lsrs	r1, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3302      	adds	r3, #2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	b2ca      	uxtb	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0e19      	lsrs	r1, r3, #24
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3303      	adds	r3, #3
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	4413      	add	r3, r2
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	4413      	add	r3, r2
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0a19      	lsrs	r1, r3, #8
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	0c19      	lsrs	r1, r3, #16
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3302      	adds	r3, #2
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0e19      	lsrs	r1, r3, #24
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3303      	adds	r3, #3
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	b2ca      	uxtb	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3304      	adds	r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80015d2:	68fb      	ldr	r3, [r7, #12]
    }
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3301      	adds	r3, #1
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	440b      	add	r3, r1
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3302      	adds	r3, #2
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	440b      	add	r3, r1
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3303      	adds	r3, #3
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3301      	adds	r3, #1
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	440b      	add	r3, r1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3302      	adds	r3, #2
 8001670:	6839      	ldr	r1, [r7, #0]
 8001672:	440b      	add	r3, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3303      	adds	r3, #3
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	440b      	add	r3, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3304      	adds	r3, #4
 8001698:	60fb      	str	r3, [r7, #12]
     return offset;
 800169a:	68fb      	ldr	r3, [r7, #12]
    }
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	08008314 	.word	0x08008314

080016c4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	08008324 	.word	0x08008324

080016e0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fef8 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001700:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001706:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a06      	ldr	r2, [pc, #24]	; (8001724 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800170c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    {
    }
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08008590 	.word	0x08008590
 8001724:	08008348 	.word	0x08008348

08001728 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	8899      	ldrh	r1, [r3, #4]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b299      	uxth	r1, r3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3301      	adds	r3, #1
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	4413      	add	r3, r2
 8001754:	b2ca      	uxtb	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	3302      	adds	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd30 	bl	80001c8 <strlen>
 8001768:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	69b9      	ldr	r1, [r7, #24]
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fafc 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	3304      	adds	r3, #4
 800177c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	18d0      	adds	r0, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4619      	mov	r1, r3
 800178c:	f006 fc98 	bl	80080c0 <memcpy>
      offset += length_topic_name;
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4413      	add	r3, r2
 8001796:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd13 	bl	80001c8 <strlen>
 80017a2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fadf 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	18d0      	adds	r0, r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f006 fc7b 	bl	80080c0 <memcpy>
      offset += length_message_type;
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fcf6 	bl	80001c8 <strlen>
 80017dc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fac2 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	3304      	adds	r3, #4
 80017f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	18d0      	adds	r0, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4619      	mov	r1, r3
 8001800:	f006 fc5e 	bl	80080c0 <memcpy>
      offset += length_md5sum;
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4413      	add	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0a19      	lsrs	r1, r3, #8
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0c19      	lsrs	r1, r3, #16
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3302      	adds	r3, #2
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0e19      	lsrs	r1, r3, #24
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3303      	adds	r3, #3
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	61fb      	str	r3, [r7, #28]
      return offset;
 8001854:	69fb      	ldr	r3, [r7, #28]
    }
 8001856:	4618      	mov	r0, r3
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800185e:	b580      	push	{r7, lr}
 8001860:	b08a      	sub	sp, #40	; 0x28
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	b21a      	sxth	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	3301      	adds	r3, #1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440b      	add	r3, r1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3302      	adds	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	441a      	add	r2, r3
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fa7f 	bl	8002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	3304      	adds	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	e00b      	b.n	80018d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	441a      	add	r2, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	3b01      	subs	r3, #1
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	440b      	add	r3, r1
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4413      	add	r3, r2
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3ed      	bcc.n	80018bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	4413      	add	r3, r2
 80018e6:	3b01      	subs	r3, #1
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	441a      	add	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4413      	add	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	441a      	add	r2, r3
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fa4c 	bl	8002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	3304      	adds	r3, #4
 800191a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	e00b      	b.n	800193a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	441a      	add	r2, r3
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	3b01      	subs	r3, #1
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	440b      	add	r3, r1
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	3301      	adds	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3ed      	bcc.n	8001922 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	3b01      	subs	r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3b01      	subs	r3, #1
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	441a      	add	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	441a      	add	r2, r3
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fa19 	bl	8002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	3304      	adds	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e00b      	b.n	80019a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	441a      	add	r2, r3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b01      	subs	r3, #1
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	440b      	add	r3, r1
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3ed      	bcc.n	8001988 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	3b01      	subs	r3, #1
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	3b01      	subs	r3, #1
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	441a      	add	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	440a      	add	r2, r1
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3301      	adds	r3, #1
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	440b      	add	r3, r1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	3302      	adds	r3, #2
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	440b      	add	r3, r1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3303      	adds	r3, #3
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	440b      	add	r3, r1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	061b      	lsls	r3, r3, #24
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	3304      	adds	r3, #4
 8001a22:	61bb      	str	r3, [r7, #24]
     return offset;
 8001a24:	69bb      	ldr	r3, [r7, #24]
    }
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	0800834c 	.word	0x0800834c

08001a4c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08008368 	.word	0x08008368

08001a68 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd34 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
      level(0),
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	711a      	strb	r2, [r3, #4]
      msg("")
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001a88:	609a      	str	r2, [r3, #8]
    {
    }
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08008578 	.word	0x08008578
 8001a98:	08008348 	.word	0x08008348

08001a9c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	7912      	ldrb	r2, [r2, #4]
 8001ab4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb81 	bl	80001c8 <strlen>
 8001ac6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 f94d 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	18d0      	adds	r0, r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f006 fae9 	bl	80080c0 <memcpy>
      offset += length_msg;
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001af6:	68fb      	ldr	r3, [r7, #12]
    }
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	441a      	add	r2, r3
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 f93e 	bl	8002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3304      	adds	r3, #4
 8001b36:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00b      	b.n	8001b56 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	441a      	add	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	440b      	add	r3, r1
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3ed      	bcc.n	8001b3e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
     return offset;
 8001b86:	693b      	ldr	r3, [r7, #16]
    }
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0800838c 	.word	0x0800838c

08001bac <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	080083a0 	.word	0x080083a0

08001bc8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fc84 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08008560 	.word	0x08008560

08001c24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0a19      	lsrs	r1, r3, #8
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0c19      	lsrs	r1, r3, #16
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0e19      	lsrs	r1, r3, #24
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3303      	adds	r3, #3
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3304      	adds	r3, #4
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	e02a      	b.n	8001cd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	0a19      	lsrs	r1, r3, #8
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	0c19      	lsrs	r1, r3, #16
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	0e19      	lsrs	r1, r3, #24
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3304      	adds	r3, #4
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3cf      	bcc.n	8001c82 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	0a19      	lsrs	r1, r3, #8
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	0c19      	lsrs	r1, r3, #16
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b2ca      	uxtb	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	0e19      	lsrs	r1, r3, #24
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	3304      	adds	r3, #4
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e02a      	b.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	0a19      	lsrs	r1, r3, #8
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0c19      	lsrs	r1, r3, #16
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3302      	adds	r3, #2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0e19      	lsrs	r1, r3, #24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3303      	adds	r3, #3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	b2ca      	uxtb	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3304      	adds	r3, #4
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3cf      	bcc.n	8001d32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69d9      	ldr	r1, [r3, #28]
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	0a19      	lsrs	r1, r3, #8
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	0c19      	lsrs	r1, r3, #16
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3302      	adds	r3, #2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	0e19      	lsrs	r1, r3, #24
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3303      	adds	r3, #3
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3304      	adds	r3, #4
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e027      	b.n	8001e32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe f9ea 	bl	80001c8 <strlen>
 8001df4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ffb6 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3304      	adds	r3, #4
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	18d0      	adds	r0, r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f006 f94e 	bl	80080c0 <memcpy>
      offset += length_stringsi;
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4413      	add	r3, r2
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3d2      	bcc.n	8001de2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b08e      	sub	sp, #56	; 0x38
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	3301      	adds	r3, #1
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	6a3a      	ldr	r2, [r7, #32]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	3302      	adds	r3, #2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	3303      	adds	r3, #3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	6a3a      	ldr	r2, [r7, #32]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	3304      	adds	r3, #4
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	6a3a      	ldr	r2, [r7, #32]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d90a      	bls.n	8001eba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f006 f89a 	bl	8007fe8 <realloc>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec4:	e035      	b.n	8001f32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	3301      	adds	r3, #1
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	440b      	add	r3, r1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	3302      	adds	r3, #2
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	3303      	adds	r3, #3
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	440b      	add	r3, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3304      	adds	r3, #4
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	3301      	adds	r3, #1
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d3c4      	bcc.n	8001ec6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	3301      	adds	r3, #1
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	3304      	adds	r3, #4
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d90a      	bls.n	8001fa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f006 f826 	bl	8007fe8 <realloc>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fac:	e035      	b.n	800201a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	440a      	add	r2, r1
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	440b      	add	r3, r1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	440b      	add	r3, r1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	3303      	adds	r3, #3
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	440b      	add	r3, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	3214      	adds	r2, #20
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	3301      	adds	r3, #1
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002020:	429a      	cmp	r2, r3
 8002022:	d3c4      	bcc.n	8001fae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	3304      	adds	r3, #4
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	429a      	cmp	r2, r3
 8002072:	d90a      	bls.n	800208a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f005 ffb2 	bl	8007fe8 <realloc>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	e03e      	b.n	8002114 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	441a      	add	r2, r3
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fe83 	bl	8002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	3304      	adds	r3, #4
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e00b      	b.n	80020cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	441a      	add	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3b01      	subs	r3, #1
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	440b      	add	r3, r1
 80020c2:	7812      	ldrb	r2, [r2, #0]
 80020c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d3ed      	bcc.n	80020b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80020d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	3b01      	subs	r3, #1
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	3b01      	subs	r3, #1
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80020f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	3220      	adds	r2, #32
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	3301      	adds	r3, #1
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211a:	429a      	cmp	r2, r3
 800211c:	d3bb      	bcc.n	8002096 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002120:	4618      	mov	r0, r3
 8002122:	3738      	adds	r7, #56	; 0x38
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	080084b4 	.word	0x080084b4

08002144 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	080083c4 	.word	0x080083c4

08002160 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
  }
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f9ac 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
      x(0),
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
      y(0),
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
      z(0)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    {
    }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	0800851c 	.word	0x0800851c

080021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	441a      	add	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	4610      	mov	r0, r2
 80021d4:	f7ff f83b 	bl	800124e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ec:	eeb0 0a67 	vmov.f32	s0, s15
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff f82c 	bl	800124e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	441a      	add	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7a03 	vldr	s15, [r3, #12]
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	4610      	mov	r0, r2
 8002210:	f7ff f81d 	bl	800124e <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
      return offset;
 800221c:	68fb      	ldr	r3, [r7, #12]
    }
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7ff f8a0 	bl	8001386 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	441a      	add	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3308      	adds	r3, #8
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f7ff f893 	bl	8001386 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	330c      	adds	r3, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7ff f886 	bl	8001386 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
     return offset;
 8002282:	68fb      	ldr	r3, [r7, #12]
    }
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	080083e8 	.word	0x080083e8

080022a8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	08008400 	.word	0x08008400

080022c4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f906 	bl	80014e0 <_ZN3ros3MsgC1Ev>
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
      linear(),
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff4a 	bl	8002178 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3314      	adds	r3, #20
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff45 	bl	8002178 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08008504 	.word	0x08008504

080022fc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1d18      	adds	r0, r3, #4
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7ff ff4d 	bl	80021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f103 0014 	add.w	r0, r3, #20
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4413      	add	r3, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7ff ff40 	bl	80021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
      return offset;
 800233c:	68fb      	ldr	r3, [r7, #12]
    }
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1d18      	adds	r0, r3, #4
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	4413      	add	r3, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7ff ff61 	bl	8002226 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f103 0014 	add.w	r0, r3, #20
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7ff ff54 	bl	8002226 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
     return offset;
 8002386:	68fb      	ldr	r3, [r7, #12]
    }
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	08008424 	.word	0x08008424

080023ac <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	08008438 	.word	0x08008438

080023c8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	0800854c 	.word	0x0800854c

080023e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffe8 	bl	80023c8 <_ZN3ros15NodeHandleBase_C1Ev>
 80023f8:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fedc 	bl	80011c0 <_ZN13STM32HardwareC1Ev>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3318      	adds	r3, #24
 8002424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f005 fe13 	bl	8008056 <memset>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fe0a 	bl	8008056 <memset>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002448:	2264      	movs	r2, #100	; 0x64
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f005 fe02 	bl	8008056 <memset>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8002458:	2264      	movs	r2, #100	; 0x64
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f005 fdfa 	bl	8008056 <memset>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fb85 	bl	8001bc8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	080084f0 	.word	0x080084f0

080024cc <HAL_GPIO_EXTI_Callback>:
float vels[4]; // [FR, FL, RL, RR]
int16_t angs[4]; // [FR, FL, RL, RR]
int16_t fr = 0, fl = 0, rl = 0, rr = 0;
int16_t fr_s, fl_s, rl_s, rr_s = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == steer_fr_ChannelA_Pin)
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d172      	bne.n	80025c2 <HAL_GPIO_EXTI_Callback+0xf6>
	{
		if(HAL_GPIO_ReadPin(steer_fr_ChannelA_GPIO_Port, steer_fr_ChannelA_Pin) == 1)
 80024dc:	2101      	movs	r1, #1
 80024de:	4892      	ldr	r0, [pc, #584]	; (8002728 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024e0:	f002 feaa 	bl	8005238 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02c      	beq.n	800254e <HAL_GPIO_EXTI_Callback+0x82>
		{
			if(HAL_GPIO_ReadPin(steer_fr_ChannelB_GPIO_Port, steer_fr_ChannelB_Pin) == 1) fr++;
 80024f4:	2101      	movs	r1, #1
 80024f6:	488d      	ldr	r0, [pc, #564]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 80024f8:	f002 fe9e 	bl	8005238 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HAL_GPIO_EXTI_Callback+0x54>
 800250c:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 800250e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002512:	b29b      	uxth	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	b29b      	uxth	r3, r3
 8002518:	b21a      	sxth	r2, r3
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 800251c:	801a      	strh	r2, [r3, #0]
		{
			if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 1) rr++;
			else if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 0) rr--;
		}
	}
}
 800251e:	e1b8      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_fr_ChannelB_GPIO_Port, steer_fr_ChannelB_Pin) == 0) fr--;
 8002520:	2101      	movs	r1, #1
 8002522:	4882      	ldr	r0, [pc, #520]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 8002524:	f002 fe88 	bl	8005238 <HAL_GPIO_ReadPin>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 81ac 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29b      	uxth	r3, r3
 8002546:	b21a      	sxth	r2, r3
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 800254a:	801a      	strh	r2, [r3, #0]
}
 800254c:	e1a1      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
		else if(HAL_GPIO_ReadPin(steer_fr_ChannelA_GPIO_Port, steer_fr_ChannelA_Pin) == 0)
 800254e:	2101      	movs	r1, #1
 8002550:	4875      	ldr	r0, [pc, #468]	; (8002728 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002552:	f002 fe71 	bl	8005238 <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8195 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			if(HAL_GPIO_ReadPin(steer_fr_ChannelB_GPIO_Port, steer_fr_ChannelB_Pin) == 0) fr++;
 8002568:	2101      	movs	r1, #1
 800256a:	4870      	ldr	r0, [pc, #448]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 800256c:	f002 fe64 	bl	8005238 <HAL_GPIO_ReadPin>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_GPIO_EXTI_Callback+0xc8>
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	b29b      	uxth	r3, r3
 8002588:	3301      	adds	r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 8002590:	801a      	strh	r2, [r3, #0]
}
 8002592:	e17e      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_fr_ChannelB_GPIO_Port, steer_fr_ChannelB_Pin) == 1) fr--;
 8002594:	2101      	movs	r1, #1
 8002596:	4865      	ldr	r0, [pc, #404]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 8002598:	f002 fe4e 	bl	8005238 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8172 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	b21a      	sxth	r2, r3
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_GPIO_EXTI_Callback+0x264>)
 80025be:	801a      	strh	r2, [r3, #0]
}
 80025c0:	e167      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
	else if(GPIO_PIN == steer_fl_ChannelA_Pin)
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d172      	bne.n	80026ae <HAL_GPIO_EXTI_Callback+0x1e2>
		if(HAL_GPIO_ReadPin(steer_fl_ChannelA_GPIO_Port, steer_fl_ChannelA_Pin) == 1)
 80025c8:	2102      	movs	r1, #2
 80025ca:	4857      	ldr	r0, [pc, #348]	; (8002728 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025cc:	f002 fe34 	bl	8005238 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02c      	beq.n	800263a <HAL_GPIO_EXTI_Callback+0x16e>
			if(HAL_GPIO_ReadPin(steer_fl_ChannelB_GPIO_Port, steer_fl_ChannelB_Pin) == 0) fl++;
 80025e0:	2102      	movs	r1, #2
 80025e2:	4852      	ldr	r0, [pc, #328]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 80025e4:	f002 fe28 	bl	8005238 <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_GPIO_EXTI_Callback+0x140>
 80025f8:	4b4e      	ldr	r3, [pc, #312]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 80025fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	b21a      	sxth	r2, r3
 8002606:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 8002608:	801a      	strh	r2, [r3, #0]
}
 800260a:	e142      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_fl_ChannelB_GPIO_Port, steer_fl_ChannelB_Pin) == 1) fl--;
 800260c:	2102      	movs	r1, #2
 800260e:	4847      	ldr	r0, [pc, #284]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 8002610:	f002 fe12 	bl	8005238 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8136 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	b21a      	sxth	r2, r3
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 8002636:	801a      	strh	r2, [r3, #0]
}
 8002638:	e12b      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
		else if(HAL_GPIO_ReadPin(steer_fl_ChannelA_GPIO_Port, steer_fl_ChannelA_Pin) == 0)
 800263a:	2102      	movs	r1, #2
 800263c:	483a      	ldr	r0, [pc, #232]	; (8002728 <HAL_GPIO_EXTI_Callback+0x25c>)
 800263e:	f002 fdfb 	bl	8005238 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 811f 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			if(HAL_GPIO_ReadPin(steer_fl_ChannelB_GPIO_Port, steer_fl_ChannelB_Pin) == 1) fl++;
 8002654:	2102      	movs	r1, #2
 8002656:	4835      	ldr	r0, [pc, #212]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 8002658:	f002 fdee 	bl	8005238 <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_GPIO_EXTI_Callback+0x1b4>
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002672:	b29b      	uxth	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	b29b      	uxth	r3, r3
 8002678:	b21a      	sxth	r2, r3
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 800267c:	801a      	strh	r2, [r3, #0]
}
 800267e:	e108      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_fl_ChannelB_GPIO_Port, steer_fl_ChannelB_Pin) == 0) fl--;
 8002680:	2102      	movs	r1, #2
 8002682:	482a      	ldr	r0, [pc, #168]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 8002684:	f002 fdd8 	bl	8005238 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80fc 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_GPIO_EXTI_Callback+0x268>)
 80026aa:	801a      	strh	r2, [r3, #0]
}
 80026ac:	e0f1      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
	else if(GPIO_PIN == steer_rl_ChannelA_Pin)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d17c      	bne.n	80027ae <HAL_GPIO_EXTI_Callback+0x2e2>
		if(HAL_GPIO_ReadPin(steer_rl_ChannelA_GPIO_Port, steer_rl_ChannelA_Pin) == 1)
 80026b4:	2104      	movs	r1, #4
 80026b6:	481c      	ldr	r0, [pc, #112]	; (8002728 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026b8:	f002 fdbe 	bl	8005238 <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d037      	beq.n	800273c <HAL_GPIO_EXTI_Callback+0x270>
			if(HAL_GPIO_ReadPin(steer_rl_ChannelB_GPIO_Port, steer_rl_ChannelB_Pin) == 0) rl++;
 80026cc:	2104      	movs	r1, #4
 80026ce:	4817      	ldr	r0, [pc, #92]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 80026d0:	f002 fdb2 	bl	8005238 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_GPIO_EXTI_Callback+0x22c>
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_GPIO_EXTI_Callback+0x26c>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_GPIO_EXTI_Callback+0x26c>)
 80026f4:	801a      	strh	r2, [r3, #0]
}
 80026f6:	e0cc      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_rl_ChannelB_GPIO_Port, steer_rl_ChannelB_Pin) == 1) rl--;
 80026f8:	2104      	movs	r1, #4
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <HAL_GPIO_EXTI_Callback+0x260>)
 80026fc:	f002 fd9c 	bl	8005238 <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80c0 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002722:	801a      	strh	r2, [r3, #0]
}
 8002724:	e0b5      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40020c00 	.word	0x40020c00
 8002730:	200009d0 	.word	0x200009d0
 8002734:	200009d2 	.word	0x200009d2
 8002738:	200009d4 	.word	0x200009d4
		else if(HAL_GPIO_ReadPin(steer_rl_ChannelA_GPIO_Port, steer_rl_ChannelA_Pin) == 0)
 800273c:	2104      	movs	r1, #4
 800273e:	4857      	ldr	r0, [pc, #348]	; (800289c <HAL_GPIO_EXTI_Callback+0x3d0>)
 8002740:	f002 fd7a 	bl	8005238 <HAL_GPIO_ReadPin>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 809e 	beq.w	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			if(HAL_GPIO_ReadPin(steer_rl_ChannelB_GPIO_Port, steer_rl_ChannelB_Pin) == 1) rl++;
 8002756:	2104      	movs	r1, #4
 8002758:	4851      	ldr	r0, [pc, #324]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 800275a:	f002 fd6d 	bl	8005238 <HAL_GPIO_ReadPin>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_GPIO_EXTI_Callback+0x2b6>
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8002770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002774:	b29b      	uxth	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	b29b      	uxth	r3, r3
 800277a:	b21a      	sxth	r2, r3
 800277c:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 800277e:	801a      	strh	r2, [r3, #0]
}
 8002780:	e087      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_rl_ChannelB_GPIO_Port, steer_rl_ChannelB_Pin) == 0) rl--;
 8002782:	2104      	movs	r1, #4
 8002784:	4846      	ldr	r0, [pc, #280]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002786:	f002 fd57 	bl	8005238 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07b      	beq.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80027aa:	801a      	strh	r2, [r3, #0]
}
 80027ac:	e071      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
	else if(GPIO_PIN == steer_rr_ChannelA_Pin)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d16e      	bne.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
		if(HAL_GPIO_ReadPin(steer_rr_ChannelA_GPIO_Port, steer_rr_ChannelA_Pin) == 1)
 80027b4:	2108      	movs	r1, #8
 80027b6:	4839      	ldr	r0, [pc, #228]	; (800289c <HAL_GPIO_EXTI_Callback+0x3d0>)
 80027b8:	f002 fd3e 	bl	8005238 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02b      	beq.n	8002824 <HAL_GPIO_EXTI_Callback+0x358>
			if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 0) rr++;
 80027cc:	2108      	movs	r1, #8
 80027ce:	4834      	ldr	r0, [pc, #208]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80027d0:	f002 fd32 	bl	8005238 <HAL_GPIO_ReadPin>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <HAL_GPIO_EXTI_Callback+0x32c>
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 80027e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 80027f4:	801a      	strh	r2, [r3, #0]
}
 80027f6:	e04c      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 1) rr--;
 80027f8:	2108      	movs	r1, #8
 80027fa:	4829      	ldr	r0, [pc, #164]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80027fc:	f002 fd1c 	bl	8005238 <HAL_GPIO_ReadPin>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d040      	beq.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29b      	uxth	r3, r3
 800281c:	b21a      	sxth	r2, r3
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002820:	801a      	strh	r2, [r3, #0]
}
 8002822:	e036      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
		else if(HAL_GPIO_ReadPin(steer_rr_ChannelA_GPIO_Port, steer_rr_ChannelA_Pin) == 0)
 8002824:	2108      	movs	r1, #8
 8002826:	481d      	ldr	r0, [pc, #116]	; (800289c <HAL_GPIO_EXTI_Callback+0x3d0>)
 8002828:	f002 fd06 	bl	8005238 <HAL_GPIO_ReadPin>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02a      	beq.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 1) rr++;
 800283c:	2108      	movs	r1, #8
 800283e:	4818      	ldr	r0, [pc, #96]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8002840:	f002 fcfa 	bl	8005238 <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_GPIO_EXTI_Callback+0x39c>
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285a:	b29b      	uxth	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	b21a      	sxth	r2, r3
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002864:	801a      	strh	r2, [r3, #0]
}
 8002866:	e014      	b.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
			else if(HAL_GPIO_ReadPin(steer_rr_ChannelB_GPIO_Port, steer_rr_ChannelB_Pin) == 0) rr--;
 8002868:	2108      	movs	r1, #8
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x3d4>)
 800286c:	f002 fce4 	bl	8005238 <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_GPIO_EXTI_Callback+0x3c6>
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8002890:	801a      	strh	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	200009d4 	.word	0x200009d4
 80028a8:	200009d6 	.word	0x200009d6
 80028ac:	00000000 	.word	0x00000000

080028b0 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:

void cmd_vel_cb(const geometry_msgs::Twist& msg)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

	float x = msg.linear.x;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	61bb      	str	r3, [r7, #24]
	float y = msg.linear.y;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	617b      	str	r3, [r7, #20]
	float a = sqrtf(x*x + y*y);
 80028c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80028c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	eeb0 0a67 	vmov.f32	s0, s15
 80028dc:	f005 fa88 	bl	8007df0 <sqrtf>
 80028e0:	ed87 0a04 	vstr	s0, [r7, #16]
	int16_t sign;
	if (a == 0)
 80028e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d115      	bne.n	800291e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x6e>
	{
		for(int i = 0; i < 4; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e00e      	b.n	8002916 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x66>
		{
			vels[i] = 0;
 80028f8:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b0>)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
			angs[i] = 0;
 8002906:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2100      	movs	r1, #0
 800290c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	2b03      	cmp	r3, #3
 800291a:	dded      	ble.n	80028f8 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x48>
 800291c:	e090      	b.n	8002a40 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x190>
		}
	}

	else if ((x == 0))
 800291e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002922:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	d134      	bne.n	8002996 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xe6>
	{

		sign = y > 0 ? 1 : -1;
 800292c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd01      	ble.n	800293e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x8e>
 800293a:	2301      	movs	r3, #1
 800293c:	e001      	b.n	8002942 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x92>
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	81fb      	strh	r3, [r7, #14]
		for(int i = 0; i < 4; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	e021      	b.n	800298e <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xde>
		{
			vels[i] = a;
 800294a:	4a45      	ldr	r2, [pc, #276]	; (8002a60 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b0>)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]
			angs[i] = sign * 250 * 0.4; //0.4 Maps Ticks to PWM
 8002956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800295a:	22fa      	movs	r2, #250	; 0xfa
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd feb5 	bl	80006d0 <__aeabi_i2d>
 8002966:	a33a      	add	r3, pc, #232	; (adr r3, 8002a50 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1a0>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fc34 	bl	80001d8 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fd ff14 	bl	80007a4 <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	b219      	sxth	r1, r3
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	3301      	adds	r3, #1
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2b03      	cmp	r3, #3
 8002992:	ddda      	ble.n	800294a <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x9a>
 8002994:	e054      	b.n	8002a40 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x190>
		}

	}
	else
	{
		sign = x > 0 ? 1 : -1;
 8002996:	edd7 7a06 	vldr	s15, [r7, #24]
 800299a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	dd01      	ble.n	80029a8 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xf8>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e001      	b.n	80029ac <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0xfc>
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ac:	81fb      	strh	r3, [r7, #14]
		int ang = (159.16) * atan(y/x);
 80029ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80029b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029ba:	eeb0 0a66 	vmov.f32	s0, s13
 80029be:	f7fe fbee 	bl	800119e <_ZSt4atanf>
 80029c2:	ee10 3a10 	vmov	r3, s0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fe94 	bl	80006f4 <__aeabi_f2d>
 80029cc:	a322      	add	r3, pc, #136	; (adr r3, 8002a58 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1a8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fc01 	bl	80001d8 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f7fd fee1 	bl	80007a4 <__aeabi_d2iz>
 80029e2:	4603      	mov	r3, r0
 80029e4:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < 4; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e026      	b.n	8002a3a <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x18a>
		{
			vels[i] = sign * a;
 80029ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b0>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	edc3 7a00 	vstr	s15, [r3]
			angs[i] = 0.4 * ang; //0.4 Maps Ticks to PWM
 8002a0c:	68b8      	ldr	r0, [r7, #8]
 8002a0e:	f7fd fe5f 	bl	80006d0 <__aeabi_i2d>
 8002a12:	a30f      	add	r3, pc, #60	; (adr r3, 8002a50 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1a0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fbde 	bl	80001d8 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fd febe 	bl	80007a4 <__aeabi_d2iz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b219      	sxth	r1, r3
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b4>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 4; i++)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	ddd5      	ble.n	80029ec <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x13c>
		}
	}
	nh.loginfo("Message Received");
 8002a40:	4909      	ldr	r1, [pc, #36]	; (8002a68 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1b8>)
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x1bc>)
 8002a44:	f000 f9d9 	bl	8002dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	9999999a 	.word	0x9999999a
 8002a54:	3fd99999 	.word	0x3fd99999
 8002a58:	b851eb85 	.word	0xb851eb85
 8002a5c:	4063e51e 	.word	0x4063e51e
 8002a60:	200009b8 	.word	0x200009b8
 8002a64:	200009c8 	.word	0x200009c8
 8002a68:	0800845c 	.word	0x0800845c
 8002a6c:	20000488 	.word	0x20000488

08002a70 <setup>:
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );



void setup()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	nh.initNode();
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <setup+0x18>)
 8002a76:	f000 fa03 	bl	8002e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <setup+0x1c>)
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <setup+0x18>)
 8002a7e:	f000 fa1c 	bl	8002eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000488 	.word	0x20000488
 8002a8c:	200009e0 	.word	0x200009e0

08002a90 <loop>:


void loop()
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002a94:	48a6      	ldr	r0, [pc, #664]	; (8002d30 <loop+0x2a0>)
 8002a96:	f000 fa3d 	bl	8002f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//FR
	TIM1->CCR1 = vels[0] >= 0 ? vels[0] * 100  : 0;
 8002a9a:	4ba6      	ldr	r3, [pc, #664]	; (8002d34 <loop+0x2a4>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	db0b      	blt.n	8002ac2 <loop+0x32>
 8002aaa:	4ba2      	ldr	r3, [pc, #648]	; (8002d34 <loop+0x2a4>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002d38 <loop+0x2a8>
 8002ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abc:	ee17 2a90 	vmov	r2, s15
 8002ac0:	e000      	b.n	8002ac4 <loop+0x34>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4b9d      	ldr	r3, [pc, #628]	; (8002d3c <loop+0x2ac>)
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = vels[0] < 0 ? -vels[0] * 100  : 0;
 8002ac8:	4b9a      	ldr	r3, [pc, #616]	; (8002d34 <loop+0x2a4>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d50d      	bpl.n	8002af4 <loop+0x64>
 8002ad8:	4b96      	ldr	r3, [pc, #600]	; (8002d34 <loop+0x2a4>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	eef1 7a67 	vneg.f32	s15, s15
 8002ae2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002d38 <loop+0x2a8>
 8002ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aee:	ee17 2a90 	vmov	r2, s15
 8002af2:	e000      	b.n	8002af6 <loop+0x66>
 8002af4:	2200      	movs	r2, #0
 8002af6:	4b91      	ldr	r3, [pc, #580]	; (8002d3c <loop+0x2ac>)
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
	//FL
	TIM1->CCR3 = vels[1] >= 0 ? vels[1] * 100  : 0;
 8002afa:	4b8e      	ldr	r3, [pc, #568]	; (8002d34 <loop+0x2a4>)
 8002afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	db0b      	blt.n	8002b22 <loop+0x92>
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <loop+0x2a4>)
 8002b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b10:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002d38 <loop+0x2a8>
 8002b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1c:	ee17 2a90 	vmov	r2, s15
 8002b20:	e000      	b.n	8002b24 <loop+0x94>
 8002b22:	2200      	movs	r2, #0
 8002b24:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <loop+0x2ac>)
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = vels[1] < 0 ? -vels[0] * 100  : 0;
 8002b28:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <loop+0x2a4>)
 8002b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d50d      	bpl.n	8002b54 <loop+0xc4>
 8002b38:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <loop+0x2a4>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	eef1 7a67 	vneg.f32	s15, s15
 8002b42:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002d38 <loop+0x2a8>
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4e:	ee17 2a90 	vmov	r2, s15
 8002b52:	e000      	b.n	8002b56 <loop+0xc6>
 8002b54:	2200      	movs	r2, #0
 8002b56:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <loop+0x2ac>)
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
	//RL
	TIM3->CCR1 = vels[2] >= 0 ? vels[2] * 100  : 0;
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <loop+0x2a4>)
 8002b5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	db0b      	blt.n	8002b82 <loop+0xf2>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <loop+0x2a4>)
 8002b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b70:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002d38 <loop+0x2a8>
 8002b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7c:	ee17 2a90 	vmov	r2, s15
 8002b80:	e000      	b.n	8002b84 <loop+0xf4>
 8002b82:	2200      	movs	r2, #0
 8002b84:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <loop+0x2b0>)
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = vels[2] < 0 ? -vels[0] * 100  : 0;
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <loop+0x2a4>)
 8002b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	d50d      	bpl.n	8002bb4 <loop+0x124>
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <loop+0x2a4>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eef1 7a67 	vneg.f32	s15, s15
 8002ba2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002d38 <loop+0x2a8>
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	ee17 2a90 	vmov	r2, s15
 8002bb2:	e000      	b.n	8002bb6 <loop+0x126>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <loop+0x2b0>)
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
	//RR
	TIM3->CCR3 = vels[3] >= 0 ? vels[3] * 100  : 0;
 8002bba:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <loop+0x2a4>)
 8002bbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	db0b      	blt.n	8002be2 <loop+0x152>
 8002bca:	4b5a      	ldr	r3, [pc, #360]	; (8002d34 <loop+0x2a4>)
 8002bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bd0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002d38 <loop+0x2a8>
 8002bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bdc:	ee17 2a90 	vmov	r2, s15
 8002be0:	e000      	b.n	8002be4 <loop+0x154>
 8002be2:	2200      	movs	r2, #0
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <loop+0x2b0>)
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = vels[3] < 0 ? -vels[0] * 100  : 0;
 8002be8:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <loop+0x2a4>)
 8002bea:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d50d      	bpl.n	8002c14 <loop+0x184>
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <loop+0x2a4>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eef1 7a67 	vneg.f32	s15, s15
 8002c02:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002d38 <loop+0x2a8>
 8002c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c0e:	ee17 2a90 	vmov	r2, s15
 8002c12:	e000      	b.n	8002c16 <loop+0x186>
 8002c14:	2200      	movs	r2, #0
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <loop+0x2b0>)
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

	fr_s = angs[0] - fr;
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <loop+0x2b4>)
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <loop+0x2b8>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <loop+0x2bc>)
 8002c32:	801a      	strh	r2, [r3, #0]
	fl_s = angs[1] - fl;
 8002c34:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <loop+0x2b4>)
 8002c36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <loop+0x2c0>)
 8002c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <loop+0x2c4>)
 8002c4c:	801a      	strh	r2, [r3, #0]
	rl_s = angs[2] - rl;
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <loop+0x2b4>)
 8002c50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <loop+0x2c8>)
 8002c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <loop+0x2cc>)
 8002c66:	801a      	strh	r2, [r3, #0]
	rr_s = angs[3] - rr;
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <loop+0x2b4>)
 8002c6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <loop+0x2d0>)
 8002c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <loop+0x2d4>)
 8002c80:	801a      	strh	r2, [r3, #0]

	//FR
	TIM4->CCR1 = fr_s >= 0 ? fr_s : 0;
 8002c82:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <loop+0x2bc>)
 8002c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002c8c:	b21a      	sxth	r2, r3
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <loop+0x2d8>)
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = fr_s < 0 ? -fr_s : 0;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <loop+0x2bc>)
 8002c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da04      	bge.n	8002ca6 <loop+0x216>
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <loop+0x2bc>)
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca2:	425b      	negs	r3, r3
 8002ca4:	e000      	b.n	8002ca8 <loop+0x218>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <loop+0x2d8>)
 8002caa:	6393      	str	r3, [r2, #56]	; 0x38
	//FL
	TIM4->CCR3 = fl_s >= 0 ? fl_s : 0;
 8002cac:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <loop+0x2c4>)
 8002cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <loop+0x2d8>)
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = fl_s < 0 ? -fl_s : 0;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <loop+0x2c4>)
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da04      	bge.n	8002cd0 <loop+0x240>
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <loop+0x2c4>)
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	425b      	negs	r3, r3
 8002cce:	e000      	b.n	8002cd2 <loop+0x242>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <loop+0x2d8>)
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
	//RL
	TIM8->CCR1 = rl_s >= 0 ? rl_s : 0;
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <loop+0x2cc>)
 8002cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <loop+0x2dc>)
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR2 = rl_s < 0 ? -rl_s : 0;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <loop+0x2cc>)
 8002ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da04      	bge.n	8002cfa <loop+0x26a>
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <loop+0x2cc>)
 8002cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	e000      	b.n	8002cfc <loop+0x26c>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <loop+0x2dc>)
 8002cfe:	6393      	str	r3, [r2, #56]	; 0x38
	//RR
	TIM8->CCR3 = rr_s >= 0 ? rr_s : 0;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <loop+0x2d4>)
 8002d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <loop+0x2dc>)
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM8->CCR4 = rr_s < 0 ? -rr_s : 0;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <loop+0x2d4>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da04      	bge.n	8002d24 <loop+0x294>
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <loop+0x2d4>)
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	425b      	negs	r3, r3
 8002d22:	e000      	b.n	8002d26 <loop+0x296>
 8002d24:	2300      	movs	r3, #0
 8002d26:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <loop+0x2dc>)
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40

}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000488 	.word	0x20000488
 8002d34:	200009b8 	.word	0x200009b8
 8002d38:	42c80000 	.word	0x42c80000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	200009c8 	.word	0x200009c8
 8002d48:	200009d0 	.word	0x200009d0
 8002d4c:	200009d8 	.word	0x200009d8
 8002d50:	200009d2 	.word	0x200009d2
 8002d54:	200009da 	.word	0x200009da
 8002d58:	200009d4 	.word	0x200009d4
 8002d5c:	200009dc 	.word	0x200009dc
 8002d60:	200009d6 	.word	0x200009d6
 8002d64:	200009de 	.word	0x200009de
 8002d68:	40000800 	.word	0x40000800
 8002d6c:	40010400 	.word	0x40010400

08002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e00c      	b.n	8002d9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	fa22 f103 	lsr.w	r1, r2, r3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b2ca      	uxtb	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d9ef      	bls.n	8002d80 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e010      	b.n	8002de6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	440a      	add	r2, r1
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	00d2      	lsls	r2, r2, #3
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d9eb      	bls.n	8002dc4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	2101      	movs	r1, #1
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa56 	bl	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	08008534 	.word	0x08008534

08002e38 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ffe5 	bl	8002e18 <_ZN3ros11Subscriber_C1Ev>
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	330c      	adds	r3, #12
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fa33 	bl	80022c4 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
  };
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	080084d8 	.word	0x080084d8

08002e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f9a7 	bl	80011e0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e01a      	b.n	8002f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
      if (subscribers[i] == 0) // empty slot
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10e      	bne.n	8002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
        subscribers[i] = &s;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
        return true;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e006      	b.n	8002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b18      	cmp	r3, #24
 8002f04:	dde1      	ble.n	8002eca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
    return false;
 8002f06:	2300      	movs	r3, #0
  }
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe f989 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 8002f26:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d903      	bls.n	8002f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d903      	bls.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f963 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	bf8c      	ite	hi
 8002f80:	2301      	movhi	r3, #1
 8002f82:	2300      	movls	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002f8a:	f06f 0301 	mvn.w	r3, #1
 8002f8e:	e190      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f930 	bl	80011fa <_ZN13STM32Hardware4readEv>
 8002f9a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f2c0 8170 	blt.w	8003284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fba:	2b07      	cmp	r3, #7
 8002fbc:	d11d      	bne.n	8002ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002fc4:	1c59      	adds	r1, r3, #1
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	b2d1      	uxtb	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002fde:	1e5a      	subs	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1b7      	bne.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002ff8:	e7b2      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d128      	bne.n	8003056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d10d      	bne.n	8003026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f103 0214 	add.w	r2, r3, #20
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003024:	e79c      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f904 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	bf8c      	ite	hi
 800303e:	2301      	movhi	r3, #1
 8003040:	2300      	movls	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d08b      	beq.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8003050:	f06f 0301 	mvn.w	r3, #1
 8003054:	e12d      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d118      	bne.n	8003092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2bfe      	cmp	r3, #254	; 0xfe
 8003064:	d107      	bne.n	8003076 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003074:	e774      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f af6b 	bne.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f931 	bl	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003090:	e766      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003098:	2b02      	cmp	r3, #2
 800309a:	d113      	bne.n	80030c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80030c2:	e74d      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d110      	bne.n	80030f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80030ee:	e737      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d116      	bne.n	8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003100:	425a      	negs	r2, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	bf58      	it	pl
 8003108:	4253      	negpl	r3, r2
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d107      	bne.n	800311e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800311c:	e720      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003126:	e71b      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800312e:	2b05      	cmp	r3, #5
 8003130:	d10f      	bne.n	8003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003150:	e706      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003158:	2b06      	cmp	r3, #6
 800315a:	d117      	bne.n	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2207      	movs	r2, #7
 8003172:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f47f aeef 	bne.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2208      	movs	r2, #8
 8003186:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800318a:	e6e9      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003192:	2b08      	cmp	r3, #8
 8003194:	f47f aee4 	bne.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80031a6:	425a      	negs	r2, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	bf58      	it	pl
 80031ae:	4253      	negpl	r3, r2
 80031b0:	2bff      	cmp	r3, #255	; 0xff
 80031b2:	f47f aed5 	bne.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d110      	bne.n	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f896 	bl	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8b0 	bl	800332c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e067      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80031e8:	2b0a      	cmp	r3, #10
 80031ea:	d106      	bne.n	80031fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3318      	adds	r3, #24
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f97a 	bl	80034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80031f8:	e6b2      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003200:	2b06      	cmp	r3, #6
 8003202:	d10d      	bne.n	8003220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3318      	adds	r3, #24
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f7fe fe18 	bl	8001e46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800321e:	e69f      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003226:	2b0b      	cmp	r3, #11
 8003228:	d104      	bne.n	8003234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003232:	e695      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800323a:	3b64      	subs	r3, #100	; 0x64
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f43f ae89 	beq.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003254:	3b64      	subs	r3, #100	; 0x64
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	6858      	ldr	r0, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003268:	3b64      	subs	r3, #100	; 0x64
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	3218      	adds	r2, #24
 800327e:	4611      	mov	r1, r2
 8003280:	4798      	blx	r3
    while (true)
 8003282:	e66d      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003284:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800329e:	4293      	cmp	r3, r2
 80032a0:	d906      	bls.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f825 	bl	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80032b0:	2300      	movs	r3, #0
  }
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	460b      	mov	r3, r1
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fbcb 	bl	8001a68 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f107 0214 	add.w	r2, r7, #20
 80032e4:	2107      	movs	r1, #7
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	4798      	blx	r3
  }
 80032ea:	bf00      	nop
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f8fe 	bl	8001500 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f107 020c 	add.w	r2, r7, #12
 800330e:	210a      	movs	r1, #10
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
    rt_time = hardware_.time();
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd ff8d 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
  }
 8003324:	bf00      	nop
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08b      	sub	sp, #44	; 0x2c
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe f9d1 	bl	80016e0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e05a      	b.n	80033fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
      if (publishers[i] != 0) // non-empty slot
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d04f      	beq.n	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
        ti.topic_id = publishers[i]->id_;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	b29b      	uxth	r3, r3
 8003364:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800338c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4608      	mov	r0, r1
 800339a:	4798      	blx	r3
 800339c:	4603      	mov	r3, r0
 800339e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80033b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4608      	mov	r0, r1
 80033c4:	4798      	blx	r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80033ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ce:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe febc 	bl	8002160 <_ZN3ros9Publisher15getEndpointTypeEv>
 80033e8:	4601      	mov	r1, r0
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	461a      	mov	r2, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	3301      	adds	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	2b18      	cmp	r3, #24
 80033fe:	dda1      	ble.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e067      	b.n	80034d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
      if (subscribers[i] != 0) // non-empty slot
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d05b      	beq.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
        ti.topic_id = subscribers[i]->id_;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b29b      	uxth	r3, r3
 800342a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4608      	mov	r0, r1
 8003462:	4798      	blx	r3
 8003464:	4603      	mov	r3, r0
 8003466:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4608      	mov	r0, r1
 800348c:	4798      	blx	r3
 800348e:	4603      	mov	r3, r0
 8003490:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003496:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681c      	ldr	r4, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4798      	blx	r3
 80034c4:	4601      	mov	r1, r0
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	461a      	mov	r2, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	3301      	adds	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b18      	cmp	r3, #24
 80034da:	dd94      	ble.n	8003406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    configured_ = true;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80034e4:	bf00      	nop
 80034e6:	372c      	adds	r7, #44	; 0x2c
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f800 	bl	8001500 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fe97 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003514:	f107 0308 	add.w	r3, r7, #8
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe f860 	bl	80015e0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4914      	ldr	r1, [pc, #80]	; (8003578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8003526:	fba1 1303 	umull	r1, r3, r1, r3
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	4413      	add	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003530:	6939      	ldr	r1, [r7, #16]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8003536:	fba3 0302 	umull	r0, r3, r3, r2
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003540:	fb00 f303 	mul.w	r3, r0, r3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	4a0d      	ldr	r2, [pc, #52]	; (800357c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	440b      	add	r3, r1
 800354e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8a5 	bl	80036a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fe68 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	10624dd3 	.word	0x10624dd3
 800357c:	000f4240 	.word	0x000f4240

08003580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b63      	cmp	r3, #99	; 0x63
 8003590:	dd09      	ble.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e079      	b.n	800369a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    int l = msg->serialize(message_out + 7);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80035b2:	3207      	adds	r2, #7
 80035b4:	4611      	mov	r1, r2
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
 80035ba:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	22fe      	movs	r2, #254	; 0xfe
 80035c8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	b29b      	uxth	r3, r3
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80035f2:	4413      	add	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	b21b      	sxth	r3, r3
 800360e:	121b      	asrs	r3, r3, #8
 8003610:	b21b      	sxth	r3, r3
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
    int chk = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800361e:	2305      	movs	r3, #5
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e00c      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	3301      	adds	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3306      	adds	r3, #6
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	429a      	cmp	r2, r3
 8003646:	dded      	ble.n	8003624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3307      	adds	r3, #7
 800364c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	425a      	negs	r2, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	bf58      	it	pl
 8003658:	4253      	negpl	r3, r2
 800365a:	b2da      	uxtb	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	6179      	str	r1, [r7, #20]
 8003662:	43d2      	mvns	r2, r2
 8003664:	b2d1      	uxtb	r1, r2
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	460a      	mov	r2, r1
 800366c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    if (l <= OUTPUT_SIZE)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	dc0a      	bgt.n	800368e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      hardware_.write(message_out, l);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1d18      	adds	r0, r3, #4
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4619      	mov	r1, r3
 8003686:	f7fd fdc6 	bl	8001216 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e005      	b.n	800369a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
      logerror("Message from device dropped: message larger than buffer.");
 800368e:	4905      	ldr	r1, [pc, #20]	; (80036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f847 	bl	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08008470 	.word	0x08008470

080036a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fdbe 	bl	8001238 <_ZN13STM32Hardware4timeEv>
 80036bc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4914      	ldr	r1, [pc, #80]	; (8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80036c6:	fba1 1303 	umull	r1, r3, r1, r3
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80036dc:	fba3 0302 	umull	r0, r3, r3, r2
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036e6:	fb00 f303 	mul.w	r3, r0, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	1aca      	subs	r2, r1, r3
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80036f6:	4413      	add	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f103 020c 	add.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3310      	adds	r3, #16
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 fd3b 	bl	8004184 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	10624dd3 	.word	0x10624dd3
 800371c:	000f4240 	.word	0x000f4240
 8003720:	3b9aca00 	.word	0x3b9aca00

08003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	2103      	movs	r1, #3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fdc1 	bl	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_Z41__static_initialization_and_destruction_0ii>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10d      	bne.n	800376c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800375c:	f7fe fe44 	bl	80023e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8003760:	2301      	movs	r3, #1
 8003762:	4a05      	ldr	r2, [pc, #20]	; (8003778 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003764:	4905      	ldr	r1, [pc, #20]	; (800377c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003766:	4806      	ldr	r0, [pc, #24]	; (8003780 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003768:	f7ff fb66 	bl	8002e38 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000488 	.word	0x20000488
 8003778:	080028b1 	.word	0x080028b1
 800377c:	080084ac 	.word	0x080084ac
 8003780:	200009e0 	.word	0x200009e0

08003784 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	330c      	adds	r3, #12
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fdd6 	bl	8002346 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	320c      	adds	r2, #12
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
  }
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	330c      	adds	r3, #12
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fddc 	bl	8002390 <_ZN13geometry_msgs5Twist7getTypeEv>
 80037d8:	4603      	mov	r3, r0
  }
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	330c      	adds	r3, #12
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fddc 	bl	80023ac <_ZN13geometry_msgs5Twist6getMD5Ev>
 80037f4:	4603      	mov	r3, r0
  }
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    return configured_;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <_GLOBAL__sub_I_nh>:
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
 800381c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff ff8d 	bl	8003740 <_Z41__static_initialization_and_destruction_0ii>
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_MspInit+0x4c>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <HAL_MspInit+0x4c>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_MspInit+0x4c>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_MspInit+0x4c>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_MspInit+0x4c>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_MspInit+0x4c>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003866:	2007      	movs	r0, #7
 8003868:	f000 ff06 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800

08003878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800387c:	e7fe      	b.n	800387c <NMI_Handler+0x4>

0800387e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003882:	e7fe      	b.n	8003882 <HardFault_Handler+0x4>

08003884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <MemManage_Handler+0x4>

0800388a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <BusFault_Handler+0x4>

08003890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <UsageFault_Handler+0x4>

08003896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c4:	f000 fde8 	bl	8004498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(steer_fr_ChannelA_Pin);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f001 fcc9 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}

080038da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(steer_fl_ChannelA_Pin);
 80038de:	2002      	movs	r0, #2
 80038e0:	f001 fcc2 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(steer_rl_ChannelA_Pin);
 80038ec:	2004      	movs	r0, #4
 80038ee:	f001 fcbb 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(steer_rr_ChannelA_Pin);
 80038fa:	2008      	movs	r0, #8
 80038fc:	f001 fcb4 	bl	8005268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <DMA1_Stream5_IRQHandler+0x10>)
 800390a:	f001 f88f 	bl	8004a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000be0 	.word	0x20000be0

08003918 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA1_Stream6_IRQHandler+0x10>)
 800391e:	f001 f885 	bl	8004a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000b80 	.word	0x20000b80

0800392c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <USART2_IRQHandler+0x10>)
 8003932:	f003 f97d 	bl	8006c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000b3c 	.word	0x20000b3c

08003940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <_sbrk+0x5c>)
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <_sbrk+0x60>)
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <_sbrk+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <_sbrk+0x64>)
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <_sbrk+0x68>)
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <_sbrk+0x64>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	429a      	cmp	r2, r3
 800396e:	d207      	bcs.n	8003980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003970:	f004 fb7a 	bl	8008068 <__errno>
 8003974:	4603      	mov	r3, r0
 8003976:	220c      	movs	r2, #12
 8003978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	e009      	b.n	8003994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <_sbrk+0x64>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <_sbrk+0x64>)
 8003990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20020000 	.word	0x20020000
 80039a0:	00000400 	.word	0x00000400
 80039a4:	20000a18 	.word	0x20000a18
 80039a8:	20000d90 	.word	0x20000d90

080039ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <SystemInit+0x20>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <SystemInit+0x20>)
 80039b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b096      	sub	sp, #88	; 0x58
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	615a      	str	r2, [r3, #20]
 8003a00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	2220      	movs	r2, #32
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 fb24 	bl	8008056 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a0e:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a10:	4a50      	ldr	r2, [pc, #320]	; (8003b54 <MX_TIM1_Init+0x184>)
 8003a12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a14:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1a:	4b4d      	ldr	r3, [pc, #308]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8003a20:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a2c:	4b48      	ldr	r3, [pc, #288]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a38:	4845      	ldr	r0, [pc, #276]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a3a:	f002 f8c5 	bl	8005bc8 <HAL_TIM_Base_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003a44:	f7fd fba6 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a52:	4619      	mov	r1, r3
 8003a54:	483e      	ldr	r0, [pc, #248]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a56:	f002 fb49 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003a60:	f7fd fb98 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a64:	483a      	ldr	r0, [pc, #232]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a66:	f002 f967 	bl	8005d38 <HAL_TIM_PWM_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003a70:	f7fd fb90 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a80:	4619      	mov	r1, r3
 8003a82:	4833      	ldr	r0, [pc, #204]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003a84:	f002 ff0a 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003a8e:	f7fd fb81 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a92:	2360      	movs	r3, #96	; 0x60
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4826      	ldr	r0, [pc, #152]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003ab8:	f002 fa56 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003ac2:	f7fd fb67 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aca:	2204      	movs	r2, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4820      	ldr	r0, [pc, #128]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003ad0:	f002 fa4a 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003ada:	f7fd fb5b 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	481a      	ldr	r0, [pc, #104]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003ae8:	f002 fa3e 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003af2:	f7fd fb4f 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afa:	220c      	movs	r2, #12
 8003afc:	4619      	mov	r1, r3
 8003afe:	4814      	ldr	r0, [pc, #80]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003b00:	f002 fa32 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003b0a:	f7fd fb43 	bl	8001194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4807      	ldr	r0, [pc, #28]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003b32:	f002 ff2f 	bl	8006994 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003b3c:	f7fd fb2a 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b40:	4803      	ldr	r0, [pc, #12]	; (8003b50 <MX_TIM1_Init+0x180>)
 8003b42:	f000 fa4b 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003b46:	bf00      	nop
 8003b48:	3758      	adds	r7, #88	; 0x58
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000a1c 	.word	0x20000a1c
 8003b54:	40010000 	.word	0x40010000

08003b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6c:	f107 0320 	add.w	r3, r7, #32
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b88:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003b8a:	4a3d      	ldr	r2, [pc, #244]	; (8003c80 <MX_TIM3_Init+0x128>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003b9a:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003b9c:	2264      	movs	r2, #100	; 0x64
 8003b9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bac:	4833      	ldr	r0, [pc, #204]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003bae:	f002 f80b 	bl	8005bc8 <HAL_TIM_Base_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003bb8:	f7fd faec 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	482c      	ldr	r0, [pc, #176]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003bca:	f002 fa8f 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003bd4:	f7fd fade 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bd8:	4828      	ldr	r0, [pc, #160]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003bda:	f002 f8ad 	bl	8005d38 <HAL_TIM_PWM_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003be4:	f7fd fad6 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bf0:	f107 0320 	add.w	r3, r7, #32
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4821      	ldr	r0, [pc, #132]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003bf8:	f002 fe50 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003c02:	f7fd fac7 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c06:	2360      	movs	r3, #96	; 0x60
 8003c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4817      	ldr	r0, [pc, #92]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003c1e:	f002 f9a3 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003c28:	f7fd fab4 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003c34:	f002 f998 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8003c3e:	f7fd faa9 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	2208      	movs	r2, #8
 8003c46:	4619      	mov	r1, r3
 8003c48:	480c      	ldr	r0, [pc, #48]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003c4a:	f002 f98d 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003c54:	f7fd fa9e 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4807      	ldr	r0, [pc, #28]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003c60:	f002 f982 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8003c6a:	f7fd fa93 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c6e:	4803      	ldr	r0, [pc, #12]	; (8003c7c <MX_TIM3_Init+0x124>)
 8003c70:	f000 f9b4 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003c74:	bf00      	nop
 8003c76:	3738      	adds	r7, #56	; 0x38
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000a64 	.word	0x20000a64
 8003c80:	40000400 	.word	0x40000400

08003c84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	; 0x38
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c98:	f107 0320 	add.w	r3, r7, #32
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
 8003cb0:	615a      	str	r2, [r3, #20]
 8003cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cb6:	4a3d      	ldr	r2, [pc, #244]	; (8003dac <MX_TIM4_Init+0x128>)
 8003cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc0:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cc8:	2264      	movs	r2, #100	; 0x64
 8003cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ccc:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd2:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cd8:	4833      	ldr	r0, [pc, #204]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cda:	f001 ff75 	bl	8005bc8 <HAL_TIM_Base_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003ce4:	f7fd fa56 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	482c      	ldr	r0, [pc, #176]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003cf6:	f002 f9f9 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8003d00:	f7fd fa48 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d04:	4828      	ldr	r0, [pc, #160]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d06:	f002 f817 	bl	8005d38 <HAL_TIM_PWM_Init>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003d10:	f7fd fa40 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d1c:	f107 0320 	add.w	r3, r7, #32
 8003d20:	4619      	mov	r1, r3
 8003d22:	4821      	ldr	r0, [pc, #132]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d24:	f002 fdba 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8003d2e:	f7fd fa31 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d32:	2360      	movs	r3, #96	; 0x60
 8003d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	2200      	movs	r2, #0
 8003d46:	4619      	mov	r1, r3
 8003d48:	4817      	ldr	r0, [pc, #92]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d4a:	f002 f90d 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003d54:	f7fd fa1e 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4812      	ldr	r0, [pc, #72]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d60:	f002 f902 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8003d6a:	f7fd fa13 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	2208      	movs	r2, #8
 8003d72:	4619      	mov	r1, r3
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d76:	f002 f8f7 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8003d80:	f7fd fa08 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	220c      	movs	r2, #12
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4807      	ldr	r0, [pc, #28]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d8c:	f002 f8ec 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8003d96:	f7fd f9fd 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003d9a:	4803      	ldr	r0, [pc, #12]	; (8003da8 <MX_TIM4_Init+0x124>)
 8003d9c:	f000 f91e 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003da0:	bf00      	nop
 8003da2:	3738      	adds	r7, #56	; 0x38
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000aac 	.word	0x20000aac
 8003dac:	40000800 	.word	0x40000800

08003db0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b092      	sub	sp, #72	; 0x48
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
 8003dd0:	615a      	str	r2, [r3, #20]
 8003dd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f004 f93b 	bl	8008056 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003de0:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003de2:	4a45      	ldr	r2, [pc, #276]	; (8003ef8 <MX_TIM8_Init+0x148>)
 8003de4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003de6:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003df2:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003df4:	2264      	movs	r2, #100	; 0x64
 8003df6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e0a:	483a      	ldr	r0, [pc, #232]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e0c:	f001 ff94 	bl	8005d38 <HAL_TIM_PWM_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8003e16:	f7fd f9bd 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e26:	4619      	mov	r1, r3
 8003e28:	4832      	ldr	r0, [pc, #200]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e2a:	f002 fd37 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8003e34:	f7fd f9ae 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e38:	2360      	movs	r3, #96	; 0x60
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e44:	2300      	movs	r3, #0
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4825      	ldr	r0, [pc, #148]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e5e:	f002 f883 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8003e68:	f7fd f994 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e70:	2204      	movs	r2, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	481f      	ldr	r0, [pc, #124]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e76:	f002 f877 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8003e80:	f7fd f988 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4819      	ldr	r0, [pc, #100]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003e8e:	f002 f86b 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8003e98:	f7fd f97c 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea0:	220c      	movs	r2, #12
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4813      	ldr	r0, [pc, #76]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003ea6:	f002 f85f 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8003eb0:	f7fd f970 	bl	8001194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ecc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003ed8:	f002 fd5c 	bl	8006994 <HAL_TIMEx_ConfigBreakDeadTime>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8003ee2:	f7fd f957 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_TIM8_Init+0x144>)
 8003ee8:	f000 f878 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003eec:	bf00      	nop
 8003eee:	3748      	adds	r7, #72	; 0x48
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000af4 	.word	0x20000af4
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_TIM_Base_MspInit+0x8c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d10e      	bne.n	8003f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003f2a:	e026      	b.n	8003f7a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_TIM_Base_MspInit+0x94>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
}
 8003f52:	e012      	b.n	8003f7a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <HAL_TIM_Base_MspInit+0x98>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10d      	bne.n	8003f7a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_TIM_Base_MspInit+0x90>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010400 	.word	0x40010400
 8003fd8:	40023800 	.word	0x40023800

08003fdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 031c 	add.w	r3, r7, #28
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_TIM_MspPostInit+0x180>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d11f      	bne.n	800403e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	4b57      	ldr	r3, [pc, #348]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a56      	ldr	r2, [pc, #344]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004008:	f043 0310 	orr.w	r3, r3, #16
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b54      	ldr	r3, [pc, #336]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FRDrive1_Pin|FRDrive2_Pin|FLDrive1_Pin|FLDrive2_Pin;
 800401a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800401e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004020:	2302      	movs	r3, #2
 8004022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800402c:	2301      	movs	r3, #1
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	4619      	mov	r1, r3
 8004036:	484b      	ldr	r0, [pc, #300]	; (8004164 <HAL_TIM_MspPostInit+0x188>)
 8004038:	f000 ff62 	bl	8004f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800403c:	e08a      	b.n	8004154 <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a49      	ldr	r2, [pc, #292]	; (8004168 <HAL_TIM_MspPostInit+0x18c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d13c      	bne.n	80040c2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	4b44      	ldr	r3, [pc, #272]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6313      	str	r3, [r2, #48]	; 0x30
 8004058:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	6313      	str	r3, [r2, #48]	; 0x30
 8004074:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RLDrive1_Pin|RLDrive2_Pin;
 8004080:	23c0      	movs	r3, #192	; 0xc0
 8004082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408c:	2300      	movs	r3, #0
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004090:	2302      	movs	r3, #2
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004094:	f107 031c 	add.w	r3, r7, #28
 8004098:	4619      	mov	r1, r3
 800409a:	4834      	ldr	r0, [pc, #208]	; (800416c <HAL_TIM_MspPostInit+0x190>)
 800409c:	f000 ff30 	bl	8004f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RRDrive1_Pin|RRDrive2_Pin;
 80040a0:	2303      	movs	r3, #3
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a4:	2302      	movs	r3, #2
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ac:	2300      	movs	r3, #0
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040b0:	2302      	movs	r3, #2
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b4:	f107 031c 	add.w	r3, r7, #28
 80040b8:	4619      	mov	r1, r3
 80040ba:	482d      	ldr	r0, [pc, #180]	; (8004170 <HAL_TIM_MspPostInit+0x194>)
 80040bc:	f000 ff20 	bl	8004f00 <HAL_GPIO_Init>
}
 80040c0:	e048      	b.n	8004154 <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM4)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2b      	ldr	r2, [pc, #172]	; (8004174 <HAL_TIM_MspPostInit+0x198>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d11f      	bne.n	800410c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6313      	str	r3, [r2, #48]	; 0x30
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FRSteer1_Pin|FRSteer2_Pin|FLSteer1_Pin|FLSteer2_Pin;
 80040e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040fa:	2302      	movs	r3, #2
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040fe:	f107 031c 	add.w	r3, r7, #28
 8004102:	4619      	mov	r1, r3
 8004104:	481c      	ldr	r0, [pc, #112]	; (8004178 <HAL_TIM_MspPostInit+0x19c>)
 8004106:	f000 fefb 	bl	8004f00 <HAL_GPIO_Init>
}
 800410a:	e023      	b.n	8004154 <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM8)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_TIM_MspPostInit+0x1a0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d11e      	bne.n	8004154 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	6313      	str	r3, [r2, #48]	; 0x30
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <HAL_TIM_MspPostInit+0x184>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RLSteer1_Pin|RLSteer2_Pin|RRSteer1_Pin|RRSteer2_Pin;
 8004132:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004144:	2303      	movs	r3, #3
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	4619      	mov	r1, r3
 800414e:	480c      	ldr	r0, [pc, #48]	; (8004180 <HAL_TIM_MspPostInit+0x1a4>)
 8004150:	f000 fed6 	bl	8004f00 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3730      	adds	r7, #48	; 0x30
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010000 	.word	0x40010000
 8004160:	40023800 	.word	0x40023800
 8004164:	40021000 	.word	0x40021000
 8004168:	40000400 	.word	0x40000400
 800416c:	40020000 	.word	0x40020000
 8004170:	40020400 	.word	0x40020400
 8004174:	40000800 	.word	0x40000800
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40020800 	.word	0x40020800

08004184 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0a5a      	lsrs	r2, r3, #9
 8004194:	490f      	ldr	r1, [pc, #60]	; (80041d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004196:	fba1 1202 	umull	r1, r2, r1, r2
 800419a:	09d2      	lsrs	r2, r2, #7
 800419c:	490e      	ldr	r1, [pc, #56]	; (80041d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800419e:	fb01 f202 	mul.w	r2, r1, r2
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	0a5b      	lsrs	r3, r3, #9
 80041ac:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	09db      	lsrs	r3, r3, #7
 80041b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	00044b83 	.word	0x00044b83
 80041d8:	3b9aca00 	.word	0x3b9aca00

080041dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <MX_USART2_UART_Init+0x50>)
 80041e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004202:	220c      	movs	r2, #12
 8004204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_USART2_UART_Init+0x4c>)
 8004214:	f002 fc10 	bl	8006a38 <HAL_UART_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800421e:	f7fc ffb9 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000b3c 	.word	0x20000b3c
 800422c:	40004400 	.word	0x40004400

08004230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a4d      	ldr	r2, [pc, #308]	; (8004384 <HAL_UART_MspInit+0x154>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f040 8093 	bne.w	800437a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <HAL_UART_MspInit+0x158>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <HAL_UART_MspInit+0x158>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	6413      	str	r3, [r2, #64]	; 0x40
 8004264:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_UART_MspInit+0x158>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_UART_MspInit+0x158>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4a43      	ldr	r2, [pc, #268]	; (8004388 <HAL_UART_MspInit+0x158>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_UART_MspInit+0x158>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800428c:	230c      	movs	r3, #12
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004298:	2303      	movs	r3, #3
 800429a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800429c:	2307      	movs	r3, #7
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	4839      	ldr	r0, [pc, #228]	; (800438c <HAL_UART_MspInit+0x15c>)
 80042a8:	f000 fe2a 	bl	8004f00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80042ac:	4b38      	ldr	r3, [pc, #224]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042ae:	4a39      	ldr	r2, [pc, #228]	; (8004394 <HAL_UART_MspInit+0x164>)
 80042b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042bc:	2240      	movs	r2, #64	; 0x40
 80042be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c0:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042c6:	4b32      	ldr	r3, [pc, #200]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d4:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042dc:	2200      	movs	r2, #0
 80042de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042ee:	4828      	ldr	r0, [pc, #160]	; (8004390 <HAL_UART_MspInit+0x160>)
 80042f0:	f000 fa04 	bl	80046fc <HAL_DMA_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80042fa:	f7fc ff4b 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_UART_MspInit+0x160>)
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
 8004304:	4a22      	ldr	r2, [pc, #136]	; (8004390 <HAL_UART_MspInit+0x160>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_UART_MspInit+0x168>)
 800430c:	4a23      	ldr	r2, [pc, #140]	; (800439c <HAL_UART_MspInit+0x16c>)
 800430e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004316:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_UART_MspInit+0x168>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004320:	2200      	movs	r2, #0
 8004322:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800432a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_UART_MspInit+0x168>)
 800432e:	2200      	movs	r2, #0
 8004330:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_UART_MspInit+0x168>)
 800433a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004340:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004346:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_UART_MspInit+0x168>)
 800434a:	2200      	movs	r2, #0
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800434e:	4812      	ldr	r0, [pc, #72]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004350:	f000 f9d4 	bl	80046fc <HAL_DMA_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800435a:	f7fc ff1b 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <HAL_UART_MspInit+0x168>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2026      	movs	r0, #38	; 0x26
 8004370:	f000 f98d 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004374:	2026      	movs	r0, #38	; 0x26
 8004376:	f000 f9a6 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800437a:	bf00      	nop
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40004400 	.word	0x40004400
 8004388:	40023800 	.word	0x40023800
 800438c:	40020000 	.word	0x40020000
 8004390:	20000b80 	.word	0x20000b80
 8004394:	400260a0 	.word	0x400260a0
 8004398:	20000be0 	.word	0x20000be0
 800439c:	40026088 	.word	0x40026088

080043a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043a4:	480d      	ldr	r0, [pc, #52]	; (80043dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043a6:	490e      	ldr	r1, [pc, #56]	; (80043e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043bc:	4c0b      	ldr	r4, [pc, #44]	; (80043ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ca:	f7ff faef 	bl	80039ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ce:	f003 fe51 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043d2:	f7fc fe07 	bl	8000fe4 <main>
  bx  lr    
 80043d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80043e4:	08008628 	.word	0x08008628
  ldr r2, =_sbss
 80043e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80043ec:	20000d8c 	.word	0x20000d8c

080043f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f0:	e7fe      	b.n	80043f0 <ADC_IRQHandler>
	...

080043f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_Init+0x40>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <HAL_Init+0x40>)
 80043fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_Init+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_Init+0x40>)
 800440a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800440e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_Init+0x40>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <HAL_Init+0x40>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800441c:	2003      	movs	r0, #3
 800441e:	f000 f92b 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004422:	2000      	movs	r0, #0
 8004424:	f000 f808 	bl	8004438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004428:	f7ff f9fe 	bl	8003828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00

08004438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_InitTick+0x54>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_InitTick+0x58>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800444e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f943 	bl	80046e2 <HAL_SYSTICK_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e00e      	b.n	8004484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d80a      	bhi.n	8004482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800446c:	2200      	movs	r2, #0
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	f000 f90b 	bl	800468e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004478:	4a06      	ldr	r2, [pc, #24]	; (8004494 <HAL_InitTick+0x5c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000000 	.word	0x20000000
 8004490:	20000008 	.word	0x20000008
 8004494:	20000004 	.word	0x20000004

08004498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_IncTick+0x20>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_IncTick+0x24>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_IncTick+0x24>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000008 	.word	0x20000008
 80044bc:	20000c40 	.word	0x20000c40

080044c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return uwTick;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_GetTick+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000c40 	.word	0x20000c40

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004644:	d301      	bcc.n	800464a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004646:	2301      	movs	r3, #1
 8004648:	e00f      	b.n	800466a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <SysTick_Config+0x40>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004652:	210f      	movs	r1, #15
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	f7ff ff8e 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <SysTick_Config+0x40>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <SysTick_Config+0x40>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff29 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff3e 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff8e 	bl	80045cc <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff31 	bl	800453c <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffa2 	bl	8004634 <SysTick_Config>
 80046f0:	4603      	mov	r3, r0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7ff feda 	bl	80044c0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e099      	b.n	800484c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004738:	e00f      	b.n	800475a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800473a:	f7ff fec1 	bl	80044c0 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b05      	cmp	r3, #5
 8004746:	d908      	bls.n	800475a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2203      	movs	r2, #3
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e078      	b.n	800484c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e8      	bne.n	800473a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4b38      	ldr	r3, [pc, #224]	; (8004854 <HAL_DMA_Init+0x158>)
 8004774:	4013      	ands	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d107      	bne.n	80047c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	4313      	orrs	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d117      	bne.n	800481e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb01 	bl	8004e08 <DMA_CheckFifoParam>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800481a:	2301      	movs	r3, #1
 800481c:	e016      	b.n	800484c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fab8 	bl	8004d9c <DMA_CalcBaseAndBitshift>
 800482c:	4603      	mov	r3, r0
 800482e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	223f      	movs	r2, #63	; 0x3f
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	f010803f 	.word	0xf010803f

08004858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_DMA_Start_IT+0x26>
 800487a:	2302      	movs	r3, #2
 800487c:	e040      	b.n	8004900 <HAL_DMA_Start_IT+0xa8>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d12f      	bne.n	80048f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fa4a 	bl	8004d40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	223f      	movs	r2, #63	; 0x3f
 80048b2:	409a      	lsls	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0216 	orr.w	r2, r2, #22
 80048c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e005      	b.n	80048fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
 80048fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004916:	f7ff fdd3 	bl	80044c0 <HAL_GetTick>
 800491a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d008      	beq.n	800493a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e052      	b.n	80049e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0216 	bic.w	r2, r2, #22
 8004948:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004958:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_DMA_Abort+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800498a:	e013      	b.n	80049b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800498c:	f7ff fd98 	bl	80044c0 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b05      	cmp	r3, #5
 8004998:	d90c      	bls.n	80049b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2203      	movs	r2, #3
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e015      	b.n	80049e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e4      	bne.n	800498c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	223f      	movs	r2, #63	; 0x3f
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d004      	beq.n	8004a06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00c      	b.n	8004a20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2205      	movs	r2, #5
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a38:	4b8e      	ldr	r3, [pc, #568]	; (8004c74 <HAL_DMA_IRQHandler+0x248>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a8e      	ldr	r2, [pc, #568]	; (8004c78 <HAL_DMA_IRQHandler+0x24c>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a9b      	lsrs	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	2208      	movs	r2, #8
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	2208      	movs	r2, #8
 8004a86:	409a      	lsls	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aba:	2201      	movs	r2, #1
 8004abc:	409a      	lsls	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d012      	beq.n	8004b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2204      	movs	r2, #4
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f043 0204 	orr.w	r2, r3, #4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	2210      	movs	r2, #16
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d043      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d03c      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	2210      	movs	r2, #16
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d018      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d024      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
 8004b5a:	e01f      	b.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e016      	b.n	8004b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0208 	bic.w	r2, r2, #8
 8004b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 808f 	beq.w	8004ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8087 	beq.w	8004ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d136      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0216 	bic.w	r2, r2, #22
 8004be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x1da>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0208 	bic.w	r2, r2, #8
 8004c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	223f      	movs	r2, #63	; 0x3f
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d07e      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
        }
        return;
 8004c42:	e079      	b.n	8004d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d031      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
 8004c70:	e02c      	b.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
 8004c72:	bf00      	nop
 8004c74:	20000000 	.word	0x20000000
 8004c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d023      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
 8004c8c:	e01e      	b.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0210 	bic.w	r2, r2, #16
 8004caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d032      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d022      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2205      	movs	r2, #5
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d307      	bcc.n	8004d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f2      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x2cc>
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
 8004d36:	e000      	b.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d38:	bf00      	nop
    }
  }
}
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d108      	bne.n	8004d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d7e:	e007      	b.n	8004d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	3b10      	subs	r3, #16
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <DMA_CalcBaseAndBitshift+0x64>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <DMA_CalcBaseAndBitshift+0x68>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d909      	bls.n	8004dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	659a      	str	r2, [r3, #88]	; 0x58
 8004ddc:	e007      	b.n	8004dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	aaaaaaab 	.word	0xaaaaaaab
 8004e04:	080085e8 	.word	0x080085e8

08004e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11f      	bne.n	8004e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d856      	bhi.n	8004ed6 <DMA_CheckFifoParam+0xce>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <DMA_CheckFifoParam+0x28>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e53 	.word	0x08004e53
 8004e38:	08004e41 	.word	0x08004e41
 8004e3c:	08004ed7 	.word	0x08004ed7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d046      	beq.n	8004eda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e50:	e043      	b.n	8004eda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e5a:	d140      	bne.n	8004ede <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e60:	e03d      	b.n	8004ede <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6a:	d121      	bne.n	8004eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d837      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xda>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <DMA_CheckFifoParam+0x70>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e8f 	.word	0x08004e8f
 8004e80:	08004e89 	.word	0x08004e89
 8004e84:	08004ea1 	.word	0x08004ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e030      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d025      	beq.n	8004ee6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9e:	e022      	b.n	8004ee6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ea8:	d11f      	bne.n	8004eea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eae:	e01c      	b.n	8004eea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d903      	bls.n	8004ebe <DMA_CheckFifoParam+0xb6>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ebc:	e018      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec2:	e015      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e00b      	b.n	8004eee <DMA_CheckFifoParam+0xe6>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e00a      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eda:	bf00      	nop
 8004edc:	e008      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e006      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
    }
  } 
  
  return status; 
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e16b      	b.n	80051f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f040 815a 	bne.w	80051ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d005      	beq.n	8004f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d130      	bne.n	8004fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f88:	2201      	movs	r2, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 0201 	and.w	r2, r3, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d017      	beq.n	8004ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d123      	bne.n	8005044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	08da      	lsrs	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3208      	adds	r2, #8
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	220f      	movs	r2, #15
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	08da      	lsrs	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3208      	adds	r2, #8
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80b4 	beq.w	80051ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	4b60      	ldr	r3, [pc, #384]	; (800520c <HAL_GPIO_Init+0x30c>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	4a5f      	ldr	r2, [pc, #380]	; (800520c <HAL_GPIO_Init+0x30c>)
 8005090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005094:	6453      	str	r3, [r2, #68]	; 0x44
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_GPIO_Init+0x30c>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050a2:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <HAL_GPIO_Init+0x310>)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3302      	adds	r3, #2
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <HAL_GPIO_Init+0x314>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d02b      	beq.n	8005126 <HAL_GPIO_Init+0x226>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a51      	ldr	r2, [pc, #324]	; (8005218 <HAL_GPIO_Init+0x318>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d025      	beq.n	8005122 <HAL_GPIO_Init+0x222>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a50      	ldr	r2, [pc, #320]	; (800521c <HAL_GPIO_Init+0x31c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01f      	beq.n	800511e <HAL_GPIO_Init+0x21e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4f      	ldr	r2, [pc, #316]	; (8005220 <HAL_GPIO_Init+0x320>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d019      	beq.n	800511a <HAL_GPIO_Init+0x21a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <HAL_GPIO_Init+0x324>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_GPIO_Init+0x216>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a4d      	ldr	r2, [pc, #308]	; (8005228 <HAL_GPIO_Init+0x328>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00d      	beq.n	8005112 <HAL_GPIO_Init+0x212>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a4c      	ldr	r2, [pc, #304]	; (800522c <HAL_GPIO_Init+0x32c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <HAL_GPIO_Init+0x20e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a4b      	ldr	r2, [pc, #300]	; (8005230 <HAL_GPIO_Init+0x330>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d101      	bne.n	800510a <HAL_GPIO_Init+0x20a>
 8005106:	2307      	movs	r3, #7
 8005108:	e00e      	b.n	8005128 <HAL_GPIO_Init+0x228>
 800510a:	2308      	movs	r3, #8
 800510c:	e00c      	b.n	8005128 <HAL_GPIO_Init+0x228>
 800510e:	2306      	movs	r3, #6
 8005110:	e00a      	b.n	8005128 <HAL_GPIO_Init+0x228>
 8005112:	2305      	movs	r3, #5
 8005114:	e008      	b.n	8005128 <HAL_GPIO_Init+0x228>
 8005116:	2304      	movs	r3, #4
 8005118:	e006      	b.n	8005128 <HAL_GPIO_Init+0x228>
 800511a:	2303      	movs	r3, #3
 800511c:	e004      	b.n	8005128 <HAL_GPIO_Init+0x228>
 800511e:	2302      	movs	r3, #2
 8005120:	e002      	b.n	8005128 <HAL_GPIO_Init+0x228>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_GPIO_Init+0x228>
 8005126:	2300      	movs	r3, #0
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	f002 0203 	and.w	r2, r2, #3
 800512e:	0092      	lsls	r2, r2, #2
 8005130:	4093      	lsls	r3, r2
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4313      	orrs	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005138:	4935      	ldr	r1, [pc, #212]	; (8005210 <HAL_GPIO_Init+0x310>)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	3302      	adds	r3, #2
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005146:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <HAL_GPIO_Init+0x334>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800516a:	4a32      	ldr	r2, [pc, #200]	; (8005234 <HAL_GPIO_Init+0x334>)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005170:	4b30      	ldr	r3, [pc, #192]	; (8005234 <HAL_GPIO_Init+0x334>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <HAL_GPIO_Init+0x334>)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_GPIO_Init+0x334>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <HAL_GPIO_Init+0x334>)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <HAL_GPIO_Init+0x334>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051e8:	4a12      	ldr	r2, [pc, #72]	; (8005234 <HAL_GPIO_Init+0x334>)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3301      	adds	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	f67f ae90 	bls.w	8004f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3724      	adds	r7, #36	; 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	40013800 	.word	0x40013800
 8005214:	40020000 	.word	0x40020000
 8005218:	40020400 	.word	0x40020400
 800521c:	40020800 	.word	0x40020800
 8005220:	40020c00 	.word	0x40020c00
 8005224:	40021000 	.word	0x40021000
 8005228:	40021400 	.word	0x40021400
 800522c:	40021800 	.word	0x40021800
 8005230:	40021c00 	.word	0x40021c00
 8005234:	40013c00 	.word	0x40013c00

08005238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e001      	b.n	800525a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800527e:	4a05      	ldr	r2, [pc, #20]	; (8005294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd f920 	bl	80024cc <HAL_GPIO_EXTI_Callback>
  }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40013c00 	.word	0x40013c00

08005298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e267      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d075      	beq.n	80053a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052b6:	4b88      	ldr	r3, [pc, #544]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d112      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ce:	4b82      	ldr	r3, [pc, #520]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052da:	d10b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	4b7e      	ldr	r3, [pc, #504]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05b      	beq.n	80053a0 <HAL_RCC_OscConfig+0x108>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d157      	bne.n	80053a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e242      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d106      	bne.n	800530c <HAL_RCC_OscConfig+0x74>
 80052fe:	4b76      	ldr	r3, [pc, #472]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a75      	ldr	r2, [pc, #468]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e01d      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x98>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6f      	ldr	r2, [pc, #444]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800531c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b6d      	ldr	r3, [pc, #436]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6c      	ldr	r2, [pc, #432]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 8005330:	4b69      	ldr	r3, [pc, #420]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a68      	ldr	r2, [pc, #416]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a65      	ldr	r2, [pc, #404]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7ff f8b6 	bl	80044c0 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7ff f8b2 	bl	80044c0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e207      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b5b      	ldr	r3, [pc, #364]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0xc0>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7ff f8a2 	bl	80044c0 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7ff f89e 	bl	80044c0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1f3      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005392:	4b51      	ldr	r3, [pc, #324]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0xe8>
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d063      	beq.n	8005476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d11c      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c6:	4b44      	ldr	r3, [pc, #272]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e1c7      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ea:	4b3b      	ldr	r3, [pc, #236]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4937      	ldr	r1, [pc, #220]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	e03a      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_OscConfig+0x244>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7ff f857 	bl	80044c0 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005416:	f7ff f853 	bl	80044c0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e1a8      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4925      	ldr	r1, [pc, #148]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]
 8005448:	e015      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCC_OscConfig+0x244>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7ff f836 	bl	80044c0 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005458:	f7ff f832 	bl	80044c0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e187      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d036      	beq.n	80054f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_RCC_OscConfig+0x248>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7ff f816 	bl	80044c0 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005498:	f7ff f812 	bl	80044c0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e167      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80054ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x200>
 80054b6:	e01b      	b.n	80054f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_OscConfig+0x248>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054be:	f7fe ffff 	bl	80044c0 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	e00e      	b.n	80054e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c6:	f7fe fffb 	bl	80044c0 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d907      	bls.n	80054e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e150      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	42470000 	.word	0x42470000
 80054e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e4:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80054e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8097 	beq.w	800562c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005502:	4b81      	ldr	r3, [pc, #516]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	4b7d      	ldr	r3, [pc, #500]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551c:	6413      	str	r3, [r2, #64]	; 0x40
 800551e:	4b7a      	ldr	r3, [pc, #488]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552e:	4b77      	ldr	r3, [pc, #476]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d118      	bne.n	800556c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553a:	4b74      	ldr	r3, [pc, #464]	; (800570c <HAL_RCC_OscConfig+0x474>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a73      	ldr	r2, [pc, #460]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005546:	f7fe ffbb 	bl	80044c0 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554e:	f7fe ffb7 	bl	80044c0 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e10c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	4b6a      	ldr	r3, [pc, #424]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x2ea>
 8005574:	4b64      	ldr	r3, [pc, #400]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a63      	ldr	r2, [pc, #396]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	e01c      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b05      	cmp	r3, #5
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x30c>
 800558a:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a5e      	ldr	r2, [pc, #376]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
 8005596:	4b5c      	ldr	r3, [pc, #368]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a5b      	ldr	r2, [pc, #364]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 80055a4:	4b58      	ldr	r3, [pc, #352]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	4a57      	ldr	r2, [pc, #348]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	; 0x70
 80055b0:	4b55      	ldr	r3, [pc, #340]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	4a54      	ldr	r2, [pc, #336]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f023 0304 	bic.w	r3, r3, #4
 80055ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fe ff7c 	bl	80044c0 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fe ff78 	bl	80044c0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0cb      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	4b49      	ldr	r3, [pc, #292]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ee      	beq.n	80055cc <HAL_RCC_OscConfig+0x334>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fe ff66 	bl	80044c0 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fe ff62 	bl	80044c0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0b5      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ee      	bne.n	80055f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d105      	bne.n	800562c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	4a38      	ldr	r2, [pc, #224]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800562a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a1 	beq.w	8005778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005636:	4b34      	ldr	r3, [pc, #208]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b08      	cmp	r3, #8
 8005640:	d05c      	beq.n	80056fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d141      	bne.n	80056ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fe ff36 	bl	80044c0 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005658:	f7fe ff32 	bl	80044c0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e087      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	3b01      	subs	r3, #1
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	491b      	ldr	r1, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a6:	f7fe ff0b 	bl	80044c0 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fe ff07 	bl	80044c0 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e05c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x416>
 80056cc:	e054      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fe fef4 	bl	80044c0 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fe fef0 	bl	80044c0 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e045      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x444>
 80056fa:	e03d      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e038      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 8005708:	40023800 	.word	0x40023800
 800570c:	40007000 	.word	0x40007000
 8005710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x4ec>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d028      	beq.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d121      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d11a      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800574a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	4293      	cmp	r3, r2
 800574e:	d111      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	3b01      	subs	r3, #1
 800575e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0cc      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b68      	ldr	r3, [pc, #416]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d90c      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	4b63      	ldr	r3, [pc, #396]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0b8      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057dc:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a58      	ldr	r2, [pc, #352]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f4:	4b53      	ldr	r3, [pc, #332]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a52      	ldr	r2, [pc, #328]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005800:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	494d      	ldr	r1, [pc, #308]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d044      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d119      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d003      	beq.n	8005846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005842:	2b03      	cmp	r3, #3
 8005844:	d107      	bne.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e06f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e067      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005866:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 0203 	bic.w	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4934      	ldr	r1, [pc, #208]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005878:	f7fe fe22 	bl	80044c0 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	e00a      	b.n	8005896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005880:	f7fe fe1e 	bl	80044c0 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e04f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005896:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 020c 	and.w	r2, r3, #12
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d1eb      	bne.n	8005880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a8:	4b25      	ldr	r3, [pc, #148]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d20c      	bcs.n	80058d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e032      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4916      	ldr	r1, [pc, #88]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	490e      	ldr	r1, [pc, #56]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800590e:	f000 f821 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005912:	4602      	mov	r2, r0
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	5ccb      	ldrb	r3, [r1, r3]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_ClockConfig+0x1c8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fd82 	bl	8004438 <HAL_InitTick>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00
 8005944:	40023800 	.word	0x40023800
 8005948:	080085d0 	.word	0x080085d0
 800594c:	20000000 	.word	0x20000000
 8005950:	20000004 	.word	0x20000004

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b094      	sub	sp, #80	; 0x50
 800595a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	647b      	str	r3, [r7, #68]	; 0x44
 8005960:	2300      	movs	r3, #0
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	2300      	movs	r3, #0
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800596c:	4b79      	ldr	r3, [pc, #484]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	2b08      	cmp	r3, #8
 8005976:	d00d      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x40>
 8005978:	2b08      	cmp	r3, #8
 800597a:	f200 80e1 	bhi.w	8005b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 8005982:	2b04      	cmp	r3, #4
 8005984:	d003      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x3a>
 8005986:	e0db      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800598c:	e0db      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800598e:	4b73      	ldr	r3, [pc, #460]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005992:	e0d8      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005994:	4b6f      	ldr	r3, [pc, #444]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599e:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d063      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	2200      	movs	r2, #0
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	633b      	str	r3, [r7, #48]	; 0x30
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059c6:	4622      	mov	r2, r4
 80059c8:	462b      	mov	r3, r5
 80059ca:	f04f 0000 	mov.w	r0, #0
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	0159      	lsls	r1, r3, #5
 80059d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d8:	0150      	lsls	r0, r2, #5
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4621      	mov	r1, r4
 80059e0:	1a51      	subs	r1, r2, r1
 80059e2:	6139      	str	r1, [r7, #16]
 80059e4:	4629      	mov	r1, r5
 80059e6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f8:	4659      	mov	r1, fp
 80059fa:	018b      	lsls	r3, r1, #6
 80059fc:	4651      	mov	r1, sl
 80059fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a02:	4651      	mov	r1, sl
 8005a04:	018a      	lsls	r2, r1, #6
 8005a06:	4651      	mov	r1, sl
 8005a08:	ebb2 0801 	subs.w	r8, r2, r1
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a26:	4690      	mov	r8, r2
 8005a28:	4699      	mov	r9, r3
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	eb18 0303 	adds.w	r3, r8, r3
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	462b      	mov	r3, r5
 8005a34:	eb49 0303 	adc.w	r3, r9, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a46:	4629      	mov	r1, r5
 8005a48:	024b      	lsls	r3, r1, #9
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a50:	4621      	mov	r1, r4
 8005a52:	024a      	lsls	r2, r1, #9
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a64:	f7fa fec6 	bl	80007f4 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a70:	e058      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a72:	4b38      	ldr	r3, [pc, #224]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	099b      	lsrs	r3, r3, #6
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
 8005a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	f04f 0000 	mov.w	r0, #0
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a9e:	0150      	lsls	r0, r2, #5
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aaa:	4649      	mov	r1, r9
 8005aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	00eb      	lsls	r3, r5, #3
 8005ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ada:	00e2      	lsls	r2, r4, #3
 8005adc:	4614      	mov	r4, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	18e3      	adds	r3, r4, r3
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	eb45 0303 	adc.w	r3, r5, r3
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005afa:	4629      	mov	r1, r5
 8005afc:	028b      	lsls	r3, r1, #10
 8005afe:	4621      	mov	r1, r4
 8005b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b04:	4621      	mov	r1, r4
 8005b06:	028a      	lsls	r2, r1, #10
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0e:	2200      	movs	r2, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b18:	f7fa fe6c 	bl	80007f4 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4613      	mov	r3, r2
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	3301      	adds	r3, #1
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3750      	adds	r7, #80	; 0x50
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	007a1200 	.word	0x007a1200

08005b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000000 	.word	0x20000000

08005b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b7c:	f7ff fff0 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	0a9b      	lsrs	r3, r3, #10
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	4903      	ldr	r1, [pc, #12]	; (8005b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8e:	5ccb      	ldrb	r3, [r1, r3]
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	080085e0 	.word	0x080085e0

08005ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ba4:	f7ff ffdc 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0b5b      	lsrs	r3, r3, #13
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	080085e0 	.word	0x080085e0

08005bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e041      	b.n	8005c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fe f984 	bl	8003efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 fb38 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d001      	beq.n	8005c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e046      	b.n	8005d0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <HAL_TIM_Base_Start+0xb4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_TIM_Base_Start+0xb8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <HAL_TIM_Base_Start+0xbc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <HAL_TIM_Base_Start+0xc0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_TIM_Base_Start+0xc4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <HAL_TIM_Base_Start+0xc8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_Base_Start+0x70>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIM_Base_Start+0xcc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d111      	bne.n	8005cfc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d010      	beq.n	8005d0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	e007      	b.n	8005d0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40001800 	.word	0x40001800

08005d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e041      	b.n	8005dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fe f91a 	bl	8003f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f000 fa80 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <HAL_TIM_PWM_Start+0x24>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e022      	b.n	8005e42 <HAL_TIM_PWM_Start+0x6a>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d109      	bne.n	8005e16 <HAL_TIM_PWM_Start+0x3e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	e015      	b.n	8005e42 <HAL_TIM_PWM_Start+0x6a>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d109      	bne.n	8005e30 <HAL_TIM_PWM_Start+0x58>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e008      	b.n	8005e42 <HAL_TIM_PWM_Start+0x6a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07c      	b.n	8005f44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Start+0x82>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e58:	e013      	b.n	8005e82 <HAL_TIM_PWM_Start+0xaa>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x92>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e68:	e00b      	b.n	8005e82 <HAL_TIM_PWM_Start+0xaa>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	e003      	b.n	8005e82 <HAL_TIM_PWM_Start+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fce0 	bl	8006850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2d      	ldr	r2, [pc, #180]	; (8005f4c <HAL_TIM_PWM_Start+0x174>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0xcc>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <HAL_TIM_PWM_Start+0x178>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_PWM_Start+0xd0>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_TIM_PWM_Start+0xd2>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <HAL_TIM_PWM_Start+0x174>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d022      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d01d      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <HAL_TIM_PWM_Start+0x17c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1d      	ldr	r2, [pc, #116]	; (8005f58 <HAL_TIM_PWM_Start+0x180>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <HAL_TIM_PWM_Start+0x184>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_TIM_PWM_Start+0x178>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <HAL_TIM_PWM_Start+0x188>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x136>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_TIM_PWM_Start+0x18c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d111      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d010      	beq.n	8005f42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	e007      	b.n	8005f42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0ae      	b.n	80060e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	f200 809f 	bhi.w	80060d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	080060d5 	.word	0x080060d5
 8005fa4:	080060d5 	.word	0x080060d5
 8005fa8:	080060d5 	.word	0x080060d5
 8005fac:	08006011 	.word	0x08006011
 8005fb0:	080060d5 	.word	0x080060d5
 8005fb4:	080060d5 	.word	0x080060d5
 8005fb8:	080060d5 	.word	0x080060d5
 8005fbc:	08006053 	.word	0x08006053
 8005fc0:	080060d5 	.word	0x080060d5
 8005fc4:	080060d5 	.word	0x080060d5
 8005fc8:	080060d5 	.word	0x080060d5
 8005fcc:	08006093 	.word	0x08006093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f9f0 	bl	80063bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	619a      	str	r2, [r3, #24]
      break;
 800600e:	e064      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fa40 	bl	800649c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]
      break;
 8006050:	e043      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fa95 	bl	8006588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0204 	bic.w	r2, r2, #4
 800607c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
      break;
 8006090:	e023      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fae9 	bl	8006670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	61da      	str	r2, [r3, #28]
      break;
 80060d2:	e002      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIM_ConfigClockSource+0x1c>
 8006104:	2302      	movs	r3, #2
 8006106:	e0b4      	b.n	8006272 <HAL_TIM_ConfigClockSource+0x186>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006140:	d03e      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006146:	f200 8087 	bhi.w	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614e:	f000 8086 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x172>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d87f      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006158:	2b70      	cmp	r3, #112	; 0x70
 800615a:	d01a      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0xa6>
 800615c:	2b70      	cmp	r3, #112	; 0x70
 800615e:	d87b      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b60      	cmp	r3, #96	; 0x60
 8006162:	d050      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x11a>
 8006164:	2b60      	cmp	r3, #96	; 0x60
 8006166:	d877      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b50      	cmp	r3, #80	; 0x50
 800616a:	d03c      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0xfa>
 800616c:	2b50      	cmp	r3, #80	; 0x50
 800616e:	d873      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d058      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x13a>
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d86f      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d064      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0x15a>
 800617c:	2b30      	cmp	r3, #48	; 0x30
 800617e:	d86b      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d060      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0x15a>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d867      	bhi.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d05c      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b10      	cmp	r3, #16
 800618e:	d05a      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0x15a>
 8006190:	e062      	b.n	8006258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6899      	ldr	r1, [r3, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f000 fb35 	bl	8006810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	609a      	str	r2, [r3, #8]
      break;
 80061be:	e04f      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6899      	ldr	r1, [r3, #8]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f000 fb1e 	bl	8006810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061e2:	609a      	str	r2, [r3, #8]
      break;
 80061e4:	e03c      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6859      	ldr	r1, [r3, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f000 fa92 	bl	800671c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2150      	movs	r1, #80	; 0x50
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 faeb 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8006204:	e02c      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6859      	ldr	r1, [r3, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	461a      	mov	r2, r3
 8006214:	f000 fab1 	bl	800677a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2160      	movs	r1, #96	; 0x60
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fadb 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8006224:	e01c      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6859      	ldr	r1, [r3, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	461a      	mov	r2, r3
 8006234:	f000 fa72 	bl	800671c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2140      	movs	r1, #64	; 0x40
 800623e:	4618      	mov	r0, r3
 8006240:	f000 facb 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8006244:	e00c      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f000 fac2 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 8006256:	e003      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
      break;
 800625c:	e000      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800625e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3a      	ldr	r2, [pc, #232]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <TIM_Base_SetConfig+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d027      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d023      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <TIM_Base_SetConfig+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <TIM_Base_SetConfig+0x12c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <TIM_Base_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <TIM_Base_SetConfig+0x134>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <TIM_Base_SetConfig+0x138>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <TIM_Base_SetConfig+0x13c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40001800 	.word	0x40001800
 80063b4:	40001c00 	.word	0x40001c00
 80063b8:	40002000 	.word	0x40002000

080063bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <TIM_OC1_SetConfig+0xd8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC1_SetConfig+0x64>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <TIM_OC1_SetConfig+0xdc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10c      	bne.n	800643a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0308 	bic.w	r3, r3, #8
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <TIM_OC1_SetConfig+0xd8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_OC1_SetConfig+0x8e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <TIM_OC1_SetConfig+0xdc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d111      	bne.n	800646e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0320 	bic.w	r3, r3, #32
 80064e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a22      	ldr	r2, [pc, #136]	; (8006580 <TIM_OC2_SetConfig+0xe4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x68>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a21      	ldr	r2, [pc, #132]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10d      	bne.n	8006520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a17      	ldr	r2, [pc, #92]	; (8006580 <TIM_OC2_SetConfig+0xe4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC2_SetConfig+0x94>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a16      	ldr	r2, [pc, #88]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d113      	bne.n	8006558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400

08006588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_OC3_SetConfig+0xe0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC3_SetConfig+0x66>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a20      	ldr	r2, [pc, #128]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10d      	bne.n	800660a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <TIM_OC3_SetConfig+0xe0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC3_SetConfig+0x92>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d113      	bne.n	8006642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <TIM_OC4_SetConfig+0xa4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC4_SetConfig+0x68>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a11      	ldr	r2, [pc, #68]	; (8006718 <TIM_OC4_SetConfig+0xa8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d109      	bne.n	80066ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	019b      	lsls	r3, r3, #6
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40010400 	.word	0x40010400

0800671c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0201 	bic.w	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 030a 	bic.w	r3, r3, #10
 8006758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0210 	bic.w	r2, r3, #16
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f043 0307 	orr.w	r3, r3, #7
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800682a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	431a      	orrs	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2201      	movs	r2, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	43db      	mvns	r3, r3
 8006872:	401a      	ands	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e05a      	b.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a21      	ldr	r2, [pc, #132]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d022      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006900:	d01d      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1d      	ldr	r2, [pc, #116]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a18      	ldr	r2, [pc, #96]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d10c      	bne.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4313      	orrs	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40010400 	.word	0x40010400
 800698c:	40014000 	.word	0x40014000
 8006990:	40001800 	.word	0x40001800

08006994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e03d      	b.n	8006a2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e03f      	b.n	8006aca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fd fbe6 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	; 0x24
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 ff43 	bl	8007908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d165      	bne.n	8006bba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_UART_Transmit_DMA+0x26>
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e05e      	b.n	8006bbc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Transmit_DMA+0x38>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e057      	b.n	8006bbc <HAL_UART_Transmit_DMA+0xe8>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2221      	movs	r2, #33	; 0x21
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b38:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <HAL_UART_Transmit_DMA+0xf0>)
 8006b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	4a21      	ldr	r2, [pc, #132]	; (8006bc8 <HAL_UART_Transmit_DMA+0xf4>)
 8006b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b48:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <HAL_UART_Transmit_DMA+0xf8>)
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	2200      	movs	r2, #0
 8006b52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b54:	f107 0308 	add.w	r3, r7, #8
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3304      	adds	r3, #4
 8006b68:	461a      	mov	r2, r3
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	f7fd fe74 	bl	8004858 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	617b      	str	r3, [r7, #20]
   return(result);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6a39      	ldr	r1, [r7, #32]
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e000      	b.n	8006bbc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006bba:	2302      	movs	r3, #2
  }
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	080071a1 	.word	0x080071a1
 8006bc8:	0800723b 	.word	0x0800723b
 8006bcc:	080073b3 	.word	0x080073b3

08006bd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d11d      	bne.n	8006c26 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_UART_Receive_DMA+0x26>
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e016      	b.n	8006c28 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Receive_DMA+0x38>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e00f      	b.n	8006c28 <HAL_UART_Receive_DMA+0x58>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fc13 	bl	8007448 <UART_Start_Receive_DMA>
 8006c22:	4603      	mov	r3, r0
 8006c24:	e000      	b.n	8006c28 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c26:	2302      	movs	r3, #2
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b0ba      	sub	sp, #232	; 0xe8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10f      	bne.n	8006c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <HAL_UART_IRQHandler+0x66>
 8006c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fd7f 	bl	8007792 <UART_Receive_IT>
      return;
 8006c94:	e256      	b.n	8007144 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80de 	beq.w	8006e5c <HAL_UART_IRQHandler+0x22c>
 8006ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80d1 	beq.w	8006e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_UART_IRQHandler+0xae>
 8006cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f043 0201 	orr.w	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_UART_IRQHandler+0xd2>
 8006cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f043 0202 	orr.w	r2, r3, #2
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_UART_IRQHandler+0xf6>
 8006d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f043 0204 	orr.w	r2, r3, #4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <HAL_UART_IRQHandler+0x126>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f043 0208 	orr.w	r2, r3, #8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 81ed 	beq.w	800713a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_UART_IRQHandler+0x14e>
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd0a 	bl	8007792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <HAL_UART_IRQHandler+0x17a>
 8006da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04f      	beq.n	8006e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc12 	bl	80075d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d141      	bne.n	8006e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1d9      	bne.n	8006dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d013      	beq.n	8006e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	4a7d      	ldr	r2, [pc, #500]	; (800700c <HAL_UART_IRQHandler+0x3dc>)
 8006e18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd fde2 	bl	80049e8 <HAL_DMA_Abort_IT>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d016      	beq.n	8006e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e38:	e00e      	b.n	8006e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f99a 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	e00a      	b.n	8006e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f996 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	e006      	b.n	8006e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f992 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e56:	e170      	b.n	800713a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	bf00      	nop
    return;
 8006e5a:	e16e      	b.n	800713a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	f040 814a 	bne.w	80070fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8143 	beq.w	80070fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 813c 	beq.w	80070fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	f040 80b4 	bne.w	8007010 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8140 	beq.w	800713e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	f080 8139 	bcs.w	800713e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ed2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ede:	f000 8088 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1d9      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e1      	bne.n	8006f2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3314      	adds	r3, #20
 8006f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e3      	bne.n	8006fb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd fc8b 	bl	8004908 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8c0 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007008:	e099      	b.n	800713e <HAL_UART_IRQHandler+0x50e>
 800700a:	bf00      	nop
 800700c:	0800769b 	.word	0x0800769b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007018:	b29b      	uxth	r3, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 808b 	beq.w	8007142 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800702c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8086 	beq.w	8007142 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800704c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800705a:	647a      	str	r2, [r7, #68]	; 0x44
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e3      	bne.n	8007036 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3314      	adds	r3, #20
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	623b      	str	r3, [r7, #32]
   return(result);
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007092:	633a      	str	r2, [r7, #48]	; 0x30
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e3      	bne.n	800706e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070d8:	61fa      	str	r2, [r7, #28]
 80070da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	617b      	str	r3, [r7, #20]
   return(result);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e3      	bne.n	80070b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f848 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070f8:	e023      	b.n	8007142 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_UART_IRQHandler+0x4ea>
 8007106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fad5 	bl	80076c2 <UART_Transmit_IT>
    return;
 8007118:	e014      	b.n	8007144 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00e      	beq.n	8007144 <HAL_UART_IRQHandler+0x514>
 8007126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb15 	bl	8007762 <UART_EndTransmit_IT>
    return;
 8007138:	e004      	b.n	8007144 <HAL_UART_IRQHandler+0x514>
    return;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <HAL_UART_IRQHandler+0x514>
      return;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_UART_IRQHandler+0x514>
      return;
 8007142:	bf00      	nop
  }
}
 8007144:	37e8      	adds	r7, #232	; 0xe8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop

0800714c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b090      	sub	sp, #64	; 0x40
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d137      	bne.n	800722c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80071bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071be:	2200      	movs	r2, #0
 80071c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	623b      	str	r3, [r7, #32]
   return(result);
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3314      	adds	r3, #20
 80071e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e2:	633a      	str	r2, [r7, #48]	; 0x30
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	60fb      	str	r3, [r7, #12]
   return(result);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007216:	61fa      	str	r2, [r7, #28]
 8007218:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	69b9      	ldr	r1, [r7, #24]
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	617b      	str	r3, [r7, #20]
   return(result);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800722a:	e002      	b.n	8007232 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800722c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800722e:	f7f9 fdc3 	bl	8000db8 <HAL_UART_TxCpltCallback>
}
 8007232:	bf00      	nop
 8007234:	3740      	adds	r7, #64	; 0x40
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff ff7f 	bl	800714c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b09c      	sub	sp, #112	; 0x70
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d172      	bne.n	8007358 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007274:	2200      	movs	r2, #0
 8007276:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007298:	65ba      	str	r2, [r7, #88]	; 0x58
 800729a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800729e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3314      	adds	r3, #20
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	667b      	str	r3, [r7, #100]	; 0x64
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072cc:	647a      	str	r2, [r7, #68]	; 0x44
 80072ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3314      	adds	r3, #20
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	623b      	str	r3, [r7, #32]
   return(result);
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
 80072f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3314      	adds	r3, #20
 80072fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007300:	633a      	str	r2, [r7, #48]	; 0x30
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	2b01      	cmp	r3, #1
 8007322:	d119      	bne.n	8007358 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	60fb      	str	r3, [r7, #12]
   return(result);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0310 	bic.w	r3, r3, #16
 800733a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800733c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	69b9      	ldr	r1, [r7, #24]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	617b      	str	r3, [r7, #20]
   return(result);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	d106      	bne.n	800736e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007364:	4619      	mov	r1, r3
 8007366:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007368:	f7ff ff0e 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800736c:	e002      	b.n	8007374 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800736e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007370:	f7f9 fd3e 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 8007374:	bf00      	nop
 8007376:	3770      	adds	r7, #112	; 0x70
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	2b01      	cmp	r3, #1
 8007390:	d108      	bne.n	80073a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	b29b      	uxth	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fef3 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073a2:	e002      	b.n	80073aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fedb 	bl	8007160 <HAL_UART_RxHalfCpltCallback>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b80      	cmp	r3, #128	; 0x80
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b21      	cmp	r3, #33	; 0x21
 80073e4:	d108      	bne.n	80073f8 <UART_DMAError+0x46>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073f2:	68b8      	ldr	r0, [r7, #8]
 80073f4:	f000 f8c6 	bl	8007584 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	d108      	bne.n	800742c <UART_DMAError+0x7a>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007426:	68b8      	ldr	r0, [r7, #8]
 8007428:	f000 f8d4 	bl	80075d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	f043 0210 	orr.w	r2, r3, #16
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f7ff fe9b 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b098      	sub	sp, #96	; 0x60
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2222      	movs	r2, #34	; 0x22
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	4a40      	ldr	r2, [pc, #256]	; (8007578 <UART_Start_Receive_DMA+0x130>)
 8007476:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	4a3f      	ldr	r2, [pc, #252]	; (800757c <UART_Start_Receive_DMA+0x134>)
 800747e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	4a3e      	ldr	r2, [pc, #248]	; (8007580 <UART_Start_Receive_DMA+0x138>)
 8007486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	2200      	movs	r2, #0
 800748e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	f7fd f9d6 	bl	8004858 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d019      	beq.n	8007506 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80074f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	657b      	str	r3, [r7, #84]	; 0x54
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3314      	adds	r3, #20
 8007524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007526:	63ba      	str	r2, [r7, #56]	; 0x38
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800752c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3314      	adds	r3, #20
 8007540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	617b      	str	r3, [r7, #20]
   return(result);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007550:	653b      	str	r3, [r7, #80]	; 0x50
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3314      	adds	r3, #20
 8007558:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800755a:	627a      	str	r2, [r7, #36]	; 0x24
 800755c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6a39      	ldr	r1, [r7, #32]
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	61fb      	str	r3, [r7, #28]
   return(result);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e5      	bne.n	800753a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3760      	adds	r7, #96	; 0x60
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	08007257 	.word	0x08007257
 800757c:	0800737d 	.word	0x0800737d
 8007580:	080073b3 	.word	0x080073b3

08007584 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	; 0x24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	60bb      	str	r3, [r7, #8]
   return(result);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	61ba      	str	r2, [r7, #24]
 80075ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6979      	ldr	r1, [r7, #20]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80075c8:	bf00      	nop
 80075ca:	3724      	adds	r7, #36	; 0x24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b095      	sub	sp, #84	; 0x54
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075fc:	643a      	str	r2, [r7, #64]	; 0x40
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e5      	bne.n	80075dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3314      	adds	r3, #20
 8007616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	64bb      	str	r3, [r7, #72]	; 0x48
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3314      	adds	r3, #20
 800762e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	2b01      	cmp	r3, #1
 800764a:	d119      	bne.n	8007680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	330c      	adds	r3, #12
 8007652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	60bb      	str	r3, [r7, #8]
   return(result);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 0310 	bic.w	r3, r3, #16
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766c:	61ba      	str	r2, [r7, #24]
 800766e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	613b      	str	r3, [r7, #16]
   return(result);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e5      	bne.n	800764c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800768e:	bf00      	nop
 8007690:	3754      	adds	r7, #84	; 0x54
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fd5d 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b21      	cmp	r3, #33	; 0x21
 80076d4:	d13e      	bne.n	8007754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076de:	d114      	bne.n	800770a <UART_Transmit_IT+0x48>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d110      	bne.n	800770a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	1c9a      	adds	r2, r3, #2
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	621a      	str	r2, [r3, #32]
 8007708:	e008      	b.n	800771c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6211      	str	r1, [r2, #32]
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29b      	uxth	r3, r3
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4619      	mov	r1, r3
 800772a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800773e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7f9 fb18 	bl	8000db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b08c      	sub	sp, #48	; 0x30
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b22      	cmp	r3, #34	; 0x22
 80077a4:	f040 80ab 	bne.w	80078fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b0:	d117      	bne.n	80077e2 <UART_Receive_IT+0x50>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d113      	bne.n	80077e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
 80077e0:	e026      	b.n	8007830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d007      	beq.n	8007806 <UART_Receive_IT+0x74>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <UART_Receive_IT+0x82>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	b2da      	uxtb	r2, r3
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e008      	b.n	8007826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007820:	b2da      	uxtb	r2, r3
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29b      	uxth	r3, r3
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4619      	mov	r1, r3
 800783e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007840:	2b00      	cmp	r3, #0
 8007842:	d15a      	bne.n	80078fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0220 	bic.w	r2, r2, #32
 8007852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695a      	ldr	r2, [r3, #20]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	2b01      	cmp	r3, #1
 8007882:	d135      	bne.n	80078f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	613b      	str	r3, [r7, #16]
   return(result);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f023 0310 	bic.w	r3, r3, #16
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	623a      	str	r2, [r7, #32]
 80078ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	69f9      	ldr	r1, [r7, #28]
 80078b0:	6a3a      	ldr	r2, [r7, #32]
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e5      	bne.n	800788a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d10a      	bne.n	80078e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fc4d 	bl	8007188 <HAL_UARTEx_RxEventCallback>
 80078ee:	e002      	b.n	80078f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7f9 fa7d 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e002      	b.n	8007900 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e000      	b.n	8007900 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
  }
}
 8007900:	4618      	mov	r0, r3
 8007902:	3730      	adds	r7, #48	; 0x30
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800790c:	b0c0      	sub	sp, #256	; 0x100
 800790e:	af00      	add	r7, sp, #0
 8007910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	68d9      	ldr	r1, [r3, #12]
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	ea40 0301 	orr.w	r3, r0, r1
 8007930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	431a      	orrs	r2, r3
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	431a      	orrs	r2, r3
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007960:	f021 010c 	bic.w	r1, r1, #12
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800796e:	430b      	orrs	r3, r1
 8007970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007982:	6999      	ldr	r1, [r3, #24]
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	ea40 0301 	orr.w	r3, r0, r1
 800798e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b8f      	ldr	r3, [pc, #572]	; (8007bd4 <UART_SetConfig+0x2cc>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d005      	beq.n	80079a8 <UART_SetConfig+0xa0>
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b8d      	ldr	r3, [pc, #564]	; (8007bd8 <UART_SetConfig+0x2d0>)
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d104      	bne.n	80079b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079a8:	f7fe f8fa 	bl	8005ba0 <HAL_RCC_GetPCLK2Freq>
 80079ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079b0:	e003      	b.n	80079ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079b2:	f7fe f8e1 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 80079b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	f040 810c 	bne.w	8007be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	1891      	adds	r1, r2, r2
 80079e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80079e2:	415b      	adcs	r3, r3
 80079e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079ea:	4621      	mov	r1, r4
 80079ec:	eb12 0801 	adds.w	r8, r2, r1
 80079f0:	4629      	mov	r1, r5
 80079f2:	eb43 0901 	adc.w	r9, r3, r1
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a0a:	4690      	mov	r8, r2
 8007a0c:	4699      	mov	r9, r3
 8007a0e:	4623      	mov	r3, r4
 8007a10:	eb18 0303 	adds.w	r3, r8, r3
 8007a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a18:	462b      	mov	r3, r5
 8007a1a:	eb49 0303 	adc.w	r3, r9, r3
 8007a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a36:	460b      	mov	r3, r1
 8007a38:	18db      	adds	r3, r3, r3
 8007a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	eb42 0303 	adc.w	r3, r2, r3
 8007a42:	657b      	str	r3, [r7, #84]	; 0x54
 8007a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a4c:	f7f8 fed2 	bl	80007f4 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4b61      	ldr	r3, [pc, #388]	; (8007bdc <UART_SetConfig+0x2d4>)
 8007a56:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	011c      	lsls	r4, r3, #4
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a80:	4641      	mov	r1, r8
 8007a82:	eb12 0a01 	adds.w	sl, r2, r1
 8007a86:	4649      	mov	r1, r9
 8007a88:	eb43 0b01 	adc.w	fp, r3, r1
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aa0:	4692      	mov	sl, r2
 8007aa2:	469b      	mov	fp, r3
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8007aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007acc:	460b      	mov	r3, r1
 8007ace:	18db      	adds	r3, r3, r3
 8007ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	eb42 0303 	adc.w	r3, r2, r3
 8007ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8007ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ae2:	f7f8 fe87 	bl	80007f4 <__aeabi_uldivmod>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	4b3b      	ldr	r3, [pc, #236]	; (8007bdc <UART_SetConfig+0x2d4>)
 8007aee:	fba3 2301 	umull	r2, r3, r3, r1
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	2264      	movs	r2, #100	; 0x64
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	1acb      	subs	r3, r1, r3
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b02:	4b36      	ldr	r3, [pc, #216]	; (8007bdc <UART_SetConfig+0x2d4>)
 8007b04:	fba3 2302 	umull	r2, r3, r3, r2
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b10:	441c      	add	r4, r3
 8007b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	1891      	adds	r1, r2, r2
 8007b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b34:	4641      	mov	r1, r8
 8007b36:	1851      	adds	r1, r2, r1
 8007b38:	6339      	str	r1, [r7, #48]	; 0x30
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	00cb      	lsls	r3, r1, #3
 8007b50:	4651      	mov	r1, sl
 8007b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b56:	4651      	mov	r1, sl
 8007b58:	00ca      	lsls	r2, r1, #3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4642      	mov	r2, r8
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b68:	464b      	mov	r3, r9
 8007b6a:	460a      	mov	r2, r1
 8007b6c:	eb42 0303 	adc.w	r3, r2, r3
 8007b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b88:	460b      	mov	r3, r1
 8007b8a:	18db      	adds	r3, r3, r3
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b8e:	4613      	mov	r3, r2
 8007b90:	eb42 0303 	adc.w	r3, r2, r3
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b9e:	f7f8 fe29 	bl	80007f4 <__aeabi_uldivmod>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <UART_SetConfig+0x2d4>)
 8007ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	2164      	movs	r1, #100	; 0x64
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	3332      	adds	r3, #50	; 0x32
 8007bba:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <UART_SetConfig+0x2d4>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f003 0207 	and.w	r2, r3, #7
 8007bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4422      	add	r2, r4
 8007bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bd0:	e106      	b.n	8007de0 <UART_SetConfig+0x4d8>
 8007bd2:	bf00      	nop
 8007bd4:	40011000 	.word	0x40011000
 8007bd8:	40011400 	.word	0x40011400
 8007bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	1891      	adds	r1, r2, r2
 8007bf8:	6239      	str	r1, [r7, #32]
 8007bfa:	415b      	adcs	r3, r3
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c02:	4641      	mov	r1, r8
 8007c04:	1854      	adds	r4, r2, r1
 8007c06:	4649      	mov	r1, r9
 8007c08:	eb43 0501 	adc.w	r5, r3, r1
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	00eb      	lsls	r3, r5, #3
 8007c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c1a:	00e2      	lsls	r2, r4, #3
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	461d      	mov	r5, r3
 8007c20:	4643      	mov	r3, r8
 8007c22:	18e3      	adds	r3, r4, r3
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c28:	464b      	mov	r3, r9
 8007c2a:	eb45 0303 	adc.w	r3, r5, r3
 8007c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c4e:	4629      	mov	r1, r5
 8007c50:	008b      	lsls	r3, r1, #2
 8007c52:	4621      	mov	r1, r4
 8007c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c58:	4621      	mov	r1, r4
 8007c5a:	008a      	lsls	r2, r1, #2
 8007c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c60:	f7f8 fdc8 	bl	80007f4 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4b60      	ldr	r3, [pc, #384]	; (8007dec <UART_SetConfig+0x4e4>)
 8007c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	011c      	lsls	r4, r3, #4
 8007c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	1891      	adds	r1, r2, r2
 8007c8a:	61b9      	str	r1, [r7, #24]
 8007c8c:	415b      	adcs	r3, r3
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c94:	4641      	mov	r1, r8
 8007c96:	1851      	adds	r1, r2, r1
 8007c98:	6139      	str	r1, [r7, #16]
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	414b      	adcs	r3, r1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cac:	4659      	mov	r1, fp
 8007cae:	00cb      	lsls	r3, r1, #3
 8007cb0:	4651      	mov	r1, sl
 8007cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb6:	4651      	mov	r1, sl
 8007cb8:	00ca      	lsls	r2, r1, #3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cc8:	464b      	mov	r3, r9
 8007cca:	460a      	mov	r2, r1
 8007ccc:	eb42 0303 	adc.w	r3, r2, r3
 8007cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007cec:	4649      	mov	r1, r9
 8007cee:	008b      	lsls	r3, r1, #2
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	008a      	lsls	r2, r1, #2
 8007cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cfe:	f7f8 fd79 	bl	80007f4 <__aeabi_uldivmod>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	4b38      	ldr	r3, [pc, #224]	; (8007dec <UART_SetConfig+0x4e4>)
 8007d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	2264      	movs	r2, #100	; 0x64
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	1acb      	subs	r3, r1, r3
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	3332      	adds	r3, #50	; 0x32
 8007d1c:	4a33      	ldr	r2, [pc, #204]	; (8007dec <UART_SetConfig+0x4e4>)
 8007d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d28:	441c      	add	r4, r3
 8007d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d2e:	2200      	movs	r2, #0
 8007d30:	673b      	str	r3, [r7, #112]	; 0x70
 8007d32:	677a      	str	r2, [r7, #116]	; 0x74
 8007d34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	1891      	adds	r1, r2, r2
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	415b      	adcs	r3, r3
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d48:	4641      	mov	r1, r8
 8007d4a:	1851      	adds	r1, r2, r1
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	4649      	mov	r1, r9
 8007d50:	414b      	adcs	r3, r1
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d60:	4659      	mov	r1, fp
 8007d62:	00cb      	lsls	r3, r1, #3
 8007d64:	4651      	mov	r1, sl
 8007d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	00ca      	lsls	r2, r1, #3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	4603      	mov	r3, r0
 8007d74:	4642      	mov	r2, r8
 8007d76:	189b      	adds	r3, r3, r2
 8007d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	eb42 0303 	adc.w	r3, r2, r3
 8007d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8e:	667a      	str	r2, [r7, #100]	; 0x64
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	008b      	lsls	r3, r1, #2
 8007da0:	4641      	mov	r1, r8
 8007da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007da6:	4641      	mov	r1, r8
 8007da8:	008a      	lsls	r2, r1, #2
 8007daa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dae:	f7f8 fd21 	bl	80007f4 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <UART_SetConfig+0x4e4>)
 8007db8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	2164      	movs	r1, #100	; 0x64
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	3332      	adds	r3, #50	; 0x32
 8007dca:	4a08      	ldr	r2, [pc, #32]	; (8007dec <UART_SetConfig+0x4e4>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f003 020f 	and.w	r2, r3, #15
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4422      	add	r2, r4
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007de6:	46bd      	mov	sp, r7
 8007de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dec:	51eb851f 	.word	0x51eb851f

08007df0 <sqrtf>:
 8007df0:	b508      	push	{r3, lr}
 8007df2:	ed2d 8b02 	vpush	{d8}
 8007df6:	eeb0 8a40 	vmov.f32	s16, s0
 8007dfa:	f000 f8f2 	bl	8007fe2 <__ieee754_sqrtf>
 8007dfe:	eeb4 8a48 	vcmp.f32	s16, s16
 8007e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e06:	d60c      	bvs.n	8007e22 <sqrtf+0x32>
 8007e08:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007e28 <sqrtf+0x38>
 8007e0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e14:	d505      	bpl.n	8007e22 <sqrtf+0x32>
 8007e16:	f000 f927 	bl	8008068 <__errno>
 8007e1a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007e1e:	2321      	movs	r3, #33	; 0x21
 8007e20:	6003      	str	r3, [r0, #0]
 8007e22:	ecbd 8b02 	vpop	{d8}
 8007e26:	bd08      	pop	{r3, pc}
 8007e28:	00000000 	.word	0x00000000

08007e2c <atanf>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	ee10 5a10 	vmov	r5, s0
 8007e32:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007e36:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007e3a:	eef0 7a40 	vmov.f32	s15, s0
 8007e3e:	db10      	blt.n	8007e62 <atanf+0x36>
 8007e40:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007e44:	dd04      	ble.n	8007e50 <atanf+0x24>
 8007e46:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007f88 <atanf+0x15c>
 8007e54:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007f8c <atanf+0x160>
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	bfd8      	it	le
 8007e5c:	eef0 7a47 	vmovle.f32	s15, s14
 8007e60:	e7f3      	b.n	8007e4a <atanf+0x1e>
 8007e62:	4b4b      	ldr	r3, [pc, #300]	; (8007f90 <atanf+0x164>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	dc10      	bgt.n	8007e8a <atanf+0x5e>
 8007e68:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007e6c:	da0a      	bge.n	8007e84 <atanf+0x58>
 8007e6e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007f94 <atanf+0x168>
 8007e72:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e82:	dce2      	bgt.n	8007e4a <atanf+0x1e>
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295
 8007e88:	e013      	b.n	8007eb2 <atanf+0x86>
 8007e8a:	f000 f8a3 	bl	8007fd4 <fabsf>
 8007e8e:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <atanf+0x16c>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	dc4f      	bgt.n	8007f34 <atanf+0x108>
 8007e94:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	dc41      	bgt.n	8007f20 <atanf+0xf4>
 8007e9c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007ea0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ea4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007eae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007eb8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007f9c <atanf+0x170>
 8007ebc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007fa0 <atanf+0x174>
 8007ec0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007fa4 <atanf+0x178>
 8007ec4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007ec8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007ecc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007fa8 <atanf+0x17c>
 8007ed0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ed4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007fac <atanf+0x180>
 8007ed8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007edc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007fb0 <atanf+0x184>
 8007ee0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ee4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fb4 <atanf+0x188>
 8007ee8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007eec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007fb8 <atanf+0x18c>
 8007ef0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007ef4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007fbc <atanf+0x190>
 8007ef8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007efc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007fc0 <atanf+0x194>
 8007f00:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007f04:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007fc4 <atanf+0x198>
 8007f08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007f0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007f10:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f18:	d121      	bne.n	8007f5e <atanf+0x132>
 8007f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f1e:	e794      	b.n	8007e4a <atanf+0x1e>
 8007f20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007f24:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007f28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007f32:	e7be      	b.n	8007eb2 <atanf+0x86>
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <atanf+0x19c>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	dc0b      	bgt.n	8007f52 <atanf+0x126>
 8007f3a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f42:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007f46:	2302      	movs	r3, #2
 8007f48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f50:	e7af      	b.n	8007eb2 <atanf+0x86>
 8007f52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e7a9      	b.n	8007eb2 <atanf+0x86>
 8007f5e:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <atanf+0x1a0>)
 8007f60:	491b      	ldr	r1, [pc, #108]	; (8007fd0 <atanf+0x1a4>)
 8007f62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007f66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007f6a:	edd3 6a00 	vldr	s13, [r3]
 8007f6e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f78:	edd2 7a00 	vldr	s15, [r2]
 8007f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f80:	bfb8      	it	lt
 8007f82:	eef1 7a67 	vneglt.f32	s15, s15
 8007f86:	e760      	b.n	8007e4a <atanf+0x1e>
 8007f88:	3fc90fdb 	.word	0x3fc90fdb
 8007f8c:	bfc90fdb 	.word	0xbfc90fdb
 8007f90:	3edfffff 	.word	0x3edfffff
 8007f94:	7149f2ca 	.word	0x7149f2ca
 8007f98:	3f97ffff 	.word	0x3f97ffff
 8007f9c:	3c8569d7 	.word	0x3c8569d7
 8007fa0:	3d4bda59 	.word	0x3d4bda59
 8007fa4:	bd6ef16b 	.word	0xbd6ef16b
 8007fa8:	3d886b35 	.word	0x3d886b35
 8007fac:	3dba2e6e 	.word	0x3dba2e6e
 8007fb0:	3e124925 	.word	0x3e124925
 8007fb4:	3eaaaaab 	.word	0x3eaaaaab
 8007fb8:	bd15a221 	.word	0xbd15a221
 8007fbc:	bd9d8795 	.word	0xbd9d8795
 8007fc0:	bde38e38 	.word	0xbde38e38
 8007fc4:	be4ccccd 	.word	0xbe4ccccd
 8007fc8:	401bffff 	.word	0x401bffff
 8007fcc:	080085f0 	.word	0x080085f0
 8007fd0:	08008600 	.word	0x08008600

08007fd4 <fabsf>:
 8007fd4:	ee10 3a10 	vmov	r3, s0
 8007fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	ee00 3a10 	vmov	s0, r3
 8007fe0:	4770      	bx	lr

08007fe2 <__ieee754_sqrtf>:
 8007fe2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007fe6:	4770      	bx	lr

08007fe8 <realloc>:
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <realloc+0xc>)
 8007fea:	460a      	mov	r2, r1
 8007fec:	4601      	mov	r1, r0
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	f000 b802 	b.w	8007ff8 <_realloc_r>
 8007ff4:	20000058 	.word	0x20000058

08007ff8 <_realloc_r>:
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4614      	mov	r4, r2
 8008000:	460e      	mov	r6, r1
 8008002:	b921      	cbnz	r1, 800800e <_realloc_r+0x16>
 8008004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	4611      	mov	r1, r2
 800800a:	f000 b8d3 	b.w	80081b4 <_malloc_r>
 800800e:	b92a      	cbnz	r2, 800801c <_realloc_r+0x24>
 8008010:	f000 f864 	bl	80080dc <_free_r>
 8008014:	4625      	mov	r5, r4
 8008016:	4628      	mov	r0, r5
 8008018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800801c:	f000 f956 	bl	80082cc <_malloc_usable_size_r>
 8008020:	4284      	cmp	r4, r0
 8008022:	4607      	mov	r7, r0
 8008024:	d802      	bhi.n	800802c <_realloc_r+0x34>
 8008026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800802a:	d812      	bhi.n	8008052 <_realloc_r+0x5a>
 800802c:	4621      	mov	r1, r4
 800802e:	4640      	mov	r0, r8
 8008030:	f000 f8c0 	bl	80081b4 <_malloc_r>
 8008034:	4605      	mov	r5, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d0ed      	beq.n	8008016 <_realloc_r+0x1e>
 800803a:	42bc      	cmp	r4, r7
 800803c:	4622      	mov	r2, r4
 800803e:	4631      	mov	r1, r6
 8008040:	bf28      	it	cs
 8008042:	463a      	movcs	r2, r7
 8008044:	f000 f83c 	bl	80080c0 <memcpy>
 8008048:	4631      	mov	r1, r6
 800804a:	4640      	mov	r0, r8
 800804c:	f000 f846 	bl	80080dc <_free_r>
 8008050:	e7e1      	b.n	8008016 <_realloc_r+0x1e>
 8008052:	4635      	mov	r5, r6
 8008054:	e7df      	b.n	8008016 <_realloc_r+0x1e>

08008056 <memset>:
 8008056:	4402      	add	r2, r0
 8008058:	4603      	mov	r3, r0
 800805a:	4293      	cmp	r3, r2
 800805c:	d100      	bne.n	8008060 <memset+0xa>
 800805e:	4770      	bx	lr
 8008060:	f803 1b01 	strb.w	r1, [r3], #1
 8008064:	e7f9      	b.n	800805a <memset+0x4>
	...

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	20000058 	.word	0x20000058

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 f938 	bl	80082fc <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	08008618 	.word	0x08008618
 80080b0:	08008618 	.word	0x08008618
 80080b4:	08008618 	.word	0x08008618
 80080b8:	08008624 	.word	0x08008624

080080bc <__retarget_lock_acquire_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_release_recursive>:
 80080be:	4770      	bx	lr

080080c0 <memcpy>:
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c8:	d100      	bne.n	80080cc <memcpy+0xc>
 80080ca:	4770      	bx	lr
 80080cc:	b510      	push	{r4, lr}
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d1f9      	bne.n	80080ce <memcpy+0xe>
 80080da:	bd10      	pop	{r4, pc}

080080dc <_free_r>:
 80080dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080de:	2900      	cmp	r1, #0
 80080e0:	d044      	beq.n	800816c <_free_r+0x90>
 80080e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e6:	9001      	str	r0, [sp, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f1a1 0404 	sub.w	r4, r1, #4
 80080ee:	bfb8      	it	lt
 80080f0:	18e4      	addlt	r4, r4, r3
 80080f2:	f000 f8df 	bl	80082b4 <__malloc_lock>
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <_free_r+0x94>)
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	b933      	cbnz	r3, 800810c <_free_r+0x30>
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	b003      	add	sp, #12
 8008104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008108:	f000 b8da 	b.w	80082c0 <__malloc_unlock>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d908      	bls.n	8008122 <_free_r+0x46>
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	1961      	adds	r1, r4, r5
 8008114:	428b      	cmp	r3, r1
 8008116:	bf01      	itttt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	1949      	addeq	r1, r1, r5
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	e7ed      	b.n	80080fe <_free_r+0x22>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x50>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x46>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1855      	adds	r5, r2, r1
 8008130:	42a5      	cmp	r5, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x70>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	4421      	add	r1, r4
 8008138:	1854      	adds	r4, r2, r1
 800813a:	42a3      	cmp	r3, r4
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1e0      	bne.n	8008102 <_free_r+0x26>
 8008140:	681c      	ldr	r4, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	440c      	add	r4, r1
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	e7da      	b.n	8008102 <_free_r+0x26>
 800814c:	d902      	bls.n	8008154 <_free_r+0x78>
 800814e:	230c      	movs	r3, #12
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	e7d6      	b.n	8008102 <_free_r+0x26>
 8008154:	6825      	ldr	r5, [r4, #0]
 8008156:	1961      	adds	r1, r4, r5
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7ca      	b.n	8008102 <_free_r+0x26>
 800816c:	b003      	add	sp, #12
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	20000d84 	.word	0x20000d84

08008174 <sbrk_aligned>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4e0e      	ldr	r6, [pc, #56]	; (80081b0 <sbrk_aligned+0x3c>)
 8008178:	460c      	mov	r4, r1
 800817a:	6831      	ldr	r1, [r6, #0]
 800817c:	4605      	mov	r5, r0
 800817e:	b911      	cbnz	r1, 8008186 <sbrk_aligned+0x12>
 8008180:	f000 f8ac 	bl	80082dc <_sbrk_r>
 8008184:	6030      	str	r0, [r6, #0]
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f8a7 	bl	80082dc <_sbrk_r>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	d00a      	beq.n	80081a8 <sbrk_aligned+0x34>
 8008192:	1cc4      	adds	r4, r0, #3
 8008194:	f024 0403 	bic.w	r4, r4, #3
 8008198:	42a0      	cmp	r0, r4
 800819a:	d007      	beq.n	80081ac <sbrk_aligned+0x38>
 800819c:	1a21      	subs	r1, r4, r0
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f89c 	bl	80082dc <_sbrk_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d101      	bne.n	80081ac <sbrk_aligned+0x38>
 80081a8:	f04f 34ff 	mov.w	r4, #4294967295
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	20000d88 	.word	0x20000d88

080081b4 <_malloc_r>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	1ccd      	adds	r5, r1, #3
 80081ba:	f025 0503 	bic.w	r5, r5, #3
 80081be:	3508      	adds	r5, #8
 80081c0:	2d0c      	cmp	r5, #12
 80081c2:	bf38      	it	cc
 80081c4:	250c      	movcc	r5, #12
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	4607      	mov	r7, r0
 80081ca:	db01      	blt.n	80081d0 <_malloc_r+0x1c>
 80081cc:	42a9      	cmp	r1, r5
 80081ce:	d905      	bls.n	80081dc <_malloc_r+0x28>
 80081d0:	230c      	movs	r3, #12
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	2600      	movs	r6, #0
 80081d6:	4630      	mov	r0, r6
 80081d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082b0 <_malloc_r+0xfc>
 80081e0:	f000 f868 	bl	80082b4 <__malloc_lock>
 80081e4:	f8d8 3000 	ldr.w	r3, [r8]
 80081e8:	461c      	mov	r4, r3
 80081ea:	bb5c      	cbnz	r4, 8008244 <_malloc_r+0x90>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4638      	mov	r0, r7
 80081f0:	f7ff ffc0 	bl	8008174 <sbrk_aligned>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	4604      	mov	r4, r0
 80081f8:	d155      	bne.n	80082a6 <_malloc_r+0xf2>
 80081fa:	f8d8 4000 	ldr.w	r4, [r8]
 80081fe:	4626      	mov	r6, r4
 8008200:	2e00      	cmp	r6, #0
 8008202:	d145      	bne.n	8008290 <_malloc_r+0xdc>
 8008204:	2c00      	cmp	r4, #0
 8008206:	d048      	beq.n	800829a <_malloc_r+0xe6>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	4631      	mov	r1, r6
 800820c:	4638      	mov	r0, r7
 800820e:	eb04 0903 	add.w	r9, r4, r3
 8008212:	f000 f863 	bl	80082dc <_sbrk_r>
 8008216:	4581      	cmp	r9, r0
 8008218:	d13f      	bne.n	800829a <_malloc_r+0xe6>
 800821a:	6821      	ldr	r1, [r4, #0]
 800821c:	1a6d      	subs	r5, r5, r1
 800821e:	4629      	mov	r1, r5
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ffa7 	bl	8008174 <sbrk_aligned>
 8008226:	3001      	adds	r0, #1
 8008228:	d037      	beq.n	800829a <_malloc_r+0xe6>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	442b      	add	r3, r5
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	f8d8 3000 	ldr.w	r3, [r8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d038      	beq.n	80082aa <_malloc_r+0xf6>
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	42a2      	cmp	r2, r4
 800823c:	d12b      	bne.n	8008296 <_malloc_r+0xe2>
 800823e:	2200      	movs	r2, #0
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	e00f      	b.n	8008264 <_malloc_r+0xb0>
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	1b52      	subs	r2, r2, r5
 8008248:	d41f      	bmi.n	800828a <_malloc_r+0xd6>
 800824a:	2a0b      	cmp	r2, #11
 800824c:	d917      	bls.n	800827e <_malloc_r+0xca>
 800824e:	1961      	adds	r1, r4, r5
 8008250:	42a3      	cmp	r3, r4
 8008252:	6025      	str	r5, [r4, #0]
 8008254:	bf18      	it	ne
 8008256:	6059      	strne	r1, [r3, #4]
 8008258:	6863      	ldr	r3, [r4, #4]
 800825a:	bf08      	it	eq
 800825c:	f8c8 1000 	streq.w	r1, [r8]
 8008260:	5162      	str	r2, [r4, r5]
 8008262:	604b      	str	r3, [r1, #4]
 8008264:	4638      	mov	r0, r7
 8008266:	f104 060b 	add.w	r6, r4, #11
 800826a:	f000 f829 	bl	80082c0 <__malloc_unlock>
 800826e:	f026 0607 	bic.w	r6, r6, #7
 8008272:	1d23      	adds	r3, r4, #4
 8008274:	1af2      	subs	r2, r6, r3
 8008276:	d0ae      	beq.n	80081d6 <_malloc_r+0x22>
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	50a3      	str	r3, [r4, r2]
 800827c:	e7ab      	b.n	80081d6 <_malloc_r+0x22>
 800827e:	42a3      	cmp	r3, r4
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	d1dd      	bne.n	8008240 <_malloc_r+0x8c>
 8008284:	f8c8 2000 	str.w	r2, [r8]
 8008288:	e7ec      	b.n	8008264 <_malloc_r+0xb0>
 800828a:	4623      	mov	r3, r4
 800828c:	6864      	ldr	r4, [r4, #4]
 800828e:	e7ac      	b.n	80081ea <_malloc_r+0x36>
 8008290:	4634      	mov	r4, r6
 8008292:	6876      	ldr	r6, [r6, #4]
 8008294:	e7b4      	b.n	8008200 <_malloc_r+0x4c>
 8008296:	4613      	mov	r3, r2
 8008298:	e7cc      	b.n	8008234 <_malloc_r+0x80>
 800829a:	230c      	movs	r3, #12
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	4638      	mov	r0, r7
 80082a0:	f000 f80e 	bl	80082c0 <__malloc_unlock>
 80082a4:	e797      	b.n	80081d6 <_malloc_r+0x22>
 80082a6:	6025      	str	r5, [r4, #0]
 80082a8:	e7dc      	b.n	8008264 <_malloc_r+0xb0>
 80082aa:	605b      	str	r3, [r3, #4]
 80082ac:	deff      	udf	#255	; 0xff
 80082ae:	bf00      	nop
 80082b0:	20000d84 	.word	0x20000d84

080082b4 <__malloc_lock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__malloc_lock+0x8>)
 80082b6:	f7ff bf01 	b.w	80080bc <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20000d80 	.word	0x20000d80

080082c0 <__malloc_unlock>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__malloc_unlock+0x8>)
 80082c2:	f7ff befc 	b.w	80080be <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20000d80 	.word	0x20000d80

080082cc <_malloc_usable_size_r>:
 80082cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d0:	1f18      	subs	r0, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	bfbc      	itt	lt
 80082d6:	580b      	ldrlt	r3, [r1, r0]
 80082d8:	18c0      	addlt	r0, r0, r3
 80082da:	4770      	bx	lr

080082dc <_sbrk_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d06      	ldr	r5, [pc, #24]	; (80082f8 <_sbrk_r+0x1c>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7fb fb2a 	bl	8003940 <_sbrk>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_sbrk_r+0x1a>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_sbrk_r+0x1a>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	20000d7c 	.word	0x20000d7c

080082fc <_init>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr

08008308 <_fini>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	bf00      	nop
 800830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830e:	bc08      	pop	{r3}
 8008310:	469e      	mov	lr, r3
 8008312:	4770      	bx	lr
